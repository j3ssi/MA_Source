no display found. Using non-interactive Agg backend
[5, 5, 5]
[16, 32, 64]
Pytorch Training main.py; workers: 6; numOfStages: 3; layerinBlock: 2;widthofFirstLayer: 16; Epochen: 180; reset: False; start epoche: 1; test: True pathtoModell: ./output/experimente4/prune_reconf10_2/model.nn; checkpoint: ./output/experimente4/prune_reconf10_2; saveModell: True; LR: 0.1
random number: 1761
Files already downloaded and verified

width: 16
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (3, 3
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (4, 3
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (5, 3
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (6, 3
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (7, 3
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
width: 32
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (9, 0
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
(i,j): (10, 3
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
(i,j): (11, 3
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
(i,j): (12, 3
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
(i,j): (13, 3
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
width: 64
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
(i,j): (15, 0
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
conv gefunden
(i,j): (16, 3
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
conv gefunden
(i,j): (17, 3
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
conv gefunden
(i,j): (18, 3
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
conv gefunden
(i,j): (19, 3
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
stagesI: {16: [(3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)], 32: [(10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)], 64: [(16, 0), (17, 0), (18, 0), (19, 0), (21, None)]}
stagesO: {16: [(0, None), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3)], 32: [(8, 3), (9, 0), (10, 3), (11, 3), (12, 3), (13, 3)], 64: [(14, 3), (15, 0), (16, 3), (17, 3), (18, 3), (19, 3)]}
Modell Erstellung
N2N(
  (module_list): ModuleList(
    (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (4): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (5): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (6): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (7): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (8): Sequential(
      (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (9): Sequential(
      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (10): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (11): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (12): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (13): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (14): Sequential(
      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (15): Sequential(
      (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (16): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (17): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (18): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (19): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (20): AdaptiveAvgPool2d(output_size=(1, 1))
    (21): Linear(in_features=64, out_features=10, bias=True)
  )
  (relu): ReLU(inplace=True)
)
device count: 1
Startepoche: 1
deeper epoch: 0
Epoche: [1/180]; Lr: 0.1
batch Size 256
befor train
/home/jessica.buehler/venv/lib/python3.6/site-packages/torch/cuda/memory.py:234: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  FutureWarning)
Epoch: [1][0/196]	Time 0.178 (0.178)	Data 0.191 (0.191)	Loss 2.7129 (2.7129)	Acc@1 10.938 (10.938)	Acc@5 47.656 (47.656)
Epoch: [1][64/196]	Time 0.100 (0.102)	Data 0.000 (0.003)	Loss 1.6911 (2.0385)	Acc@1 32.031 (23.161)	Acc@5 89.062 (77.037)
Epoch: [1][128/196]	Time 0.100 (0.102)	Data 0.000 (0.002)	Loss 1.6223 (1.8755)	Acc@1 38.281 (28.722)	Acc@5 87.891 (82.198)
Epoch: [1][192/196]	Time 0.100 (0.101)	Data 0.000 (0.001)	Loss 1.4589 (1.7696)	Acc@1 48.438 (32.962)	Acc@5 89.844 (84.950)
after train
n1: 1 for:
wAcc: 34.85
test acc: 34.85
Epoche: [2/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [2][0/196]	Time 0.149 (0.149)	Data 0.209 (0.209)	Loss 1.7516 (1.7516)	Acc@1 37.109 (37.109)	Acc@5 86.719 (86.719)
Epoch: [2][64/196]	Time 0.102 (0.102)	Data 0.000 (0.003)	Loss 1.3276 (1.3905)	Acc@1 48.438 (48.654)	Acc@5 93.750 (93.035)
Epoch: [2][128/196]	Time 0.101 (0.101)	Data 0.000 (0.002)	Loss 1.1524 (1.3120)	Acc@1 62.109 (52.029)	Acc@5 96.094 (93.889)
Epoch: [2][192/196]	Time 0.099 (0.101)	Data 0.000 (0.001)	Loss 1.0190 (1.2507)	Acc@1 64.453 (54.503)	Acc@5 97.656 (94.543)
after train
n1: 2 for:
wAcc: 34.85
test acc: 50.12
Epoche: [3/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [3][0/196]	Time 0.164 (0.164)	Data 0.204 (0.204)	Loss 1.1036 (1.1036)	Acc@1 58.984 (58.984)	Acc@5 95.703 (95.703)
Epoch: [3][64/196]	Time 0.098 (0.101)	Data 0.000 (0.003)	Loss 0.8748 (1.0497)	Acc@1 68.359 (62.055)	Acc@5 98.828 (96.556)
Epoch: [3][128/196]	Time 0.100 (0.101)	Data 0.000 (0.002)	Loss 0.9352 (1.0145)	Acc@1 64.844 (63.375)	Acc@5 97.656 (96.711)
Epoch: [3][192/196]	Time 0.099 (0.101)	Data 0.000 (0.001)	Loss 0.7841 (0.9849)	Acc@1 72.656 (64.564)	Acc@5 98.047 (96.895)
after train
n1: 3 for:
wAcc: 42.485
test acc: 63.03
Epoche: [4/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [4][0/196]	Time 0.153 (0.153)	Data 0.210 (0.210)	Loss 0.9838 (0.9838)	Acc@1 64.844 (64.844)	Acc@5 97.656 (97.656)
Epoch: [4][64/196]	Time 0.104 (0.102)	Data 0.000 (0.003)	Loss 0.6949 (0.8488)	Acc@1 74.609 (70.084)	Acc@5 99.609 (97.716)
Epoch: [4][128/196]	Time 0.103 (0.103)	Data 0.000 (0.002)	Loss 0.8461 (0.8425)	Acc@1 70.312 (70.158)	Acc@5 96.875 (97.771)
Epoch: [4][192/196]	Time 0.100 (0.103)	Data 0.000 (0.001)	Loss 0.8968 (0.8270)	Acc@1 67.188 (70.733)	Acc@5 98.438 (97.873)
after train
n1: 4 for:
wAcc: 49.7868
test acc: 66.63
Epoche: [5/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [5][0/196]	Time 0.127 (0.127)	Data 0.195 (0.195)	Loss 0.7146 (0.7146)	Acc@1 74.609 (74.609)	Acc@5 97.656 (97.656)
Epoch: [5][64/196]	Time 0.108 (0.104)	Data 0.000 (0.003)	Loss 0.7426 (0.7452)	Acc@1 74.609 (73.870)	Acc@5 98.828 (98.419)
Epoch: [5][128/196]	Time 0.103 (0.103)	Data 0.000 (0.002)	Loss 0.6896 (0.7329)	Acc@1 76.562 (74.431)	Acc@5 99.219 (98.316)
Epoch: [5][192/196]	Time 0.103 (0.103)	Data 0.000 (0.001)	Loss 0.7088 (0.7172)	Acc@1 76.172 (75.018)	Acc@5 98.047 (98.383)
after train
n1: 5 for:
wAcc: 53.96777777777778
test acc: 59.37
Epoche: [6/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [6][0/196]	Time 0.147 (0.147)	Data 0.193 (0.193)	Loss 0.6803 (0.6803)	Acc@1 76.562 (76.562)	Acc@5 99.609 (99.609)
Epoch: [6][64/196]	Time 0.099 (0.101)	Data 0.000 (0.003)	Loss 0.7168 (0.6747)	Acc@1 74.219 (76.256)	Acc@5 98.828 (98.498)
Epoch: [6][128/196]	Time 0.102 (0.101)	Data 0.000 (0.002)	Loss 0.7025 (0.6626)	Acc@1 77.734 (76.862)	Acc@5 97.656 (98.562)
Epoch: [6][192/196]	Time 0.101 (0.101)	Data 0.000 (0.001)	Loss 0.6306 (0.6544)	Acc@1 77.734 (77.230)	Acc@5 98.438 (98.601)
after train
n1: 6 for:
wAcc: 54.03926280716368
test acc: 66.21
Epoche: [7/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [7][0/196]	Time 0.130 (0.130)	Data 0.211 (0.211)	Loss 0.6683 (0.6683)	Acc@1 76.172 (76.172)	Acc@5 98.828 (98.828)
Epoch: [7][64/196]	Time 0.098 (0.101)	Data 0.000 (0.003)	Loss 0.7477 (0.6120)	Acc@1 74.219 (78.600)	Acc@5 98.438 (98.852)
Epoch: [7][128/196]	Time 0.109 (0.101)	Data 0.000 (0.002)	Loss 0.6029 (0.6104)	Acc@1 78.906 (78.840)	Acc@5 100.000 (98.913)
Epoch: [7][192/196]	Time 0.105 (0.101)	Data 0.000 (0.001)	Loss 0.5913 (0.6053)	Acc@1 78.906 (79.005)	Acc@5 98.828 (98.943)
after train
n1: 7 for:
wAcc: 55.936552734375
test acc: 72.77
Epoche: [8/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [8][0/196]	Time 0.153 (0.153)	Data 0.208 (0.208)	Loss 0.6733 (0.6733)	Acc@1 73.828 (73.828)	Acc@5 97.656 (97.656)
Epoch: [8][64/196]	Time 0.104 (0.105)	Data 0.000 (0.003)	Loss 0.5309 (0.5548)	Acc@1 83.203 (80.793)	Acc@5 98.828 (99.026)
Epoch: [8][128/196]	Time 0.103 (0.104)	Data 0.000 (0.002)	Loss 0.4409 (0.5615)	Acc@1 83.984 (80.520)	Acc@5 99.609 (99.028)
Epoch: [8][192/196]	Time 0.097 (0.103)	Data 0.000 (0.001)	Loss 0.5831 (0.5659)	Acc@1 78.906 (80.341)	Acc@5 98.047 (98.976)
after train
n1: 8 for:
wAcc: 58.57348377336336
test acc: 76.31
Epoche: [9/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [9][0/196]	Time 0.130 (0.130)	Data 0.195 (0.195)	Loss 0.4478 (0.4478)	Acc@1 84.766 (84.766)	Acc@5 99.219 (99.219)
Epoch: [9][64/196]	Time 0.107 (0.103)	Data 0.000 (0.003)	Loss 0.5747 (0.5469)	Acc@1 81.250 (81.100)	Acc@5 99.609 (99.044)
Epoch: [9][128/196]	Time 0.095 (0.102)	Data 0.000 (0.002)	Loss 0.5579 (0.5401)	Acc@1 80.469 (81.214)	Acc@5 98.047 (99.067)
Epoch: [9][192/196]	Time 0.097 (0.102)	Data 0.000 (0.001)	Loss 0.5427 (0.5373)	Acc@1 82.422 (81.214)	Acc@5 98.438 (99.085)
after train
n1: 9 for:
wAcc: 60.984937856000016
test acc: 76.67
Epoche: [10/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [10][0/196]	Time 0.134 (0.134)	Data 0.230 (0.230)	Loss 0.4533 (0.4533)	Acc@1 83.594 (83.594)	Acc@5 99.609 (99.609)
Epoch: [10][64/196]	Time 0.111 (0.102)	Data 0.000 (0.004)	Loss 0.5793 (0.5140)	Acc@1 83.594 (82.230)	Acc@5 98.047 (98.996)
Epoch: [10][128/196]	Time 0.099 (0.102)	Data 0.000 (0.002)	Loss 0.5299 (0.5121)	Acc@1 82.031 (82.401)	Acc@5 98.828 (99.049)
Epoch: [10][192/196]	Time 0.104 (0.103)	Data 0.000 (0.001)	Loss 0.5095 (0.5133)	Acc@1 80.078 (82.258)	Acc@5 100.000 (99.116)
after train
n1: 10 for:
wAcc: 62.69435992712613
test acc: 78.76
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [11/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [11][0/196]	Time 0.180 (0.180)	Data 0.212 (0.212)	Loss 0.3875 (0.3875)	Acc@1 87.891 (87.891)	Acc@5 99.609 (99.609)
Epoch: [11][64/196]	Time 0.127 (0.124)	Data 0.000 (0.003)	Loss 0.5648 (0.4834)	Acc@1 79.297 (83.251)	Acc@5 98.438 (99.207)
Epoch: [11][128/196]	Time 0.121 (0.123)	Data 0.000 (0.002)	Loss 0.5253 (0.4874)	Acc@1 81.250 (83.112)	Acc@5 98.828 (99.179)
Epoch: [11][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.4264 (0.4923)	Acc@1 85.547 (82.995)	Acc@5 99.219 (99.168)
after train
n1: 11 for:
wAcc: 64.27208307434556
test acc: 80.61
Epoche: [12/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [12][0/196]	Time 0.172 (0.172)	Data 0.232 (0.232)	Loss 0.6103 (0.6103)	Acc@1 77.734 (77.734)	Acc@5 98.438 (98.438)
Epoch: [12][64/196]	Time 0.146 (0.123)	Data 0.000 (0.004)	Loss 0.5723 (0.4716)	Acc@1 79.297 (83.816)	Acc@5 99.219 (99.285)
Epoch: [12][128/196]	Time 0.126 (0.124)	Data 0.000 (0.002)	Loss 0.4978 (0.4755)	Acc@1 82.812 (83.585)	Acc@5 98.828 (99.255)
Epoch: [12][192/196]	Time 0.125 (0.123)	Data 0.000 (0.001)	Loss 0.4196 (0.4791)	Acc@1 85.156 (83.521)	Acc@5 100.000 (99.261)
after train
n1: 12 for:
wAcc: 65.72463435513129
test acc: 75.83
Epoche: [13/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [13][0/196]	Time 0.179 (0.179)	Data 0.235 (0.235)	Loss 0.4223 (0.4223)	Acc@1 84.766 (84.766)	Acc@5 99.609 (99.609)
Epoch: [13][64/196]	Time 0.121 (0.123)	Data 0.000 (0.004)	Loss 0.4535 (0.4567)	Acc@1 84.375 (84.381)	Acc@5 99.609 (99.237)
Epoch: [13][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.4758 (0.4669)	Acc@1 82.031 (83.891)	Acc@5 99.219 (99.255)
Epoch: [13][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.4314 (0.4670)	Acc@1 87.109 (83.918)	Acc@5 98.438 (99.288)
after train
n1: 13 for:
wAcc: 66.14412857248753
test acc: 78.35
Epoche: [14/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [14][0/196]	Time 0.150 (0.150)	Data 0.235 (0.235)	Loss 0.3935 (0.3935)	Acc@1 88.281 (88.281)	Acc@5 100.000 (100.000)
Epoch: [14][64/196]	Time 0.122 (0.122)	Data 0.000 (0.004)	Loss 0.3599 (0.4540)	Acc@1 87.891 (84.099)	Acc@5 98.828 (99.381)
Epoch: [14][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.5386 (0.4553)	Acc@1 82.031 (84.205)	Acc@5 97.266 (99.370)
Epoch: [14][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.3828 (0.4539)	Acc@1 85.547 (84.252)	Acc@5 99.219 (99.342)
after train
n1: 14 for:
wAcc: 66.83574531782389
test acc: 80.6
Epoche: [15/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [15][0/196]	Time 0.183 (0.183)	Data 0.232 (0.232)	Loss 0.5205 (0.5205)	Acc@1 80.859 (80.859)	Acc@5 98.828 (98.828)
Epoch: [15][64/196]	Time 0.120 (0.123)	Data 0.000 (0.004)	Loss 0.5632 (0.4348)	Acc@1 82.422 (85.144)	Acc@5 100.000 (99.459)
Epoch: [15][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.3899 (0.4354)	Acc@1 87.109 (85.068)	Acc@5 99.609 (99.403)
Epoch: [15][192/196]	Time 0.114 (0.123)	Data 0.000 (0.001)	Loss 0.4287 (0.4411)	Acc@1 85.547 (84.788)	Acc@5 99.609 (99.350)
after train
n1: 15 for:
wAcc: 67.67516019340965
test acc: 76.17
Epoche: [16/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [16][0/196]	Time 0.188 (0.188)	Data 0.193 (0.193)	Loss 0.4074 (0.4074)	Acc@1 83.594 (83.594)	Acc@5 99.609 (99.609)
Epoch: [16][64/196]	Time 0.121 (0.123)	Data 0.000 (0.003)	Loss 0.4545 (0.4345)	Acc@1 83.203 (85.096)	Acc@5 98.438 (99.417)
Epoch: [16][128/196]	Time 0.126 (0.123)	Data 0.000 (0.002)	Loss 0.3683 (0.4370)	Acc@1 86.719 (85.026)	Acc@5 100.000 (99.406)
Epoch: [16][192/196]	Time 0.127 (0.123)	Data 0.000 (0.001)	Loss 0.4459 (0.4362)	Acc@1 86.328 (85.017)	Acc@5 99.609 (99.411)
after train
n1: 16 for:
wAcc: 67.83041168134935
test acc: 76.76
Epoche: [17/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [17][0/196]	Time 0.196 (0.196)	Data 0.193 (0.193)	Loss 0.4541 (0.4541)	Acc@1 86.719 (86.719)	Acc@5 99.609 (99.609)
Epoch: [17][64/196]	Time 0.138 (0.123)	Data 0.000 (0.003)	Loss 0.4453 (0.4204)	Acc@1 85.156 (85.709)	Acc@5 99.219 (99.447)
Epoch: [17][128/196]	Time 0.122 (0.123)	Data 0.000 (0.002)	Loss 0.5404 (0.4205)	Acc@1 81.250 (85.583)	Acc@5 98.047 (99.406)
Epoch: [17][192/196]	Time 0.129 (0.122)	Data 0.000 (0.001)	Loss 0.4853 (0.4233)	Acc@1 82.031 (85.383)	Acc@5 99.609 (99.427)
after train
n1: 17 for:
wAcc: 68.04327283372672
test acc: 79.96
Epoche: [18/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [18][0/196]	Time 0.166 (0.166)	Data 0.201 (0.201)	Loss 0.4271 (0.4271)	Acc@1 84.766 (84.766)	Acc@5 99.219 (99.219)
Epoch: [18][64/196]	Time 0.121 (0.122)	Data 0.000 (0.003)	Loss 0.5364 (0.4364)	Acc@1 81.250 (85.060)	Acc@5 99.219 (99.315)
Epoch: [18][128/196]	Time 0.120 (0.123)	Data 0.000 (0.002)	Loss 0.3382 (0.4228)	Acc@1 89.844 (85.520)	Acc@5 99.609 (99.406)
Epoch: [18][192/196]	Time 0.126 (0.122)	Data 0.000 (0.001)	Loss 0.4366 (0.4188)	Acc@1 82.422 (85.687)	Acc@5 100.000 (99.403)
after train
n1: 18 for:
wAcc: 68.56954060145983
test acc: 71.47
Epoche: [19/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [19][0/196]	Time 0.170 (0.170)	Data 0.235 (0.235)	Loss 0.3339 (0.3339)	Acc@1 89.453 (89.453)	Acc@5 99.609 (99.609)
Epoch: [19][64/196]	Time 0.117 (0.123)	Data 0.000 (0.004)	Loss 0.3493 (0.4110)	Acc@1 87.891 (85.703)	Acc@5 99.219 (99.453)
Epoch: [19][128/196]	Time 0.117 (0.123)	Data 0.000 (0.002)	Loss 0.4253 (0.4144)	Acc@1 84.766 (85.753)	Acc@5 98.438 (99.464)
Epoch: [19][192/196]	Time 0.128 (0.123)	Data 0.000 (0.001)	Loss 0.4328 (0.4126)	Acc@1 86.328 (85.869)	Acc@5 99.219 (99.437)
after train
n1: 19 for:
wAcc: 68.16076981434564
test acc: 78.49
Epoche: [20/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [20][0/196]	Time 0.176 (0.176)	Data 0.197 (0.197)	Loss 0.2828 (0.2828)	Acc@1 92.188 (92.188)	Acc@5 99.609 (99.609)
Epoch: [20][64/196]	Time 0.121 (0.122)	Data 0.000 (0.003)	Loss 0.4376 (0.4116)	Acc@1 85.156 (85.799)	Acc@5 99.609 (99.465)
Epoch: [20][128/196]	Time 0.115 (0.123)	Data 0.000 (0.002)	Loss 0.3333 (0.4070)	Acc@1 87.891 (85.959)	Acc@5 98.828 (99.458)
Epoch: [20][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.3990 (0.4040)	Acc@1 85.547 (86.099)	Acc@5 98.438 (99.468)
after train
n1: 20 for:
wAcc: 68.51164248507813
test acc: 77.92
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [21/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [21][0/196]	Time 0.174 (0.174)	Data 0.212 (0.212)	Loss 0.4447 (0.4447)	Acc@1 84.766 (84.766)	Acc@5 99.219 (99.219)
Epoch: [21][64/196]	Time 0.118 (0.122)	Data 0.000 (0.003)	Loss 0.3415 (0.3667)	Acc@1 89.453 (87.260)	Acc@5 100.000 (99.561)
Epoch: [21][128/196]	Time 0.117 (0.120)	Data 0.000 (0.002)	Loss 0.4294 (0.3891)	Acc@1 82.031 (86.519)	Acc@5 100.000 (99.479)
Epoch: [21][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.3967 (0.3986)	Acc@1 85.938 (86.209)	Acc@5 98.438 (99.458)
after train
n1: 21 for:
wAcc: 68.75900844952136
test acc: 81.93
Epoche: [22/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [22][0/196]	Time 0.171 (0.171)	Data 0.197 (0.197)	Loss 0.3917 (0.3917)	Acc@1 86.719 (86.719)	Acc@5 100.000 (100.000)
Epoch: [22][64/196]	Time 0.120 (0.122)	Data 0.000 (0.003)	Loss 0.5618 (0.3897)	Acc@1 82.031 (86.502)	Acc@5 98.438 (99.489)
Epoch: [22][128/196]	Time 0.115 (0.122)	Data 0.000 (0.002)	Loss 0.3279 (0.3858)	Acc@1 89.453 (86.716)	Acc@5 99.219 (99.516)
Epoch: [22][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.4366 (0.3936)	Acc@1 84.766 (86.474)	Acc@5 99.219 (99.508)
after train
n1: 22 for:
wAcc: 69.32280460830393
test acc: 76.95
Epoche: [23/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [23][0/196]	Time 0.175 (0.175)	Data 0.225 (0.225)	Loss 0.4095 (0.4095)	Acc@1 85.938 (85.938)	Acc@5 98.438 (98.438)
Epoch: [23][64/196]	Time 0.115 (0.123)	Data 0.000 (0.004)	Loss 0.4150 (0.3917)	Acc@1 85.156 (86.599)	Acc@5 99.609 (99.441)
Epoch: [23][128/196]	Time 0.119 (0.123)	Data 0.000 (0.002)	Loss 0.3640 (0.3900)	Acc@1 87.891 (86.713)	Acc@5 98.828 (99.494)
Epoch: [23][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.4526 (0.3940)	Acc@1 82.422 (86.435)	Acc@5 100.000 (99.520)
after train
n1: 23 for:
wAcc: 69.38838730388245
test acc: 75.99
Epoche: [24/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [24][0/196]	Time 0.151 (0.151)	Data 0.207 (0.207)	Loss 0.3236 (0.3236)	Acc@1 89.062 (89.062)	Acc@5 100.000 (100.000)
Epoch: [24][64/196]	Time 0.124 (0.122)	Data 0.000 (0.003)	Loss 0.2930 (0.3847)	Acc@1 88.672 (86.526)	Acc@5 99.609 (99.531)
Epoch: [24][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.3037 (0.3871)	Acc@1 91.016 (86.407)	Acc@5 99.609 (99.543)
Epoch: [24][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.4326 (0.3878)	Acc@1 84.766 (86.539)	Acc@5 99.609 (99.524)
after train
n1: 24 for:
wAcc: 69.37569091465889
test acc: 80.29
Epoche: [25/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [25][0/196]	Time 0.178 (0.178)	Data 0.211 (0.211)	Loss 0.2843 (0.2843)	Acc@1 91.797 (91.797)	Acc@5 99.609 (99.609)
Epoch: [25][64/196]	Time 0.120 (0.122)	Data 0.000 (0.003)	Loss 0.4391 (0.3643)	Acc@1 83.594 (87.410)	Acc@5 99.219 (99.579)
Epoch: [25][128/196]	Time 0.124 (0.121)	Data 0.000 (0.002)	Loss 0.3333 (0.3680)	Acc@1 88.281 (87.312)	Acc@5 99.219 (99.549)
Epoch: [25][192/196]	Time 0.116 (0.121)	Data 0.000 (0.001)	Loss 0.4906 (0.3720)	Acc@1 82.812 (87.160)	Acc@5 98.438 (99.539)
after train
n1: 25 for:
wAcc: 69.70314905482338
test acc: 82.13
Epoche: [26/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [26][0/196]	Time 0.170 (0.170)	Data 0.229 (0.229)	Loss 0.3743 (0.3743)	Acc@1 86.719 (86.719)	Acc@5 99.609 (99.609)
Epoch: [26][64/196]	Time 0.124 (0.122)	Data 0.000 (0.004)	Loss 0.3309 (0.3626)	Acc@1 90.625 (87.302)	Acc@5 100.000 (99.633)
Epoch: [26][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.5219 (0.3718)	Acc@1 82.422 (87.058)	Acc@5 99.219 (99.564)
Epoch: [26][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.4417 (0.3778)	Acc@1 85.547 (86.943)	Acc@5 99.219 (99.530)
after train
n1: 26 for:
wAcc: 70.1255227798041
test acc: 77.38
Epoche: [27/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [27][0/196]	Time 0.179 (0.179)	Data 0.197 (0.197)	Loss 0.4759 (0.4759)	Acc@1 83.984 (83.984)	Acc@5 99.219 (99.219)
Epoch: [27][64/196]	Time 0.125 (0.122)	Data 0.000 (0.003)	Loss 0.4509 (0.3787)	Acc@1 86.719 (87.031)	Acc@5 98.828 (99.507)
Epoch: [27][128/196]	Time 0.126 (0.122)	Data 0.000 (0.002)	Loss 0.2546 (0.3731)	Acc@1 89.453 (87.206)	Acc@5 100.000 (99.528)
Epoch: [27][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.3602 (0.3772)	Acc@1 87.891 (87.061)	Acc@5 99.219 (99.524)
after train
n1: 27 for:
wAcc: 70.15534712599772
test acc: 82.54
Epoche: [28/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [28][0/196]	Time 0.149 (0.149)	Data 0.229 (0.229)	Loss 0.3416 (0.3416)	Acc@1 89.453 (89.453)	Acc@5 100.000 (100.000)
Epoch: [28][64/196]	Time 0.126 (0.122)	Data 0.000 (0.004)	Loss 0.4071 (0.3632)	Acc@1 85.547 (87.794)	Acc@5 99.219 (99.603)
Epoch: [28][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.4478 (0.3678)	Acc@1 85.938 (87.452)	Acc@5 99.219 (99.603)
Epoch: [28][192/196]	Time 0.128 (0.121)	Data 0.000 (0.001)	Loss 0.4710 (0.3709)	Acc@1 82.422 (87.358)	Acc@5 99.219 (99.595)
after train
n1: 28 for:
wAcc: 70.54295222420929
test acc: 76.66
Epoche: [29/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [29][0/196]	Time 0.158 (0.158)	Data 0.232 (0.232)	Loss 0.3412 (0.3412)	Acc@1 87.500 (87.500)	Acc@5 99.219 (99.219)
Epoch: [29][64/196]	Time 0.127 (0.121)	Data 0.000 (0.004)	Loss 0.3165 (0.3582)	Acc@1 88.672 (87.482)	Acc@5 99.609 (99.537)
Epoch: [29][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.4416 (0.3631)	Acc@1 86.328 (87.397)	Acc@5 99.219 (99.540)
Epoch: [29][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.3102 (0.3635)	Acc@1 90.234 (87.468)	Acc@5 99.609 (99.547)
after train
n1: 29 for:
wAcc: 70.49286814829108
test acc: 82.66
Epoche: [30/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [30][0/196]	Time 0.171 (0.171)	Data 0.238 (0.238)	Loss 0.3551 (0.3551)	Acc@1 87.109 (87.109)	Acc@5 100.000 (100.000)
Epoch: [30][64/196]	Time 0.126 (0.122)	Data 0.000 (0.004)	Loss 0.4077 (0.3589)	Acc@1 87.109 (87.722)	Acc@5 99.609 (99.567)
Epoch: [30][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.3250 (0.3585)	Acc@1 89.062 (87.579)	Acc@5 98.828 (99.564)
Epoch: [30][192/196]	Time 0.116 (0.122)	Data 0.000 (0.001)	Loss 0.2971 (0.3596)	Acc@1 89.453 (87.579)	Acc@5 99.609 (99.563)
after train
n1: 30 for:
wAcc: 70.84134329744533
test acc: 75.49
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [31/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [31][0/196]	Time 0.168 (0.168)	Data 0.227 (0.227)	Loss 0.4140 (0.4140)	Acc@1 86.719 (86.719)	Acc@5 98.828 (98.828)
Epoch: [31][64/196]	Time 0.117 (0.123)	Data 0.000 (0.004)	Loss 0.3067 (0.3302)	Acc@1 88.672 (88.558)	Acc@5 99.609 (99.694)
Epoch: [31][128/196]	Time 0.139 (0.121)	Data 0.000 (0.002)	Loss 0.3006 (0.3444)	Acc@1 89.062 (88.199)	Acc@5 100.000 (99.655)
Epoch: [31][192/196]	Time 0.125 (0.121)	Data 0.000 (0.001)	Loss 0.3073 (0.3545)	Acc@1 89.062 (87.872)	Acc@5 100.000 (99.601)
after train
n1: 30 for:
wAcc: 73.34871161219341
test acc: 83.52
Epoche: [32/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [32][0/196]	Time 0.149 (0.149)	Data 0.223 (0.223)	Loss 0.3359 (0.3359)	Acc@1 90.625 (90.625)	Acc@5 99.609 (99.609)
Epoch: [32][64/196]	Time 0.123 (0.122)	Data 0.000 (0.004)	Loss 0.3063 (0.3537)	Acc@1 87.891 (87.825)	Acc@5 100.000 (99.597)
Epoch: [32][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.3012 (0.3551)	Acc@1 88.672 (87.824)	Acc@5 100.000 (99.579)
Epoch: [32][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.3164 (0.3590)	Acc@1 89.453 (87.737)	Acc@5 100.000 (99.595)
after train
n1: 30 for:
wAcc: 75.87121347025158
test acc: 75.17
Epoche: [33/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [33][0/196]	Time 0.180 (0.180)	Data 0.199 (0.199)	Loss 0.3069 (0.3069)	Acc@1 91.406 (91.406)	Acc@5 100.000 (100.000)
Epoch: [33][64/196]	Time 0.122 (0.123)	Data 0.000 (0.003)	Loss 0.3621 (0.3435)	Acc@1 86.719 (88.401)	Acc@5 100.000 (99.531)
Epoch: [33][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.4287 (0.3541)	Acc@1 85.938 (87.891)	Acc@5 99.609 (99.516)
Epoch: [33][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.3024 (0.3550)	Acc@1 90.234 (87.812)	Acc@5 99.609 (99.532)
after train
n1: 30 for:
wAcc: 76.34639549760017
test acc: 80.42
Epoche: [34/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [34][0/196]	Time 0.166 (0.166)	Data 0.221 (0.221)	Loss 0.3096 (0.3096)	Acc@1 87.891 (87.891)	Acc@5 99.609 (99.609)
Epoch: [34][64/196]	Time 0.130 (0.124)	Data 0.000 (0.004)	Loss 0.3296 (0.3481)	Acc@1 89.062 (87.819)	Acc@5 100.000 (99.669)
Epoch: [34][128/196]	Time 0.128 (0.123)	Data 0.000 (0.002)	Loss 0.3045 (0.3465)	Acc@1 87.500 (88.006)	Acc@5 99.219 (99.609)
Epoch: [34][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.3730 (0.3440)	Acc@1 85.938 (88.093)	Acc@5 100.000 (99.615)
after train
n1: 30 for:
wAcc: 75.55969178571978
test acc: 79.99
Epoche: [35/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [35][0/196]	Time 0.152 (0.152)	Data 0.226 (0.226)	Loss 0.3073 (0.3073)	Acc@1 91.797 (91.797)	Acc@5 99.609 (99.609)
Epoch: [35][64/196]	Time 0.120 (0.123)	Data 0.000 (0.004)	Loss 0.4027 (0.3404)	Acc@1 84.375 (88.359)	Acc@5 99.219 (99.585)
Epoch: [35][128/196]	Time 0.128 (0.122)	Data 0.000 (0.002)	Loss 0.2843 (0.3422)	Acc@1 90.625 (88.342)	Acc@5 99.609 (99.600)
Epoch: [35][192/196]	Time 0.116 (0.121)	Data 0.000 (0.001)	Loss 0.3022 (0.3474)	Acc@1 91.797 (88.162)	Acc@5 100.000 (99.567)
after train
n1: 30 for:
wAcc: 76.83431917366654
test acc: 82.07
Epoche: [36/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [36][0/196]	Time 0.181 (0.181)	Data 0.234 (0.234)	Loss 0.2595 (0.2595)	Acc@1 92.188 (92.188)	Acc@5 100.000 (100.000)
Epoch: [36][64/196]	Time 0.118 (0.124)	Data 0.000 (0.004)	Loss 0.3705 (0.3357)	Acc@1 85.156 (88.317)	Acc@5 99.609 (99.669)
Epoch: [36][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.3764 (0.3478)	Acc@1 87.109 (87.988)	Acc@5 99.609 (99.588)
Epoch: [36][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.3630 (0.3501)	Acc@1 87.109 (87.937)	Acc@5 99.219 (99.605)
after train
n1: 30 for:
wAcc: 78.12042884894353
test acc: 80.71
Epoche: [37/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [37][0/196]	Time 0.169 (0.169)	Data 0.228 (0.228)	Loss 0.3615 (0.3615)	Acc@1 86.328 (86.328)	Acc@5 99.609 (99.609)
Epoch: [37][64/196]	Time 0.123 (0.123)	Data 0.000 (0.004)	Loss 0.3208 (0.3370)	Acc@1 88.672 (88.498)	Acc@5 99.609 (99.621)
Epoch: [37][128/196]	Time 0.113 (0.122)	Data 0.000 (0.002)	Loss 0.3905 (0.3442)	Acc@1 88.672 (88.199)	Acc@5 98.438 (99.591)
Epoch: [37][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.4243 (0.3481)	Acc@1 84.375 (88.046)	Acc@5 98.047 (99.565)
after train
n1: 30 for:
wAcc: 78.79924586810327
test acc: 81.62
Epoche: [38/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [38][0/196]	Time 0.165 (0.165)	Data 0.196 (0.196)	Loss 0.2893 (0.2893)	Acc@1 90.625 (90.625)	Acc@5 99.609 (99.609)
Epoch: [38][64/196]	Time 0.120 (0.124)	Data 0.000 (0.003)	Loss 0.3860 (0.3376)	Acc@1 86.719 (88.401)	Acc@5 99.219 (99.585)
Epoch: [38][128/196]	Time 0.126 (0.123)	Data 0.000 (0.002)	Loss 0.3675 (0.3367)	Acc@1 88.281 (88.342)	Acc@5 99.609 (99.628)
Epoch: [38][192/196]	Time 0.126 (0.123)	Data 0.000 (0.001)	Loss 0.3469 (0.3399)	Acc@1 88.672 (88.320)	Acc@5 100.000 (99.611)
after train
n1: 30 for:
wAcc: 79.03327216625246
test acc: 84.01
Epoche: [39/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [39][0/196]	Time 0.173 (0.173)	Data 0.220 (0.220)	Loss 0.3458 (0.3458)	Acc@1 87.500 (87.500)	Acc@5 99.219 (99.219)
Epoch: [39][64/196]	Time 0.127 (0.121)	Data 0.000 (0.004)	Loss 0.3768 (0.3411)	Acc@1 85.938 (88.305)	Acc@5 99.219 (99.639)
Epoch: [39][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.2669 (0.3378)	Acc@1 89.844 (88.248)	Acc@5 100.000 (99.649)
Epoch: [39][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.3891 (0.3406)	Acc@1 84.375 (88.287)	Acc@5 100.000 (99.622)
after train
n1: 30 for:
wAcc: 79.65648503597065
test acc: 75.46
Epoche: [40/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [40][0/196]	Time 0.189 (0.189)	Data 0.209 (0.209)	Loss 0.4126 (0.4126)	Acc@1 85.547 (85.547)	Acc@5 99.609 (99.609)
Epoch: [40][64/196]	Time 0.138 (0.122)	Data 0.000 (0.003)	Loss 0.2895 (0.3201)	Acc@1 89.062 (88.828)	Acc@5 100.000 (99.730)
Epoch: [40][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.4699 (0.3290)	Acc@1 84.375 (88.629)	Acc@5 100.000 (99.682)
Epoch: [40][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.3320 (0.3361)	Acc@1 88.672 (88.431)	Acc@5 99.609 (99.650)
after train
n1: 30 for:
wAcc: 79.65318294680743
test acc: 78.33
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [41/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [41][0/196]	Time 0.173 (0.173)	Data 0.224 (0.224)	Loss 0.3772 (0.3772)	Acc@1 87.500 (87.500)	Acc@5 100.000 (100.000)
Epoch: [41][64/196]	Time 0.117 (0.124)	Data 0.000 (0.004)	Loss 0.3633 (0.3173)	Acc@1 88.672 (89.291)	Acc@5 99.609 (99.657)
Epoch: [41][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.3934 (0.3280)	Acc@1 85.156 (88.829)	Acc@5 100.000 (99.634)
Epoch: [41][192/196]	Time 0.122 (0.121)	Data 0.000 (0.001)	Loss 0.4103 (0.3358)	Acc@1 87.109 (88.526)	Acc@5 100.000 (99.617)
after train
n1: 30 for:
wAcc: 78.87681206145675
test acc: 84.94
Epoche: [42/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [42][0/196]	Time 0.171 (0.171)	Data 0.231 (0.231)	Loss 0.2873 (0.2873)	Acc@1 88.672 (88.672)	Acc@5 98.828 (98.828)
Epoch: [42][64/196]	Time 0.120 (0.122)	Data 0.000 (0.004)	Loss 0.2869 (0.3209)	Acc@1 90.625 (88.876)	Acc@5 99.609 (99.736)
Epoch: [42][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.4209 (0.3317)	Acc@1 85.547 (88.608)	Acc@5 99.219 (99.625)
Epoch: [42][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.3898 (0.3319)	Acc@1 85.156 (88.559)	Acc@5 98.828 (99.630)
after train
n1: 30 for:
wAcc: 79.63228060109881
test acc: 82.12
Epoche: [43/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [43][0/196]	Time 0.175 (0.175)	Data 0.195 (0.195)	Loss 0.2245 (0.2245)	Acc@1 93.750 (93.750)	Acc@5 100.000 (100.000)
Epoch: [43][64/196]	Time 0.120 (0.123)	Data 0.000 (0.003)	Loss 0.3527 (0.3348)	Acc@1 88.281 (88.618)	Acc@5 100.000 (99.688)
Epoch: [43][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.3180 (0.3344)	Acc@1 89.844 (88.660)	Acc@5 100.000 (99.676)
Epoch: [43][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.3424 (0.3387)	Acc@1 87.109 (88.441)	Acc@5 100.000 (99.650)
after train
n1: 30 for:
wAcc: 80.11804213063094
test acc: 75.26
Epoche: [44/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [44][0/196]	Time 0.179 (0.179)	Data 0.194 (0.194)	Loss 0.3892 (0.3892)	Acc@1 87.109 (87.109)	Acc@5 99.609 (99.609)
Epoch: [44][64/196]	Time 0.128 (0.122)	Data 0.000 (0.003)	Loss 0.2952 (0.3395)	Acc@1 90.625 (88.101)	Acc@5 100.000 (99.585)
Epoch: [44][128/196]	Time 0.126 (0.122)	Data 0.000 (0.002)	Loss 0.3147 (0.3346)	Acc@1 89.062 (88.418)	Acc@5 99.609 (99.621)
Epoch: [44][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.3744 (0.3348)	Acc@1 87.500 (88.427)	Acc@5 99.609 (99.636)
after train
n1: 30 for:
wAcc: 79.16421235910089
test acc: 79.86
Epoche: [45/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [45][0/196]	Time 0.161 (0.161)	Data 0.218 (0.218)	Loss 0.3624 (0.3624)	Acc@1 87.500 (87.500)	Acc@5 99.609 (99.609)
Epoch: [45][64/196]	Time 0.120 (0.123)	Data 0.000 (0.004)	Loss 0.3155 (0.3237)	Acc@1 86.328 (88.696)	Acc@5 100.000 (99.712)
Epoch: [45][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.3047 (0.3279)	Acc@1 90.234 (88.690)	Acc@5 99.609 (99.685)
Epoch: [45][192/196]	Time 0.126 (0.122)	Data 0.000 (0.001)	Loss 0.3052 (0.3313)	Acc@1 88.281 (88.583)	Acc@5 99.219 (99.670)
after train
n1: 30 for:
wAcc: 79.2943932030935
test acc: 84.06
Epoche: [46/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [46][0/196]	Time 0.169 (0.169)	Data 0.224 (0.224)	Loss 0.3867 (0.3867)	Acc@1 86.328 (86.328)	Acc@5 100.000 (100.000)
Epoch: [46][64/196]	Time 0.119 (0.124)	Data 0.000 (0.004)	Loss 0.2632 (0.3075)	Acc@1 91.797 (89.465)	Acc@5 100.000 (99.694)
Epoch: [46][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.3144 (0.3218)	Acc@1 89.062 (88.972)	Acc@5 99.219 (99.661)
Epoch: [46][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.2812 (0.3267)	Acc@1 90.625 (88.779)	Acc@5 99.609 (99.652)
after train
n1: 30 for:
wAcc: 80.0644486892971
test acc: 83.28
Epoche: [47/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [47][0/196]	Time 0.145 (0.145)	Data 0.229 (0.229)	Loss 0.3162 (0.3162)	Acc@1 89.453 (89.453)	Acc@5 99.609 (99.609)
Epoch: [47][64/196]	Time 0.121 (0.124)	Data 0.000 (0.004)	Loss 0.2995 (0.3161)	Acc@1 90.625 (89.056)	Acc@5 99.609 (99.700)
Epoch: [47][128/196]	Time 0.123 (0.123)	Data 0.000 (0.002)	Loss 0.3334 (0.3243)	Acc@1 89.453 (88.799)	Acc@5 99.609 (99.658)
Epoch: [47][192/196]	Time 0.121 (0.123)	Data 0.000 (0.001)	Loss 0.4318 (0.3247)	Acc@1 83.594 (88.759)	Acc@5 99.219 (99.676)
after train
n1: 30 for:
wAcc: 79.04457599157584
test acc: 79.26
Epoche: [48/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [48][0/196]	Time 0.188 (0.188)	Data 0.237 (0.237)	Loss 0.3097 (0.3097)	Acc@1 87.891 (87.891)	Acc@5 99.609 (99.609)
Epoch: [48][64/196]	Time 0.123 (0.124)	Data 0.000 (0.004)	Loss 0.3564 (0.3320)	Acc@1 86.719 (88.510)	Acc@5 100.000 (99.675)
Epoch: [48][128/196]	Time 0.123 (0.123)	Data 0.000 (0.002)	Loss 0.3167 (0.3268)	Acc@1 87.109 (88.732)	Acc@5 100.000 (99.679)
Epoch: [48][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.2524 (0.3263)	Acc@1 92.188 (88.773)	Acc@5 100.000 (99.672)
after train
n1: 30 for:
wAcc: 80.07329644654529
test acc: 74.08
Epoche: [49/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [49][0/196]	Time 0.175 (0.175)	Data 0.192 (0.192)	Loss 0.2960 (0.2960)	Acc@1 89.844 (89.844)	Acc@5 99.609 (99.609)
Epoch: [49][64/196]	Time 0.129 (0.125)	Data 0.000 (0.003)	Loss 0.3140 (0.3373)	Acc@1 87.109 (88.311)	Acc@5 100.000 (99.597)
Epoch: [49][128/196]	Time 0.127 (0.123)	Data 0.000 (0.002)	Loss 0.4052 (0.3295)	Acc@1 85.547 (88.578)	Acc@5 99.609 (99.658)
Epoch: [49][192/196]	Time 0.123 (0.122)	Data 0.000 (0.001)	Loss 0.2962 (0.3296)	Acc@1 89.844 (88.603)	Acc@5 99.609 (99.654)
after train
n1: 30 for:
wAcc: 79.60423207204296
test acc: 76.74
Epoche: [50/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [50][0/196]	Time 0.178 (0.178)	Data 0.198 (0.198)	Loss 0.3736 (0.3736)	Acc@1 86.328 (86.328)	Acc@5 99.609 (99.609)
Epoch: [50][64/196]	Time 0.115 (0.124)	Data 0.000 (0.003)	Loss 0.3904 (0.3286)	Acc@1 89.453 (88.774)	Acc@5 99.219 (99.615)
Epoch: [50][128/196]	Time 0.121 (0.123)	Data 0.000 (0.002)	Loss 0.4077 (0.3265)	Acc@1 85.547 (88.932)	Acc@5 100.000 (99.612)
Epoch: [50][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.3020 (0.3268)	Acc@1 89.062 (88.880)	Acc@5 99.609 (99.613)
after train
n1: 30 for:
wAcc: 79.9991347506488
test acc: 80.04
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [51/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [51][0/196]	Time 0.177 (0.177)	Data 0.230 (0.230)	Loss 0.2425 (0.2425)	Acc@1 92.578 (92.578)	Acc@5 99.609 (99.609)
Epoch: [51][64/196]	Time 0.122 (0.122)	Data 0.000 (0.004)	Loss 0.2607 (0.2819)	Acc@1 91.016 (90.397)	Acc@5 100.000 (99.675)
Epoch: [51][128/196]	Time 0.115 (0.122)	Data 0.000 (0.002)	Loss 0.3105 (0.2978)	Acc@1 89.453 (89.786)	Acc@5 99.219 (99.670)
Epoch: [51][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.3177 (0.3077)	Acc@1 86.719 (89.433)	Acc@5 100.000 (99.668)
after train
n1: 30 for:
wAcc: 79.28185466327915
test acc: 81.05
Epoche: [52/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [52][0/196]	Time 0.180 (0.180)	Data 0.223 (0.223)	Loss 0.2754 (0.2754)	Acc@1 91.797 (91.797)	Acc@5 100.000 (100.000)
Epoch: [52][64/196]	Time 0.120 (0.123)	Data 0.000 (0.004)	Loss 0.2931 (0.3022)	Acc@1 90.625 (89.724)	Acc@5 100.000 (99.700)
Epoch: [52][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.3438 (0.3138)	Acc@1 88.281 (89.350)	Acc@5 99.219 (99.640)
Epoch: [52][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.3038 (0.3243)	Acc@1 88.672 (88.862)	Acc@5 100.000 (99.638)
after train
n1: 30 for:
wAcc: 79.25714946101763
test acc: 78.26
Epoche: [53/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [53][0/196]	Time 0.152 (0.152)	Data 0.230 (0.230)	Loss 0.3416 (0.3416)	Acc@1 89.453 (89.453)	Acc@5 99.609 (99.609)
Epoch: [53][64/196]	Time 0.122 (0.122)	Data 0.000 (0.004)	Loss 0.3465 (0.3249)	Acc@1 88.672 (88.726)	Acc@5 99.219 (99.645)
Epoch: [53][128/196]	Time 0.127 (0.122)	Data 0.000 (0.002)	Loss 0.3317 (0.3248)	Acc@1 89.844 (88.838)	Acc@5 99.609 (99.631)
Epoch: [53][192/196]	Time 0.115 (0.122)	Data 0.000 (0.001)	Loss 0.3840 (0.3249)	Acc@1 86.719 (88.783)	Acc@5 100.000 (99.672)
after train
n1: 30 for:
wAcc: 79.81443193387072
test acc: 80.53
Epoche: [54/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [54][0/196]	Time 0.186 (0.186)	Data 0.213 (0.213)	Loss 0.3021 (0.3021)	Acc@1 88.281 (88.281)	Acc@5 100.000 (100.000)
Epoch: [54][64/196]	Time 0.119 (0.122)	Data 0.000 (0.003)	Loss 0.3558 (0.3136)	Acc@1 90.625 (88.942)	Acc@5 100.000 (99.706)
Epoch: [54][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.3087 (0.3187)	Acc@1 90.625 (88.981)	Acc@5 100.000 (99.664)
Epoch: [54][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.3470 (0.3240)	Acc@1 89.062 (88.856)	Acc@5 100.000 (99.646)
after train
n1: 30 for:
wAcc: 80.12659088088344
test acc: 83.86
Epoche: [55/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [55][0/196]	Time 0.179 (0.179)	Data 0.236 (0.236)	Loss 0.2941 (0.2941)	Acc@1 89.844 (89.844)	Acc@5 99.609 (99.609)
Epoch: [55][64/196]	Time 0.118 (0.124)	Data 0.000 (0.004)	Loss 0.2422 (0.2984)	Acc@1 91.797 (89.766)	Acc@5 100.000 (99.724)
Epoch: [55][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.4270 (0.3079)	Acc@1 85.547 (89.402)	Acc@5 99.609 (99.712)
Epoch: [55][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.4134 (0.3141)	Acc@1 87.109 (89.206)	Acc@5 99.609 (99.686)
after train
n1: 30 for:
wAcc: 79.6807885884387
test acc: 82.07
Epoche: [56/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [56][0/196]	Time 0.167 (0.167)	Data 0.206 (0.206)	Loss 0.2296 (0.2296)	Acc@1 92.578 (92.578)	Acc@5 99.609 (99.609)
Epoch: [56][64/196]	Time 0.115 (0.122)	Data 0.000 (0.003)	Loss 0.3800 (0.3175)	Acc@1 87.500 (89.044)	Acc@5 100.000 (99.681)
Epoch: [56][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.4298 (0.3103)	Acc@1 86.719 (89.220)	Acc@5 98.828 (99.688)
Epoch: [56][192/196]	Time 0.123 (0.122)	Data 0.000 (0.001)	Loss 0.3137 (0.3142)	Acc@1 89.453 (89.093)	Acc@5 99.609 (99.672)
after train
n1: 30 for:
wAcc: 80.58086889552582
test acc: 82.4
Epoche: [57/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [57][0/196]	Time 0.177 (0.177)	Data 0.224 (0.224)	Loss 0.3447 (0.3447)	Acc@1 86.719 (86.719)	Acc@5 99.609 (99.609)
Epoch: [57][64/196]	Time 0.123 (0.123)	Data 0.000 (0.004)	Loss 0.2587 (0.3077)	Acc@1 91.406 (89.441)	Acc@5 100.000 (99.633)
Epoch: [57][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.3715 (0.3204)	Acc@1 89.062 (88.960)	Acc@5 98.828 (99.658)
Epoch: [57][192/196]	Time 0.125 (0.122)	Data 0.000 (0.001)	Loss 0.3096 (0.3217)	Acc@1 89.062 (88.947)	Acc@5 99.609 (99.650)
after train
n1: 30 for:
wAcc: 79.84821023600031
test acc: 79.04
Epoche: [58/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [58][0/196]	Time 0.178 (0.178)	Data 0.224 (0.224)	Loss 0.3554 (0.3554)	Acc@1 88.672 (88.672)	Acc@5 100.000 (100.000)
Epoch: [58][64/196]	Time 0.123 (0.122)	Data 0.000 (0.004)	Loss 0.2522 (0.3129)	Acc@1 89.453 (89.177)	Acc@5 100.000 (99.742)
Epoch: [58][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.3347 (0.3168)	Acc@1 87.500 (89.123)	Acc@5 100.000 (99.703)
Epoch: [58][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.3400 (0.3172)	Acc@1 87.500 (89.020)	Acc@5 100.000 (99.707)
after train
n1: 30 for:
wAcc: 80.66343698358685
test acc: 84.29
Epoche: [59/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [59][0/196]	Time 0.189 (0.189)	Data 0.195 (0.195)	Loss 0.3058 (0.3058)	Acc@1 89.453 (89.453)	Acc@5 99.609 (99.609)
Epoch: [59][64/196]	Time 0.117 (0.123)	Data 0.000 (0.003)	Loss 0.3993 (0.3215)	Acc@1 86.328 (88.906)	Acc@5 99.219 (99.633)
Epoch: [59][128/196]	Time 0.121 (0.123)	Data 0.000 (0.002)	Loss 0.3371 (0.3126)	Acc@1 87.891 (89.172)	Acc@5 100.000 (99.658)
Epoch: [59][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.2443 (0.3140)	Acc@1 90.234 (89.152)	Acc@5 100.000 (99.646)
after train
n1: 30 for:
wAcc: 79.86090242566564
test acc: 83.49
Epoche: [60/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [60][0/196]	Time 0.167 (0.167)	Data 0.227 (0.227)	Loss 0.2225 (0.2225)	Acc@1 92.578 (92.578)	Acc@5 100.000 (100.000)
Epoch: [60][64/196]	Time 0.122 (0.123)	Data 0.000 (0.004)	Loss 0.2440 (0.2974)	Acc@1 92.188 (89.850)	Acc@5 99.609 (99.724)
Epoch: [60][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.3118 (0.3107)	Acc@1 88.281 (89.335)	Acc@5 99.609 (99.694)
Epoch: [60][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.3081 (0.3098)	Acc@1 88.672 (89.388)	Acc@5 99.609 (99.684)
after train
n1: 30 for:
wAcc: 81.25586705770269
test acc: 80.18
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [61/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [61][0/196]	Time 0.175 (0.175)	Data 0.218 (0.218)	Loss 0.2869 (0.2869)	Acc@1 91.016 (91.016)	Acc@5 99.219 (99.219)
Epoch: [61][64/196]	Time 0.126 (0.121)	Data 0.000 (0.004)	Loss 0.2083 (0.2874)	Acc@1 91.797 (90.228)	Acc@5 100.000 (99.694)
Epoch: [61][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.3683 (0.3052)	Acc@1 88.672 (89.532)	Acc@5 99.609 (99.679)
Epoch: [61][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.3309 (0.3092)	Acc@1 89.844 (89.461)	Acc@5 99.219 (99.676)
after train
n1: 30 for:
wAcc: 79.979367276808
test acc: 76.01
Epoche: [62/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [62][0/196]	Time 0.163 (0.163)	Data 0.197 (0.197)	Loss 0.2827 (0.2827)	Acc@1 89.453 (89.453)	Acc@5 99.609 (99.609)
Epoch: [62][64/196]	Time 0.114 (0.122)	Data 0.000 (0.003)	Loss 0.2880 (0.3099)	Acc@1 90.234 (89.609)	Acc@5 100.000 (99.694)
Epoch: [62][128/196]	Time 0.116 (0.121)	Data 0.000 (0.002)	Loss 0.3400 (0.3063)	Acc@1 87.109 (89.614)	Acc@5 100.000 (99.697)
Epoch: [62][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.2482 (0.3103)	Acc@1 90.625 (89.443)	Acc@5 100.000 (99.696)
after train
n1: 30 for:
wAcc: 80.48222724092639
test acc: 81.05
Epoche: [63/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [63][0/196]	Time 0.166 (0.166)	Data 0.224 (0.224)	Loss 0.3267 (0.3267)	Acc@1 86.328 (86.328)	Acc@5 100.000 (100.000)
Epoch: [63][64/196]	Time 0.133 (0.122)	Data 0.000 (0.004)	Loss 0.4326 (0.3008)	Acc@1 84.766 (89.525)	Acc@5 100.000 (99.700)
Epoch: [63][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.3485 (0.2995)	Acc@1 88.281 (89.692)	Acc@5 99.609 (99.694)
Epoch: [63][192/196]	Time 0.131 (0.122)	Data 0.000 (0.001)	Loss 0.3025 (0.3075)	Acc@1 88.281 (89.368)	Acc@5 100.000 (99.674)
after train
n1: 30 for:
wAcc: 80.45669627189733
test acc: 81.13
Epoche: [64/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [64][0/196]	Time 0.150 (0.150)	Data 0.263 (0.263)	Loss 0.2679 (0.2679)	Acc@1 91.016 (91.016)	Acc@5 99.609 (99.609)
Epoch: [64][64/196]	Time 0.114 (0.122)	Data 0.000 (0.004)	Loss 0.2931 (0.3091)	Acc@1 90.234 (89.339)	Acc@5 99.219 (99.675)
Epoch: [64][128/196]	Time 0.115 (0.122)	Data 0.000 (0.002)	Loss 0.3317 (0.3064)	Acc@1 90.234 (89.468)	Acc@5 99.609 (99.664)
Epoch: [64][192/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.2849 (0.3126)	Acc@1 88.672 (89.336)	Acc@5 99.609 (99.630)
after train
n1: 30 for:
wAcc: 80.80082326116278
test acc: 80.89
Epoche: [65/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [65][0/196]	Time 0.174 (0.174)	Data 0.197 (0.197)	Loss 0.3770 (0.3770)	Acc@1 85.547 (85.547)	Acc@5 100.000 (100.000)
Epoch: [65][64/196]	Time 0.118 (0.122)	Data 0.000 (0.003)	Loss 0.3297 (0.3106)	Acc@1 88.281 (89.447)	Acc@5 100.000 (99.651)
Epoch: [65][128/196]	Time 0.125 (0.122)	Data 0.000 (0.002)	Loss 0.3804 (0.3149)	Acc@1 87.891 (89.244)	Acc@5 99.609 (99.591)
Epoch: [65][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.3231 (0.3127)	Acc@1 87.891 (89.346)	Acc@5 99.609 (99.628)
after train
n1: 30 for:
wAcc: 80.60997288130194
test acc: 75.79
Epoche: [66/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [66][0/196]	Time 0.178 (0.178)	Data 0.191 (0.191)	Loss 0.2588 (0.2588)	Acc@1 91.406 (91.406)	Acc@5 100.000 (100.000)
Epoch: [66][64/196]	Time 0.134 (0.123)	Data 0.000 (0.003)	Loss 0.2394 (0.3003)	Acc@1 89.844 (89.603)	Acc@5 100.000 (99.730)
Epoch: [66][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.3601 (0.3032)	Acc@1 87.109 (89.492)	Acc@5 99.609 (99.688)
Epoch: [66][192/196]	Time 0.116 (0.122)	Data 0.000 (0.001)	Loss 0.3318 (0.3078)	Acc@1 89.062 (89.439)	Acc@5 99.219 (99.688)
after train
n1: 30 for:
wAcc: 80.43055790605092
test acc: 80.6
Epoche: [67/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [67][0/196]	Time 0.180 (0.180)	Data 0.199 (0.199)	Loss 0.3112 (0.3112)	Acc@1 90.234 (90.234)	Acc@5 100.000 (100.000)
Epoch: [67][64/196]	Time 0.126 (0.122)	Data 0.000 (0.003)	Loss 0.2815 (0.3141)	Acc@1 90.234 (89.303)	Acc@5 100.000 (99.663)
Epoch: [67][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.3781 (0.3078)	Acc@1 87.109 (89.602)	Acc@5 99.609 (99.661)
Epoch: [67][192/196]	Time 0.123 (0.122)	Data 0.000 (0.001)	Loss 0.2890 (0.3094)	Acc@1 90.234 (89.479)	Acc@5 99.219 (99.644)
after train
n1: 30 for:
wAcc: 80.78699177585823
test acc: 80.84
Epoche: [68/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [68][0/196]	Time 0.149 (0.149)	Data 0.197 (0.197)	Loss 0.2799 (0.2799)	Acc@1 91.406 (91.406)	Acc@5 99.609 (99.609)
Epoch: [68][64/196]	Time 0.124 (0.123)	Data 0.000 (0.003)	Loss 0.3119 (0.2927)	Acc@1 89.062 (89.862)	Acc@5 100.000 (99.706)
Epoch: [68][128/196]	Time 0.124 (0.123)	Data 0.000 (0.002)	Loss 0.2477 (0.3078)	Acc@1 91.797 (89.323)	Acc@5 99.609 (99.709)
Epoch: [68][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.3640 (0.3084)	Acc@1 87.891 (89.330)	Acc@5 100.000 (99.688)
after train
n1: 30 for:
wAcc: 79.55441034685977
test acc: 85.52
Epoche: [69/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [69][0/196]	Time 0.181 (0.181)	Data 0.242 (0.242)	Loss 0.3043 (0.3043)	Acc@1 90.234 (90.234)	Acc@5 99.609 (99.609)
Epoch: [69][64/196]	Time 0.125 (0.123)	Data 0.000 (0.004)	Loss 0.3243 (0.3091)	Acc@1 91.016 (89.615)	Acc@5 99.609 (99.645)
Epoch: [69][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.2637 (0.3040)	Acc@1 91.406 (89.538)	Acc@5 100.000 (99.685)
Epoch: [69][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.3438 (0.3096)	Acc@1 87.500 (89.320)	Acc@5 100.000 (99.666)
after train
n1: 30 for:
wAcc: 80.35417876796244
test acc: 83.14
Epoche: [70/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [70][0/196]	Time 0.181 (0.181)	Data 0.246 (0.246)	Loss 0.2013 (0.2013)	Acc@1 93.750 (93.750)	Acc@5 100.000 (100.000)
Epoch: [70][64/196]	Time 0.121 (0.123)	Data 0.000 (0.004)	Loss 0.3972 (0.2996)	Acc@1 85.938 (89.928)	Acc@5 100.000 (99.706)
Epoch: [70][128/196]	Time 0.130 (0.121)	Data 0.000 (0.002)	Loss 0.3825 (0.3067)	Acc@1 88.281 (89.541)	Acc@5 99.219 (99.682)
Epoch: [70][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.2445 (0.3073)	Acc@1 91.016 (89.445)	Acc@5 99.609 (99.672)
after train
n1: 30 for:
wAcc: 81.48946106340509
test acc: 79.22
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [71/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [71][0/196]	Time 0.170 (0.170)	Data 0.222 (0.222)	Loss 0.2768 (0.2768)	Acc@1 89.453 (89.453)	Acc@5 100.000 (100.000)
Epoch: [71][64/196]	Time 0.129 (0.122)	Data 0.000 (0.004)	Loss 0.2380 (0.2660)	Acc@1 93.359 (90.974)	Acc@5 100.000 (99.778)
Epoch: [71][128/196]	Time 0.116 (0.121)	Data 0.000 (0.002)	Loss 0.3665 (0.2891)	Acc@1 87.109 (90.186)	Acc@5 100.000 (99.743)
Epoch: [71][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.3154 (0.3004)	Acc@1 89.062 (89.708)	Acc@5 99.219 (99.709)
after train
n1: 30 for:
wAcc: 80.93538062917972
test acc: 80.31
Epoche: [72/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [72][0/196]	Time 0.162 (0.162)	Data 0.199 (0.199)	Loss 0.1879 (0.1879)	Acc@1 92.969 (92.969)	Acc@5 100.000 (100.000)
Epoch: [72][64/196]	Time 0.121 (0.121)	Data 0.000 (0.003)	Loss 0.3317 (0.3026)	Acc@1 87.891 (89.471)	Acc@5 99.609 (99.712)
Epoch: [72][128/196]	Time 0.123 (0.121)	Data 0.000 (0.002)	Loss 0.2049 (0.3109)	Acc@1 93.359 (89.290)	Acc@5 100.000 (99.676)
Epoch: [72][192/196]	Time 0.123 (0.122)	Data 0.000 (0.001)	Loss 0.3197 (0.3078)	Acc@1 87.109 (89.413)	Acc@5 99.219 (99.700)
after train
n1: 30 for:
wAcc: 79.90334120912686
test acc: 84.52
Epoche: [73/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [73][0/196]	Time 0.183 (0.183)	Data 0.195 (0.195)	Loss 0.2438 (0.2438)	Acc@1 91.016 (91.016)	Acc@5 100.000 (100.000)
Epoch: [73][64/196]	Time 0.126 (0.124)	Data 0.000 (0.003)	Loss 0.2605 (0.3073)	Acc@1 91.016 (89.387)	Acc@5 99.609 (99.669)
Epoch: [73][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.3094 (0.3017)	Acc@1 89.844 (89.614)	Acc@5 99.219 (99.697)
Epoch: [73][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.2565 (0.3029)	Acc@1 91.797 (89.585)	Acc@5 100.000 (99.674)
after train
n1: 30 for:
wAcc: 80.86617332669415
test acc: 81.29
Epoche: [74/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [74][0/196]	Time 0.180 (0.180)	Data 0.203 (0.203)	Loss 0.3311 (0.3311)	Acc@1 88.672 (88.672)	Acc@5 100.000 (100.000)
Epoch: [74][64/196]	Time 0.122 (0.123)	Data 0.000 (0.003)	Loss 0.2994 (0.2909)	Acc@1 90.625 (90.012)	Acc@5 99.609 (99.754)
Epoch: [74][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.3606 (0.3019)	Acc@1 87.891 (89.726)	Acc@5 99.609 (99.679)
Epoch: [74][192/196]	Time 0.129 (0.123)	Data 0.000 (0.001)	Loss 0.3163 (0.3044)	Acc@1 87.500 (89.607)	Acc@5 99.609 (99.682)
after train
n1: 30 for:
wAcc: 81.50067552345675
test acc: 84.64
Epoche: [75/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [75][0/196]	Time 0.162 (0.162)	Data 0.231 (0.231)	Loss 0.2447 (0.2447)	Acc@1 94.531 (94.531)	Acc@5 99.609 (99.609)
Epoch: [75][64/196]	Time 0.125 (0.122)	Data 0.000 (0.004)	Loss 0.4011 (0.2933)	Acc@1 83.984 (89.940)	Acc@5 99.609 (99.706)
Epoch: [75][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.3441 (0.3009)	Acc@1 88.281 (89.717)	Acc@5 100.000 (99.670)
Epoch: [75][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.3085 (0.3057)	Acc@1 90.234 (89.566)	Acc@5 99.219 (99.662)
after train
n1: 30 for:
wAcc: 81.59045457181008
test acc: 83.29
Epoche: [76/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [76][0/196]	Time 0.160 (0.160)	Data 0.215 (0.215)	Loss 0.2643 (0.2643)	Acc@1 91.016 (91.016)	Acc@5 100.000 (100.000)
Epoch: [76][64/196]	Time 0.125 (0.123)	Data 0.000 (0.004)	Loss 0.2779 (0.2913)	Acc@1 91.797 (90.018)	Acc@5 100.000 (99.651)
Epoch: [76][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.3358 (0.3094)	Acc@1 90.234 (89.387)	Acc@5 100.000 (99.661)
Epoch: [76][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.3441 (0.3090)	Acc@1 87.500 (89.417)	Acc@5 100.000 (99.646)
after train
n1: 30 for:
wAcc: 81.11896520383482
test acc: 82.76
Epoche: [77/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [77][0/196]	Time 0.173 (0.173)	Data 0.208 (0.208)	Loss 0.2420 (0.2420)	Acc@1 90.625 (90.625)	Acc@5 100.000 (100.000)
Epoch: [77][64/196]	Time 0.123 (0.123)	Data 0.000 (0.003)	Loss 0.2586 (0.2869)	Acc@1 90.625 (90.114)	Acc@5 99.609 (99.694)
Epoch: [77][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.2777 (0.2995)	Acc@1 87.891 (89.723)	Acc@5 100.000 (99.682)
Epoch: [77][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.3034 (0.3047)	Acc@1 90.234 (89.504)	Acc@5 100.000 (99.688)
after train
n1: 30 for:
wAcc: 80.47600954997232
test acc: 80.65
Epoche: [78/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [78][0/196]	Time 0.173 (0.173)	Data 0.283 (0.283)	Loss 0.3050 (0.3050)	Acc@1 89.453 (89.453)	Acc@5 99.609 (99.609)
Epoch: [78][64/196]	Time 0.117 (0.122)	Data 0.000 (0.005)	Loss 0.2434 (0.2951)	Acc@1 91.016 (89.712)	Acc@5 100.000 (99.718)
Epoch: [78][128/196]	Time 0.116 (0.121)	Data 0.000 (0.002)	Loss 0.3934 (0.2955)	Acc@1 86.328 (89.847)	Acc@5 100.000 (99.688)
Epoch: [78][192/196]	Time 0.118 (0.121)	Data 0.000 (0.002)	Loss 0.3422 (0.2992)	Acc@1 88.281 (89.708)	Acc@5 99.609 (99.696)
after train
n1: 30 for:
wAcc: 80.87176848256287
test acc: 80.56
Epoche: [79/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [79][0/196]	Time 0.174 (0.174)	Data 0.216 (0.216)	Loss 0.2931 (0.2931)	Acc@1 87.891 (87.891)	Acc@5 100.000 (100.000)
Epoch: [79][64/196]	Time 0.122 (0.122)	Data 0.000 (0.004)	Loss 0.2875 (0.3053)	Acc@1 90.625 (89.435)	Acc@5 99.609 (99.760)
Epoch: [79][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.3266 (0.3037)	Acc@1 87.891 (89.459)	Acc@5 99.609 (99.749)
Epoch: [79][192/196]	Time 0.131 (0.122)	Data 0.000 (0.001)	Loss 0.3855 (0.3064)	Acc@1 88.281 (89.326)	Acc@5 99.609 (99.727)
after train
n1: 30 for:
wAcc: 81.32870752581529
test acc: 81.58
Epoche: [80/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [80][0/196]	Time 0.186 (0.186)	Data 0.203 (0.203)	Loss 0.2431 (0.2431)	Acc@1 90.234 (90.234)	Acc@5 99.609 (99.609)
Epoch: [80][64/196]	Time 0.122 (0.122)	Data 0.000 (0.003)	Loss 0.3630 (0.3014)	Acc@1 86.719 (89.561)	Acc@5 99.609 (99.700)
Epoch: [80][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.4124 (0.3080)	Acc@1 87.109 (89.417)	Acc@5 100.000 (99.670)
Epoch: [80][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.3050 (0.3042)	Acc@1 89.062 (89.542)	Acc@5 100.000 (99.696)
after train
n1: 30 for:
wAcc: 81.49092711632
test acc: 83.51
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [81/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [81][0/196]	Time 0.177 (0.177)	Data 0.214 (0.214)	Loss 0.2922 (0.2922)	Acc@1 89.453 (89.453)	Acc@5 100.000 (100.000)
Epoch: [81][64/196]	Time 0.122 (0.121)	Data 0.000 (0.003)	Loss 0.2789 (0.2853)	Acc@1 92.188 (90.084)	Acc@5 99.609 (99.778)
Epoch: [81][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.2322 (0.2888)	Acc@1 93.359 (89.989)	Acc@5 100.000 (99.755)
Epoch: [81][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.2999 (0.2964)	Acc@1 91.406 (89.799)	Acc@5 100.000 (99.751)
after train
n1: 30 for:
wAcc: 81.21786313830128
test acc: 82.05
Epoche: [82/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [82][0/196]	Time 0.161 (0.161)	Data 0.202 (0.202)	Loss 0.2868 (0.2868)	Acc@1 90.625 (90.625)	Acc@5 99.609 (99.609)
Epoch: [82][64/196]	Time 0.119 (0.122)	Data 0.000 (0.003)	Loss 0.3394 (0.3168)	Acc@1 88.281 (89.069)	Acc@5 100.000 (99.712)
Epoch: [82][128/196]	Time 0.129 (0.122)	Data 0.000 (0.002)	Loss 0.3979 (0.3045)	Acc@1 85.156 (89.505)	Acc@5 99.609 (99.730)
Epoch: [82][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.3772 (0.3045)	Acc@1 87.891 (89.560)	Acc@5 99.219 (99.723)
after train
n1: 30 for:
wAcc: 81.59970412238455
test acc: 85.41
Epoche: [83/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [83][0/196]	Time 0.177 (0.177)	Data 0.200 (0.200)	Loss 0.2751 (0.2751)	Acc@1 92.188 (92.188)	Acc@5 100.000 (100.000)
Epoch: [83][64/196]	Time 0.125 (0.120)	Data 0.001 (0.003)	Loss 0.3157 (0.3102)	Acc@1 91.016 (89.393)	Acc@5 99.609 (99.669)
Epoch: [83][128/196]	Time 0.135 (0.121)	Data 0.000 (0.002)	Loss 0.3188 (0.3008)	Acc@1 89.062 (89.614)	Acc@5 99.609 (99.691)
Epoch: [83][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.2812 (0.2985)	Acc@1 90.234 (89.682)	Acc@5 100.000 (99.707)
after train
n1: 30 for:
wAcc: 82.32691964849484
test acc: 83.2
Epoche: [84/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [84][0/196]	Time 0.177 (0.177)	Data 0.199 (0.199)	Loss 0.3281 (0.3281)	Acc@1 90.625 (90.625)	Acc@5 100.000 (100.000)
Epoch: [84][64/196]	Time 0.119 (0.121)	Data 0.000 (0.003)	Loss 0.3301 (0.2840)	Acc@1 89.453 (90.288)	Acc@5 99.609 (99.688)
Epoch: [84][128/196]	Time 0.118 (0.121)	Data 0.000 (0.002)	Loss 0.3443 (0.2834)	Acc@1 87.891 (90.198)	Acc@5 98.438 (99.700)
Epoch: [84][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.2794 (0.2918)	Acc@1 90.234 (89.955)	Acc@5 99.609 (99.705)
after train
n1: 30 for:
wAcc: 82.12448222564323
test acc: 86.35
Epoche: [85/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [85][0/196]	Time 0.188 (0.188)	Data 0.194 (0.194)	Loss 0.2407 (0.2407)	Acc@1 94.141 (94.141)	Acc@5 100.000 (100.000)
Epoch: [85][64/196]	Time 0.113 (0.122)	Data 0.000 (0.003)	Loss 0.2770 (0.2861)	Acc@1 91.016 (90.252)	Acc@5 99.609 (99.736)
Epoch: [85][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.3313 (0.2913)	Acc@1 89.453 (90.113)	Acc@5 98.828 (99.721)
Epoch: [85][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.3540 (0.2936)	Acc@1 89.453 (90.008)	Acc@5 99.609 (99.702)
after train
n1: 30 for:
wAcc: 82.4448015894919
test acc: 81.86
Epoche: [86/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [86][0/196]	Time 0.168 (0.168)	Data 0.231 (0.231)	Loss 0.2264 (0.2264)	Acc@1 91.797 (91.797)	Acc@5 100.000 (100.000)
Epoch: [86][64/196]	Time 0.123 (0.123)	Data 0.000 (0.004)	Loss 0.2849 (0.3048)	Acc@1 90.234 (89.471)	Acc@5 100.000 (99.669)
Epoch: [86][128/196]	Time 0.132 (0.122)	Data 0.000 (0.002)	Loss 0.3097 (0.3041)	Acc@1 88.281 (89.471)	Acc@5 100.000 (99.679)
Epoch: [86][192/196]	Time 0.116 (0.122)	Data 0.000 (0.001)	Loss 0.2454 (0.3023)	Acc@1 92.188 (89.583)	Acc@5 100.000 (99.666)
after train
n1: 30 for:
wAcc: 81.92134562234976
test acc: 85.69
Epoche: [87/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [87][0/196]	Time 0.167 (0.167)	Data 0.234 (0.234)	Loss 0.2966 (0.2966)	Acc@1 89.844 (89.844)	Acc@5 99.609 (99.609)
Epoch: [87][64/196]	Time 0.121 (0.122)	Data 0.000 (0.004)	Loss 0.2613 (0.2858)	Acc@1 90.234 (90.222)	Acc@5 100.000 (99.754)
Epoch: [87][128/196]	Time 0.130 (0.122)	Data 0.000 (0.002)	Loss 0.3732 (0.2924)	Acc@1 86.719 (89.941)	Acc@5 99.609 (99.743)
Epoch: [87][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.3660 (0.2966)	Acc@1 86.719 (89.850)	Acc@5 100.000 (99.723)
after train
n1: 30 for:
wAcc: 82.92343278998158
test acc: 83.4
Epoche: [88/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [88][0/196]	Time 0.184 (0.184)	Data 0.204 (0.204)	Loss 0.2931 (0.2931)	Acc@1 89.453 (89.453)	Acc@5 100.000 (100.000)
Epoch: [88][64/196]	Time 0.125 (0.122)	Data 0.000 (0.003)	Loss 0.2703 (0.2955)	Acc@1 92.188 (89.766)	Acc@5 99.219 (99.742)
Epoch: [88][128/196]	Time 0.115 (0.122)	Data 0.000 (0.002)	Loss 0.2775 (0.2996)	Acc@1 89.453 (89.626)	Acc@5 99.609 (99.737)
Epoch: [88][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.2348 (0.3030)	Acc@1 91.406 (89.522)	Acc@5 100.000 (99.727)
after train
n1: 30 for:
wAcc: 82.83852981580134
test acc: 82.85
Epoche: [89/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [89][0/196]	Time 0.168 (0.168)	Data 0.225 (0.225)	Loss 0.3217 (0.3217)	Acc@1 89.453 (89.453)	Acc@5 99.609 (99.609)
Epoch: [89][64/196]	Time 0.123 (0.122)	Data 0.000 (0.004)	Loss 0.2478 (0.2909)	Acc@1 91.797 (89.886)	Acc@5 100.000 (99.748)
Epoch: [89][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.2825 (0.2893)	Acc@1 89.844 (90.125)	Acc@5 100.000 (99.721)
Epoch: [89][192/196]	Time 0.125 (0.122)	Data 0.000 (0.001)	Loss 0.3338 (0.2932)	Acc@1 86.719 (89.973)	Acc@5 99.609 (99.707)
after train
n1: 30 for:
wAcc: 82.36077107321105
test acc: 81.77
Epoche: [90/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [90][0/196]	Time 0.176 (0.176)	Data 0.247 (0.247)	Loss 0.2944 (0.2944)	Acc@1 91.016 (91.016)	Acc@5 99.609 (99.609)
Epoch: [90][64/196]	Time 0.117 (0.123)	Data 0.000 (0.004)	Loss 0.3443 (0.2879)	Acc@1 89.453 (90.066)	Acc@5 99.609 (99.760)
Epoch: [90][128/196]	Time 0.117 (0.121)	Data 0.000 (0.002)	Loss 0.2450 (0.2892)	Acc@1 91.406 (90.080)	Acc@5 100.000 (99.764)
Epoch: [90][192/196]	Time 0.149 (0.121)	Data 0.000 (0.001)	Loss 0.3742 (0.2937)	Acc@1 87.500 (89.925)	Acc@5 99.609 (99.757)
after train
n1: 30 for:
wAcc: 81.71983511672028
test acc: 81.02
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [91/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [91][0/196]	Time 0.149 (0.149)	Data 0.194 (0.194)	Loss 0.3136 (0.3136)	Acc@1 88.672 (88.672)	Acc@5 100.000 (100.000)
Epoch: [91][64/196]	Time 0.120 (0.121)	Data 0.000 (0.003)	Loss 0.2705 (0.2655)	Acc@1 90.625 (90.859)	Acc@5 99.609 (99.772)
Epoch: [91][128/196]	Time 0.119 (0.120)	Data 0.000 (0.002)	Loss 0.2329 (0.2783)	Acc@1 93.750 (90.549)	Acc@5 100.000 (99.730)
Epoch: [91][192/196]	Time 0.130 (0.121)	Data 0.000 (0.001)	Loss 0.2833 (0.2856)	Acc@1 89.453 (90.311)	Acc@5 100.000 (99.719)
after train
n1: 30 for:
wAcc: 82.40327471253295
test acc: 83.38
Epoche: [92/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [92][0/196]	Time 0.158 (0.158)	Data 0.232 (0.232)	Loss 0.2803 (0.2803)	Acc@1 90.234 (90.234)	Acc@5 100.000 (100.000)
Epoch: [92][64/196]	Time 0.118 (0.123)	Data 0.000 (0.004)	Loss 0.2448 (0.2829)	Acc@1 89.844 (90.258)	Acc@5 100.000 (99.766)
Epoch: [92][128/196]	Time 0.116 (0.122)	Data 0.000 (0.002)	Loss 0.3395 (0.2907)	Acc@1 89.062 (89.980)	Acc@5 99.219 (99.758)
Epoch: [92][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.3491 (0.2956)	Acc@1 87.109 (89.850)	Acc@5 99.219 (99.743)
after train
n1: 30 for:
wAcc: 82.47785417178771
test acc: 80.56
Epoche: [93/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [93][0/196]	Time 0.168 (0.168)	Data 0.193 (0.193)	Loss 0.3683 (0.3683)	Acc@1 87.500 (87.500)	Acc@5 99.219 (99.219)
Epoch: [93][64/196]	Time 0.118 (0.121)	Data 0.000 (0.003)	Loss 0.1755 (0.2113)	Acc@1 94.922 (92.891)	Acc@5 100.000 (99.850)
Epoch: [93][128/196]	Time 0.128 (0.120)	Data 0.000 (0.002)	Loss 0.1216 (0.1924)	Acc@1 95.703 (93.538)	Acc@5 100.000 (99.867)
Epoch: [93][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.1601 (0.1834)	Acc@1 94.531 (93.896)	Acc@5 100.000 (99.885)
after train
n1: 30 for:
wAcc: 82.31942687083729
test acc: 91.49
Epoche: [94/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [94][0/196]	Time 0.178 (0.178)	Data 0.191 (0.191)	Loss 0.1168 (0.1168)	Acc@1 96.094 (96.094)	Acc@5 100.000 (100.000)
Epoch: [94][64/196]	Time 0.121 (0.122)	Data 0.000 (0.003)	Loss 0.1897 (0.1384)	Acc@1 92.578 (95.391)	Acc@5 99.609 (99.922)
Epoch: [94][128/196]	Time 0.141 (0.121)	Data 0.000 (0.002)	Loss 0.1347 (0.1416)	Acc@1 94.922 (95.282)	Acc@5 100.000 (99.909)
Epoch: [94][192/196]	Time 0.116 (0.122)	Data 0.000 (0.001)	Loss 0.1022 (0.1400)	Acc@1 96.094 (95.321)	Acc@5 100.000 (99.919)
after train
n1: 30 for:
wAcc: 82.17381280819923
test acc: 92.1
Epoche: [95/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [95][0/196]	Time 0.163 (0.163)	Data 0.230 (0.230)	Loss 0.1366 (0.1366)	Acc@1 94.922 (94.922)	Acc@5 100.000 (100.000)
Epoch: [95][64/196]	Time 0.122 (0.122)	Data 0.000 (0.004)	Loss 0.1319 (0.1294)	Acc@1 96.094 (95.673)	Acc@5 100.000 (99.946)
Epoch: [95][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.0745 (0.1257)	Acc@1 98.047 (95.836)	Acc@5 100.000 (99.942)
Epoch: [95][192/196]	Time 0.122 (0.121)	Data 0.000 (0.001)	Loss 0.1426 (0.1236)	Acc@1 96.094 (95.930)	Acc@5 99.609 (99.937)
after train
n1: 30 for:
wAcc: 83.50955307220222
test acc: 92.33
Epoche: [96/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [96][0/196]	Time 0.180 (0.180)	Data 0.202 (0.202)	Loss 0.0962 (0.0962)	Acc@1 97.266 (97.266)	Acc@5 100.000 (100.000)
Epoch: [96][64/196]	Time 0.120 (0.123)	Data 0.000 (0.003)	Loss 0.1506 (0.1175)	Acc@1 94.531 (96.208)	Acc@5 100.000 (99.910)
Epoch: [96][128/196]	Time 0.120 (0.123)	Data 0.000 (0.002)	Loss 0.1193 (0.1139)	Acc@1 95.703 (96.215)	Acc@5 100.000 (99.939)
Epoch: [96][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.1331 (0.1140)	Acc@1 96.094 (96.183)	Acc@5 100.000 (99.939)
after train
n1: 30 for:
wAcc: 84.11330893805652
test acc: 92.36
Epoche: [97/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [97][0/196]	Time 0.178 (0.178)	Data 0.214 (0.214)	Loss 0.0817 (0.0817)	Acc@1 97.656 (97.656)	Acc@5 100.000 (100.000)
Epoch: [97][64/196]	Time 0.121 (0.122)	Data 0.000 (0.003)	Loss 0.1094 (0.1023)	Acc@1 96.484 (96.701)	Acc@5 100.000 (99.940)
Epoch: [97][128/196]	Time 0.128 (0.121)	Data 0.000 (0.002)	Loss 0.1377 (0.1033)	Acc@1 96.484 (96.587)	Acc@5 99.609 (99.949)
Epoch: [97][192/196]	Time 0.115 (0.122)	Data 0.000 (0.001)	Loss 0.1022 (0.1044)	Acc@1 96.484 (96.557)	Acc@5 100.000 (99.933)
after train
n1: 30 for:
wAcc: 85.3219016105949
test acc: 92.41
Epoche: [98/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [98][0/196]	Time 0.149 (0.149)	Data 0.234 (0.234)	Loss 0.0727 (0.0727)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [98][64/196]	Time 0.129 (0.122)	Data 0.000 (0.004)	Loss 0.0722 (0.0998)	Acc@1 97.656 (96.719)	Acc@5 100.000 (99.964)
Epoch: [98][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.0968 (0.0982)	Acc@1 96.484 (96.778)	Acc@5 100.000 (99.964)
Epoch: [98][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0963 (0.0995)	Acc@1 96.484 (96.723)	Acc@5 100.000 (99.957)
after train
n1: 30 for:
wAcc: 85.43514177464097
test acc: 92.38
Epoche: [99/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [99][0/196]	Time 0.166 (0.166)	Data 0.192 (0.192)	Loss 0.0559 (0.0559)	Acc@1 97.266 (97.266)	Acc@5 100.000 (100.000)
Epoch: [99][64/196]	Time 0.132 (0.123)	Data 0.000 (0.003)	Loss 0.0846 (0.0925)	Acc@1 97.656 (97.001)	Acc@5 99.609 (99.958)
Epoch: [99][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.0788 (0.0922)	Acc@1 97.266 (96.914)	Acc@5 100.000 (99.964)
Epoch: [99][192/196]	Time 0.126 (0.122)	Data 0.000 (0.001)	Loss 0.0882 (0.0944)	Acc@1 96.875 (96.835)	Acc@5 100.000 (99.962)
after train
n1: 30 for:
wAcc: 85.31651583962672
test acc: 92.42
Epoche: [100/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [100][0/196]	Time 0.174 (0.174)	Data 0.232 (0.232)	Loss 0.1129 (0.1129)	Acc@1 96.484 (96.484)	Acc@5 100.000 (100.000)
Epoch: [100][64/196]	Time 0.124 (0.121)	Data 0.000 (0.004)	Loss 0.0679 (0.0899)	Acc@1 98.047 (97.031)	Acc@5 100.000 (99.988)
Epoch: [100][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.0901 (0.0906)	Acc@1 96.875 (96.966)	Acc@5 100.000 (99.976)
Epoch: [100][192/196]	Time 0.115 (0.121)	Data 0.000 (0.001)	Loss 0.1082 (0.0899)	Acc@1 96.094 (97.003)	Acc@5 100.000 (99.974)
after train
n1: 30 for:
wAcc: 85.93237723769076
test acc: 92.44
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [101/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [101][0/196]	Time 0.179 (0.179)	Data 0.194 (0.194)	Loss 0.0473 (0.0473)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [101][64/196]	Time 0.120 (0.121)	Data 0.000 (0.003)	Loss 0.0591 (0.0784)	Acc@1 99.219 (97.614)	Acc@5 100.000 (99.982)
Epoch: [101][128/196]	Time 0.119 (0.120)	Data 0.000 (0.002)	Loss 0.0685 (0.0817)	Acc@1 96.875 (97.438)	Acc@5 100.000 (99.982)
Epoch: [101][192/196]	Time 0.124 (0.121)	Data 0.000 (0.001)	Loss 0.0520 (0.0827)	Acc@1 99.219 (97.395)	Acc@5 100.000 (99.972)
after train
n1: 30 for:
wAcc: 86.96082802350986
test acc: 92.61
Epoche: [102/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [102][0/196]	Time 0.182 (0.182)	Data 0.212 (0.212)	Loss 0.0823 (0.0823)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [102][64/196]	Time 0.135 (0.123)	Data 0.000 (0.003)	Loss 0.0715 (0.0796)	Acc@1 97.656 (97.338)	Acc@5 100.000 (99.982)
Epoch: [102][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.0845 (0.0805)	Acc@1 97.266 (97.305)	Acc@5 99.609 (99.976)
Epoch: [102][192/196]	Time 0.117 (0.123)	Data 0.000 (0.001)	Loss 0.0816 (0.0809)	Acc@1 96.875 (97.296)	Acc@5 100.000 (99.982)
after train
n1: 30 for:
wAcc: 86.85835690177588
test acc: 92.44
Epoche: [103/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [103][0/196]	Time 0.169 (0.169)	Data 0.235 (0.235)	Loss 0.0352 (0.0352)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [103][64/196]	Time 0.121 (0.123)	Data 0.000 (0.004)	Loss 0.0809 (0.0745)	Acc@1 96.875 (97.446)	Acc@5 100.000 (100.000)
Epoch: [103][128/196]	Time 0.130 (0.123)	Data 0.000 (0.002)	Loss 0.0860 (0.0766)	Acc@1 96.094 (97.411)	Acc@5 100.000 (99.985)
Epoch: [103][192/196]	Time 0.119 (0.123)	Data 0.000 (0.001)	Loss 0.0613 (0.0769)	Acc@1 97.656 (97.413)	Acc@5 100.000 (99.982)
after train
n1: 30 for:
wAcc: 87.70274412487672
test acc: 92.5
Epoche: [104/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [104][0/196]	Time 0.177 (0.177)	Data 0.228 (0.228)	Loss 0.0327 (0.0327)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [104][64/196]	Time 0.118 (0.123)	Data 0.000 (0.004)	Loss 0.0640 (0.0685)	Acc@1 97.656 (97.638)	Acc@5 100.000 (99.988)
Epoch: [104][128/196]	Time 0.124 (0.123)	Data 0.000 (0.002)	Loss 0.0627 (0.0699)	Acc@1 98.438 (97.644)	Acc@5 100.000 (99.991)
Epoch: [104][192/196]	Time 0.126 (0.123)	Data 0.000 (0.001)	Loss 0.1031 (0.0723)	Acc@1 96.484 (97.600)	Acc@5 100.000 (99.988)
after train
n1: 30 for:
wAcc: 87.81708640163899
test acc: 92.49
Epoche: [105/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [105][0/196]	Time 0.180 (0.180)	Data 0.234 (0.234)	Loss 0.0635 (0.0635)	Acc@1 97.266 (97.266)	Acc@5 100.000 (100.000)
Epoch: [105][64/196]	Time 0.120 (0.123)	Data 0.000 (0.004)	Loss 0.0657 (0.0731)	Acc@1 98.438 (97.464)	Acc@5 100.000 (99.982)
Epoch: [105][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.0605 (0.0719)	Acc@1 97.266 (97.508)	Acc@5 100.000 (99.988)
Epoch: [105][192/196]	Time 0.116 (0.123)	Data 0.000 (0.001)	Loss 0.0401 (0.0714)	Acc@1 99.219 (97.596)	Acc@5 100.000 (99.990)
after train
n1: 30 for:
wAcc: 88.04194707296868
test acc: 92.43
Epoche: [106/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [106][0/196]	Time 0.174 (0.174)	Data 0.201 (0.201)	Loss 0.0883 (0.0883)	Acc@1 96.875 (96.875)	Acc@5 100.000 (100.000)
Epoch: [106][64/196]	Time 0.114 (0.121)	Data 0.000 (0.003)	Loss 0.0843 (0.0690)	Acc@1 96.094 (97.644)	Acc@5 100.000 (99.982)
Epoch: [106][128/196]	Time 0.130 (0.121)	Data 0.000 (0.002)	Loss 0.0767 (0.0714)	Acc@1 97.266 (97.581)	Acc@5 100.000 (99.979)
Epoch: [106][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0492 (0.0711)	Acc@1 98.438 (97.591)	Acc@5 100.000 (99.982)
after train
n1: 30 for:
wAcc: 88.02002237602687
test acc: 92.51
Epoche: [107/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [107][0/196]	Time 0.179 (0.179)	Data 0.198 (0.198)	Loss 0.0754 (0.0754)	Acc@1 97.266 (97.266)	Acc@5 100.000 (100.000)
Epoch: [107][64/196]	Time 0.117 (0.121)	Data 0.000 (0.003)	Loss 0.0382 (0.0626)	Acc@1 98.438 (97.987)	Acc@5 100.000 (100.000)
Epoch: [107][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.0578 (0.0631)	Acc@1 97.266 (97.856)	Acc@5 100.000 (100.000)
Epoch: [107][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.0691 (0.0638)	Acc@1 98.438 (97.867)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 88.29668781161521
test acc: 92.64
Epoche: [108/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [108][0/196]	Time 0.163 (0.163)	Data 0.189 (0.189)	Loss 0.0607 (0.0607)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [108][64/196]	Time 0.119 (0.123)	Data 0.000 (0.003)	Loss 0.1131 (0.0600)	Acc@1 96.875 (98.065)	Acc@5 100.000 (99.976)
Epoch: [108][128/196]	Time 0.120 (0.123)	Data 0.000 (0.002)	Loss 0.0799 (0.0606)	Acc@1 97.656 (97.977)	Acc@5 100.000 (99.982)
Epoch: [108][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.0657 (0.0617)	Acc@1 97.266 (97.968)	Acc@5 100.000 (99.982)
after train
n1: 30 for:
wAcc: 88.72435428957621
test acc: 92.45
Epoche: [109/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [109][0/196]	Time 0.171 (0.171)	Data 0.189 (0.189)	Loss 0.0675 (0.0675)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [109][64/196]	Time 0.120 (0.122)	Data 0.000 (0.003)	Loss 0.0453 (0.0549)	Acc@1 98.438 (98.215)	Acc@5 100.000 (99.994)
Epoch: [109][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.0321 (0.0595)	Acc@1 99.219 (98.068)	Acc@5 100.000 (99.982)
Epoch: [109][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.0860 (0.0619)	Acc@1 97.656 (97.952)	Acc@5 100.000 (99.980)
after train
n1: 30 for:
wAcc: 89.24372233443722
test acc: 92.15
Epoche: [110/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [110][0/196]	Time 0.162 (0.162)	Data 0.228 (0.228)	Loss 0.0391 (0.0391)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [110][64/196]	Time 0.118 (0.123)	Data 0.000 (0.004)	Loss 0.0904 (0.0574)	Acc@1 96.875 (98.053)	Acc@5 100.000 (99.988)
Epoch: [110][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.0593 (0.0590)	Acc@1 97.656 (98.011)	Acc@5 100.000 (99.985)
Epoch: [110][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.0726 (0.0599)	Acc@1 98.047 (97.976)	Acc@5 100.000 (99.982)
after train
n1: 30 for:
wAcc: 89.22016424573758
test acc: 92.31
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [111/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [111][0/196]	Time 0.148 (0.148)	Data 0.230 (0.230)	Loss 0.0916 (0.0916)	Acc@1 96.875 (96.875)	Acc@5 100.000 (100.000)
Epoch: [111][64/196]	Time 0.113 (0.121)	Data 0.000 (0.004)	Loss 0.0505 (0.0510)	Acc@1 98.047 (98.431)	Acc@5 100.000 (99.988)
Epoch: [111][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.0374 (0.0544)	Acc@1 99.609 (98.310)	Acc@5 100.000 (99.991)
Epoch: [111][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.0834 (0.0569)	Acc@1 96.484 (98.189)	Acc@5 100.000 (99.990)
after train
n1: 30 for:
wAcc: 89.9052353202843
test acc: 92.12
Epoche: [112/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [112][0/196]	Time 0.156 (0.156)	Data 0.229 (0.229)	Loss 0.0468 (0.0468)	Acc@1 97.656 (97.656)	Acc@5 100.000 (100.000)
Epoch: [112][64/196]	Time 0.119 (0.123)	Data 0.000 (0.004)	Loss 0.0479 (0.0526)	Acc@1 98.828 (98.377)	Acc@5 100.000 (99.982)
Epoch: [112][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0470 (0.0526)	Acc@1 98.047 (98.325)	Acc@5 100.000 (99.988)
Epoch: [112][192/196]	Time 0.116 (0.122)	Data 0.000 (0.001)	Loss 0.0469 (0.0539)	Acc@1 98.047 (98.255)	Acc@5 100.000 (99.984)
after train
n1: 30 for:
wAcc: 89.72864232263007
test acc: 92.36
Epoche: [113/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [113][0/196]	Time 0.149 (0.149)	Data 0.229 (0.229)	Loss 0.0512 (0.0512)	Acc@1 97.266 (97.266)	Acc@5 100.000 (100.000)
Epoch: [113][64/196]	Time 0.121 (0.122)	Data 0.000 (0.004)	Loss 0.0414 (0.0502)	Acc@1 98.438 (98.383)	Acc@5 100.000 (99.994)
Epoch: [113][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.0790 (0.0516)	Acc@1 97.656 (98.304)	Acc@5 100.000 (99.991)
Epoch: [113][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.0425 (0.0540)	Acc@1 99.219 (98.211)	Acc@5 100.000 (99.992)
after train
n1: 30 for:
wAcc: 90.35377623938848
test acc: 92.39
Epoche: [114/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [114][0/196]	Time 0.155 (0.155)	Data 0.226 (0.226)	Loss 0.0617 (0.0617)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [114][64/196]	Time 0.129 (0.121)	Data 0.000 (0.004)	Loss 0.0790 (0.0481)	Acc@1 96.484 (98.431)	Acc@5 100.000 (99.988)
Epoch: [114][128/196]	Time 0.129 (0.121)	Data 0.000 (0.002)	Loss 0.0526 (0.0515)	Acc@1 97.266 (98.271)	Acc@5 100.000 (99.991)
Epoch: [114][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.0412 (0.0539)	Acc@1 98.828 (98.170)	Acc@5 100.000 (99.992)
after train
n1: 30 for:
wAcc: 89.83606412224594
test acc: 92.54
Epoche: [115/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [115][0/196]	Time 0.180 (0.180)	Data 0.217 (0.217)	Loss 0.0494 (0.0494)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [115][64/196]	Time 0.120 (0.122)	Data 0.000 (0.004)	Loss 0.0577 (0.0471)	Acc@1 98.047 (98.504)	Acc@5 100.000 (100.000)
Epoch: [115][128/196]	Time 0.116 (0.122)	Data 0.000 (0.002)	Loss 0.0658 (0.0488)	Acc@1 97.266 (98.395)	Acc@5 100.000 (100.000)
Epoch: [115][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0599 (0.0511)	Acc@1 98.047 (98.294)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 90.56418236247046
test acc: 92.19
Epoche: [116/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [116][0/196]	Time 0.178 (0.178)	Data 0.224 (0.224)	Loss 0.0518 (0.0518)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [116][64/196]	Time 0.127 (0.122)	Data 0.000 (0.004)	Loss 0.0405 (0.0484)	Acc@1 98.047 (98.383)	Acc@5 100.000 (99.994)
Epoch: [116][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.0474 (0.0480)	Acc@1 98.828 (98.404)	Acc@5 100.000 (99.997)
Epoch: [116][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.0505 (0.0503)	Acc@1 98.047 (98.320)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 90.33802785686993
test acc: 92.16
Epoche: [117/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [117][0/196]	Time 0.163 (0.163)	Data 0.195 (0.195)	Loss 0.0817 (0.0817)	Acc@1 96.875 (96.875)	Acc@5 100.000 (100.000)
Epoch: [117][64/196]	Time 0.119 (0.122)	Data 0.000 (0.003)	Loss 0.0268 (0.0530)	Acc@1 99.609 (98.107)	Acc@5 100.000 (99.994)
Epoch: [117][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.0466 (0.0532)	Acc@1 98.828 (98.107)	Acc@5 100.000 (99.994)
Epoch: [117][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.1010 (0.0529)	Acc@1 97.266 (98.156)	Acc@5 100.000 (99.992)
after train
n1: 30 for:
wAcc: 90.37606559026568
test acc: 91.91
Epoche: [118/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [118][0/196]	Time 0.182 (0.182)	Data 0.218 (0.218)	Loss 0.0460 (0.0460)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [118][64/196]	Time 0.118 (0.123)	Data 0.000 (0.004)	Loss 0.0581 (0.0489)	Acc@1 98.047 (98.401)	Acc@5 100.000 (100.000)
Epoch: [118][128/196]	Time 0.114 (0.121)	Data 0.000 (0.002)	Loss 0.0617 (0.0484)	Acc@1 97.656 (98.395)	Acc@5 100.000 (99.994)
Epoch: [118][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.0516 (0.0491)	Acc@1 97.656 (98.344)	Acc@5 100.000 (99.990)
after train
n1: 30 for:
wAcc: 90.31890261874878
test acc: 91.98
Epoche: [119/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [119][0/196]	Time 0.163 (0.163)	Data 0.200 (0.200)	Loss 0.0396 (0.0396)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [119][64/196]	Time 0.116 (0.123)	Data 0.000 (0.003)	Loss 0.0762 (0.0492)	Acc@1 97.656 (98.341)	Acc@5 100.000 (99.994)
Epoch: [119][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.0315 (0.0473)	Acc@1 98.828 (98.465)	Acc@5 100.000 (99.997)
Epoch: [119][192/196]	Time 0.116 (0.122)	Data 0.000 (0.001)	Loss 0.0625 (0.0502)	Acc@1 97.266 (98.371)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 90.31764902380057
test acc: 91.47
Epoche: [120/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [120][0/196]	Time 0.167 (0.167)	Data 0.216 (0.216)	Loss 0.0399 (0.0399)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [120][64/196]	Time 0.127 (0.122)	Data 0.000 (0.004)	Loss 0.0613 (0.0524)	Acc@1 98.438 (98.221)	Acc@5 100.000 (99.994)
Epoch: [120][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.0421 (0.0514)	Acc@1 98.438 (98.238)	Acc@5 100.000 (99.994)
Epoch: [120][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.0572 (0.0521)	Acc@1 98.438 (98.257)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 90.7331595231648
test acc: 91.98
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [121/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [121][0/196]	Time 0.174 (0.174)	Data 0.194 (0.194)	Loss 0.0343 (0.0343)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [121][64/196]	Time 0.121 (0.122)	Data 0.000 (0.003)	Loss 0.0642 (0.0428)	Acc@1 97.266 (98.636)	Acc@5 100.000 (99.988)
Epoch: [121][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0267 (0.0458)	Acc@1 98.828 (98.495)	Acc@5 100.000 (99.991)
Epoch: [121][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0590 (0.0475)	Acc@1 97.266 (98.423)	Acc@5 100.000 (99.990)
after train
n1: 30 for:
wAcc: 90.40593725282591
test acc: 91.86
Epoche: [122/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [122][0/196]	Time 0.179 (0.179)	Data 0.195 (0.195)	Loss 0.0265 (0.0265)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [122][64/196]	Time 0.116 (0.123)	Data 0.000 (0.003)	Loss 0.0256 (0.0440)	Acc@1 99.219 (98.546)	Acc@5 100.000 (99.994)
Epoch: [122][128/196]	Time 0.155 (0.122)	Data 0.000 (0.002)	Loss 0.0454 (0.0465)	Acc@1 98.828 (98.456)	Acc@5 100.000 (99.997)
Epoch: [122][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0274 (0.0467)	Acc@1 98.438 (98.421)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 92.0798055733087
test acc: 92.26
Epoche: [123/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [123][0/196]	Time 0.171 (0.171)	Data 0.193 (0.193)	Loss 0.0591 (0.0591)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [123][64/196]	Time 0.125 (0.122)	Data 0.000 (0.003)	Loss 0.0590 (0.0430)	Acc@1 98.047 (98.606)	Acc@5 100.000 (100.000)
Epoch: [123][128/196]	Time 0.140 (0.122)	Data 0.000 (0.002)	Loss 0.0281 (0.0452)	Acc@1 99.219 (98.543)	Acc@5 100.000 (100.000)
Epoch: [123][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.0752 (0.0462)	Acc@1 97.266 (98.468)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 92.17961357011023
test acc: 91.65
Epoche: [124/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [124][0/196]	Time 0.190 (0.190)	Data 0.199 (0.199)	Loss 0.0220 (0.0220)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [124][64/196]	Time 0.115 (0.121)	Data 0.000 (0.003)	Loss 0.0245 (0.0476)	Acc@1 99.609 (98.450)	Acc@5 100.000 (100.000)
Epoch: [124][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0646 (0.0463)	Acc@1 97.656 (98.486)	Acc@5 100.000 (99.997)
Epoch: [124][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.0531 (0.0484)	Acc@1 97.656 (98.367)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 92.17869411084959
test acc: 91.78
Epoche: [125/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [125][0/196]	Time 0.178 (0.178)	Data 0.194 (0.194)	Loss 0.0245 (0.0245)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [125][64/196]	Time 0.116 (0.122)	Data 0.000 (0.003)	Loss 0.0569 (0.0483)	Acc@1 98.047 (98.456)	Acc@5 100.000 (99.994)
Epoch: [125][128/196]	Time 0.130 (0.123)	Data 0.000 (0.002)	Loss 0.0727 (0.0475)	Acc@1 97.656 (98.459)	Acc@5 100.000 (99.997)
Epoch: [125][192/196]	Time 0.125 (0.122)	Data 0.000 (0.001)	Loss 0.0515 (0.0490)	Acc@1 97.656 (98.361)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 92.15730875686694
test acc: 92.16
Epoche: [126/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [126][0/196]	Time 0.176 (0.176)	Data 0.188 (0.188)	Loss 0.0511 (0.0511)	Acc@1 97.656 (97.656)	Acc@5 100.000 (100.000)
Epoch: [126][64/196]	Time 0.120 (0.122)	Data 0.000 (0.003)	Loss 0.0369 (0.0434)	Acc@1 99.219 (98.546)	Acc@5 100.000 (100.000)
Epoch: [126][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.0601 (0.0448)	Acc@1 97.656 (98.513)	Acc@5 100.000 (99.994)
Epoch: [126][192/196]	Time 0.124 (0.122)	Data 0.000 (0.001)	Loss 0.0406 (0.0454)	Acc@1 98.438 (98.514)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 92.16471046331833
test acc: 92.2
Epoche: [127/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [127][0/196]	Time 0.169 (0.169)	Data 0.229 (0.229)	Loss 0.0364 (0.0364)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [127][64/196]	Time 0.120 (0.122)	Data 0.000 (0.004)	Loss 0.0414 (0.0413)	Acc@1 98.438 (98.582)	Acc@5 100.000 (100.000)
Epoch: [127][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0424 (0.0450)	Acc@1 98.438 (98.398)	Acc@5 100.000 (99.997)
Epoch: [127][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0314 (0.0458)	Acc@1 99.219 (98.397)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 92.16265036090309
test acc: 91.83
Epoche: [128/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [128][0/196]	Time 0.173 (0.173)	Data 0.203 (0.203)	Loss 0.0261 (0.0261)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [128][64/196]	Time 0.122 (0.122)	Data 0.000 (0.003)	Loss 0.0244 (0.0366)	Acc@1 99.219 (98.816)	Acc@5 100.000 (100.000)
Epoch: [128][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.0433 (0.0422)	Acc@1 98.438 (98.580)	Acc@5 100.000 (99.994)
Epoch: [128][192/196]	Time 0.122 (0.121)	Data 0.000 (0.001)	Loss 0.0443 (0.0430)	Acc@1 98.828 (98.563)	Acc@5 100.000 (99.992)
after train
n1: 30 for:
wAcc: 92.14697150958615
test acc: 92.03
Epoche: [129/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [129][0/196]	Time 0.178 (0.178)	Data 0.189 (0.189)	Loss 0.0228 (0.0228)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [129][64/196]	Time 0.122 (0.122)	Data 0.000 (0.003)	Loss 0.0559 (0.0412)	Acc@1 98.438 (98.708)	Acc@5 100.000 (99.994)
Epoch: [129][128/196]	Time 0.113 (0.121)	Data 0.000 (0.002)	Loss 0.0905 (0.0455)	Acc@1 96.875 (98.486)	Acc@5 100.000 (99.994)
Epoch: [129][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0421 (0.0473)	Acc@1 98.047 (98.401)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 92.14231619172544
test acc: 92.12
Epoche: [130/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [130][0/196]	Time 0.178 (0.178)	Data 0.221 (0.221)	Loss 0.0243 (0.0243)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [130][64/196]	Time 0.115 (0.123)	Data 0.000 (0.004)	Loss 0.0687 (0.0465)	Acc@1 97.266 (98.564)	Acc@5 100.000 (100.000)
Epoch: [130][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.0464 (0.0459)	Acc@1 98.828 (98.540)	Acc@5 100.000 (100.000)
Epoch: [130][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.0394 (0.0471)	Acc@1 98.828 (98.506)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.16545190215189
test acc: 91.69
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [131/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [131][0/196]	Time 0.154 (0.154)	Data 0.226 (0.226)	Loss 0.0340 (0.0340)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [131][64/196]	Time 0.116 (0.121)	Data 0.000 (0.004)	Loss 0.0149 (0.0359)	Acc@1 100.000 (98.822)	Acc@5 100.000 (100.000)
Epoch: [131][128/196]	Time 0.135 (0.122)	Data 0.000 (0.002)	Loss 0.0377 (0.0405)	Acc@1 98.438 (98.662)	Acc@5 100.000 (99.994)
Epoch: [131][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.0467 (0.0420)	Acc@1 98.438 (98.630)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 92.11020212115275
test acc: 91.79
Epoche: [132/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [132][0/196]	Time 0.186 (0.186)	Data 0.198 (0.198)	Loss 0.0911 (0.0911)	Acc@1 96.875 (96.875)	Acc@5 100.000 (100.000)
Epoch: [132][64/196]	Time 0.127 (0.123)	Data 0.000 (0.003)	Loss 0.0218 (0.0448)	Acc@1 100.000 (98.612)	Acc@5 100.000 (100.000)
Epoch: [132][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0312 (0.0447)	Acc@1 98.828 (98.556)	Acc@5 100.000 (100.000)
Epoch: [132][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.0708 (0.0456)	Acc@1 97.266 (98.492)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.09821761322263
test acc: 91.57
Epoche: [133/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [133][0/196]	Time 0.160 (0.160)	Data 0.238 (0.238)	Loss 0.0602 (0.0602)	Acc@1 97.656 (97.656)	Acc@5 100.000 (100.000)
Epoch: [133][64/196]	Time 0.124 (0.122)	Data 0.000 (0.004)	Loss 0.0420 (0.0463)	Acc@1 98.828 (98.450)	Acc@5 100.000 (100.000)
Epoch: [133][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.0315 (0.0456)	Acc@1 98.828 (98.453)	Acc@5 100.000 (99.997)
Epoch: [133][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.0524 (0.0484)	Acc@1 98.438 (98.369)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 92.0626934419584
test acc: 91.75
Epoche: [134/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [134][0/196]	Time 0.157 (0.157)	Data 0.226 (0.226)	Loss 0.0318 (0.0318)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [134][64/196]	Time 0.119 (0.122)	Data 0.000 (0.004)	Loss 0.0465 (0.0447)	Acc@1 98.828 (98.510)	Acc@5 100.000 (99.994)
Epoch: [134][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.0236 (0.0458)	Acc@1 99.219 (98.450)	Acc@5 100.000 (99.997)
Epoch: [134][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.0782 (0.0485)	Acc@1 97.656 (98.344)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 92.03384597807492
test acc: 91.19
Epoche: [135/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [135][0/196]	Time 0.176 (0.176)	Data 0.207 (0.207)	Loss 0.0515 (0.0515)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [135][64/196]	Time 0.119 (0.122)	Data 0.000 (0.003)	Loss 0.0299 (0.0495)	Acc@1 99.219 (98.317)	Acc@5 100.000 (100.000)
Epoch: [135][128/196]	Time 0.129 (0.122)	Data 0.000 (0.002)	Loss 0.0318 (0.0482)	Acc@1 98.828 (98.407)	Acc@5 100.000 (100.000)
Epoch: [135][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.0657 (0.0492)	Acc@1 97.266 (98.355)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.99096922664953
test acc: 91.47
Epoche: [136/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [136][0/196]	Time 0.180 (0.180)	Data 0.206 (0.206)	Loss 0.0685 (0.0685)	Acc@1 97.266 (97.266)	Acc@5 100.000 (100.000)
Epoch: [136][64/196]	Time 0.133 (0.122)	Data 0.000 (0.003)	Loss 0.0605 (0.0493)	Acc@1 98.047 (98.438)	Acc@5 100.000 (100.000)
Epoch: [136][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.0194 (0.0487)	Acc@1 99.219 (98.462)	Acc@5 100.000 (99.997)
Epoch: [136][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0486 (0.0503)	Acc@1 98.828 (98.371)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 91.97615131124276
test acc: 91.45
Epoche: [137/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [137][0/196]	Time 0.179 (0.179)	Data 0.239 (0.239)	Loss 0.0267 (0.0267)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [137][64/196]	Time 0.135 (0.123)	Data 0.000 (0.004)	Loss 0.0787 (0.0460)	Acc@1 97.656 (98.522)	Acc@5 100.000 (100.000)
Epoch: [137][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.0334 (0.0455)	Acc@1 98.828 (98.534)	Acc@5 100.000 (100.000)
Epoch: [137][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.0598 (0.0465)	Acc@1 98.047 (98.504)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.91473936947996
test acc: 91.88
Epoche: [138/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [138][0/196]	Time 0.172 (0.172)	Data 0.196 (0.196)	Loss 0.0496 (0.0496)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [138][64/196]	Time 0.121 (0.122)	Data 0.000 (0.003)	Loss 0.0272 (0.0448)	Acc@1 99.219 (98.630)	Acc@5 100.000 (100.000)
Epoch: [138][128/196]	Time 0.114 (0.121)	Data 0.000 (0.002)	Loss 0.0503 (0.0439)	Acc@1 98.828 (98.601)	Acc@5 100.000 (100.000)
Epoch: [138][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0614 (0.0473)	Acc@1 98.828 (98.438)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 91.86912965266323
test acc: 91.47
Epoche: [139/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [139][0/196]	Time 0.170 (0.170)	Data 0.224 (0.224)	Loss 0.0297 (0.0297)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [139][64/196]	Time 0.115 (0.122)	Data 0.000 (0.004)	Loss 0.0930 (0.0526)	Acc@1 97.266 (98.149)	Acc@5 100.000 (100.000)
Epoch: [139][128/196]	Time 0.117 (0.121)	Data 0.000 (0.002)	Loss 0.0800 (0.0514)	Acc@1 96.875 (98.253)	Acc@5 100.000 (99.997)
Epoch: [139][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.0377 (0.0516)	Acc@1 98.438 (98.245)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.86650920165027
test acc: 91.23
Epoche: [140/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [140][0/196]	Time 0.158 (0.158)	Data 0.233 (0.233)	Loss 0.0255 (0.0255)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [140][64/196]	Time 0.124 (0.121)	Data 0.000 (0.004)	Loss 0.0373 (0.0478)	Acc@1 98.828 (98.456)	Acc@5 100.000 (100.000)
Epoch: [140][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.0972 (0.0461)	Acc@1 96.875 (98.471)	Acc@5 100.000 (100.000)
Epoch: [140][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0398 (0.0481)	Acc@1 98.438 (98.395)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.79797739599026
test acc: 92.12
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [141/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [141][0/196]	Time 0.142 (0.142)	Data 0.203 (0.203)	Loss 0.0312 (0.0312)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [141][64/196]	Time 0.114 (0.119)	Data 0.000 (0.003)	Loss 0.0532 (0.0421)	Acc@1 97.656 (98.612)	Acc@5 100.000 (100.000)
Epoch: [141][128/196]	Time 0.122 (0.120)	Data 0.000 (0.002)	Loss 0.0458 (0.0452)	Acc@1 98.828 (98.501)	Acc@5 100.000 (100.000)
Epoch: [141][192/196]	Time 0.117 (0.120)	Data 0.000 (0.001)	Loss 0.0555 (0.0470)	Acc@1 97.656 (98.417)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.85344782160014
test acc: 91.69
Epoche: [142/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [142][0/196]	Time 0.174 (0.174)	Data 0.196 (0.196)	Loss 0.0413 (0.0413)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [142][64/196]	Time 0.117 (0.123)	Data 0.000 (0.003)	Loss 0.0485 (0.0449)	Acc@1 98.047 (98.588)	Acc@5 100.000 (99.994)
Epoch: [142][128/196]	Time 0.123 (0.123)	Data 0.000 (0.002)	Loss 0.0622 (0.0479)	Acc@1 98.438 (98.486)	Acc@5 100.000 (99.994)
Epoch: [142][192/196]	Time 0.114 (0.122)	Data 0.000 (0.001)	Loss 0.0857 (0.0485)	Acc@1 96.875 (98.431)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.84723964756905
test acc: 91.68
Epoche: [143/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [143][0/196]	Time 0.174 (0.174)	Data 0.192 (0.192)	Loss 0.0359 (0.0359)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [143][64/196]	Time 0.122 (0.121)	Data 0.000 (0.003)	Loss 0.0550 (0.0522)	Acc@1 98.438 (98.341)	Acc@5 100.000 (100.000)
Epoch: [143][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.0345 (0.0501)	Acc@1 99.219 (98.395)	Acc@5 100.000 (99.997)
Epoch: [143][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.0270 (0.0499)	Acc@1 99.609 (98.377)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.85813422647364
test acc: 91.73
Epoche: [144/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [144][0/196]	Time 0.158 (0.158)	Data 0.210 (0.210)	Loss 0.0415 (0.0415)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [144][64/196]	Time 0.124 (0.123)	Data 0.000 (0.003)	Loss 0.0429 (0.0484)	Acc@1 98.047 (98.462)	Acc@5 100.000 (100.000)
Epoch: [144][128/196]	Time 0.118 (0.123)	Data 0.000 (0.002)	Loss 0.0883 (0.0502)	Acc@1 96.484 (98.353)	Acc@5 100.000 (100.000)
Epoch: [144][192/196]	Time 0.130 (0.122)	Data 0.000 (0.001)	Loss 0.0333 (0.0498)	Acc@1 99.219 (98.352)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.79927095714997
test acc: 91.98
Epoche: [145/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [145][0/196]	Time 0.186 (0.186)	Data 0.203 (0.203)	Loss 0.0472 (0.0472)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [145][64/196]	Time 0.125 (0.123)	Data 0.000 (0.003)	Loss 0.0261 (0.0516)	Acc@1 100.000 (98.239)	Acc@5 100.000 (99.994)
Epoch: [145][128/196]	Time 0.114 (0.123)	Data 0.000 (0.002)	Loss 0.0214 (0.0487)	Acc@1 99.609 (98.407)	Acc@5 100.000 (99.997)
Epoch: [145][192/196]	Time 0.124 (0.122)	Data 0.000 (0.001)	Loss 0.0201 (0.0524)	Acc@1 99.609 (98.267)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.80659404868109
test acc: 90.49
Epoche: [146/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [146][0/196]	Time 0.177 (0.177)	Data 0.198 (0.198)	Loss 0.0235 (0.0235)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [146][64/196]	Time 0.118 (0.122)	Data 0.000 (0.003)	Loss 0.0670 (0.0439)	Acc@1 97.656 (98.636)	Acc@5 100.000 (100.000)
Epoch: [146][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.0277 (0.0442)	Acc@1 99.219 (98.604)	Acc@5 100.000 (100.000)
Epoch: [146][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.0484 (0.0452)	Acc@1 98.438 (98.537)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.68551210784257
test acc: 91.48
Epoche: [147/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [147][0/196]	Time 0.177 (0.177)	Data 0.198 (0.198)	Loss 0.0330 (0.0330)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [147][64/196]	Time 0.125 (0.123)	Data 0.000 (0.003)	Loss 0.0619 (0.0455)	Acc@1 97.656 (98.552)	Acc@5 100.000 (100.000)
Epoch: [147][128/196]	Time 0.148 (0.122)	Data 0.000 (0.002)	Loss 0.0396 (0.0477)	Acc@1 98.828 (98.465)	Acc@5 100.000 (99.997)
Epoch: [147][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0698 (0.0467)	Acc@1 96.875 (98.466)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.68237257118231
test acc: 91.25
Epoche: [148/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [148][0/196]	Time 0.181 (0.181)	Data 0.214 (0.214)	Loss 0.0124 (0.0124)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [148][64/196]	Time 0.119 (0.122)	Data 0.000 (0.004)	Loss 0.0614 (0.0522)	Acc@1 98.047 (98.179)	Acc@5 100.000 (100.000)
Epoch: [148][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0528 (0.0532)	Acc@1 98.438 (98.198)	Acc@5 100.000 (100.000)
Epoch: [148][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.0641 (0.0541)	Acc@1 97.656 (98.174)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.58075117239599
test acc: 91.18
Epoche: [149/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [149][0/196]	Time 0.167 (0.167)	Data 0.229 (0.229)	Loss 0.0394 (0.0394)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [149][64/196]	Time 0.137 (0.124)	Data 0.000 (0.004)	Loss 0.0496 (0.0489)	Acc@1 98.828 (98.383)	Acc@5 100.000 (100.000)
Epoch: [149][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.0262 (0.0482)	Acc@1 99.609 (98.401)	Acc@5 100.000 (99.997)
Epoch: [149][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0411 (0.0493)	Acc@1 98.438 (98.346)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 91.62862265224177
test acc: 91.86
Epoche: [150/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [150][0/196]	Time 0.204 (0.204)	Data 0.200 (0.200)	Loss 0.0385 (0.0385)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [150][64/196]	Time 0.122 (0.123)	Data 0.000 (0.003)	Loss 0.0318 (0.0359)	Acc@1 99.219 (98.888)	Acc@5 100.000 (99.994)
Epoch: [150][128/196]	Time 0.121 (0.123)	Data 0.000 (0.002)	Loss 0.0292 (0.0326)	Acc@1 99.609 (99.028)	Acc@5 100.000 (99.997)
Epoch: [150][192/196]	Time 0.118 (0.123)	Data 0.000 (0.001)	Loss 0.0242 (0.0301)	Acc@1 99.219 (99.105)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.62620283619576
test acc: 92.82
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [151/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [151][0/196]	Time 0.157 (0.157)	Data 0.229 (0.229)	Loss 0.0107 (0.0107)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [151][64/196]	Time 0.115 (0.121)	Data 0.000 (0.004)	Loss 0.0214 (0.0214)	Acc@1 99.609 (99.423)	Acc@5 100.000 (100.000)
Epoch: [151][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.0146 (0.0220)	Acc@1 99.219 (99.419)	Acc@5 100.000 (100.000)
Epoch: [151][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.0131 (0.0219)	Acc@1 100.000 (99.439)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.76104663095123
test acc: 93.07
Epoche: [152/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [152][0/196]	Time 0.155 (0.155)	Data 0.188 (0.188)	Loss 0.0124 (0.0124)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [152][64/196]	Time 0.118 (0.122)	Data 0.000 (0.003)	Loss 0.0128 (0.0188)	Acc@1 99.609 (99.531)	Acc@5 100.000 (100.000)
Epoch: [152][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.0222 (0.0183)	Acc@1 99.609 (99.555)	Acc@5 100.000 (100.000)
Epoch: [152][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.0293 (0.0191)	Acc@1 98.828 (99.506)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.75731268548783
test acc: 93.13
Epoche: [153/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [153][0/196]	Time 0.150 (0.150)	Data 0.231 (0.231)	Loss 0.0238 (0.0238)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [153][64/196]	Time 0.120 (0.122)	Data 0.000 (0.004)	Loss 0.0257 (0.0188)	Acc@1 99.219 (99.531)	Acc@5 100.000 (100.000)
Epoch: [153][128/196]	Time 0.115 (0.123)	Data 0.000 (0.002)	Loss 0.0108 (0.0184)	Acc@1 100.000 (99.534)	Acc@5 100.000 (99.997)
Epoch: [153][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0040 (0.0181)	Acc@1 100.000 (99.537)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.86466615983343
test acc: 93.07
Epoche: [154/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [154][0/196]	Time 0.152 (0.152)	Data 0.210 (0.210)	Loss 0.0232 (0.0232)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [154][64/196]	Time 0.123 (0.123)	Data 0.000 (0.003)	Loss 0.0133 (0.0165)	Acc@1 100.000 (99.591)	Acc@5 100.000 (100.000)
Epoch: [154][128/196]	Time 0.120 (0.123)	Data 0.000 (0.002)	Loss 0.0138 (0.0162)	Acc@1 100.000 (99.600)	Acc@5 100.000 (100.000)
Epoch: [154][192/196]	Time 0.120 (0.123)	Data 0.000 (0.001)	Loss 0.0174 (0.0161)	Acc@1 99.609 (99.613)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.99736302514486
test acc: 93.09
Epoche: [155/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [155][0/196]	Time 0.184 (0.184)	Data 0.220 (0.220)	Loss 0.0299 (0.0299)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [155][64/196]	Time 0.120 (0.123)	Data 0.000 (0.004)	Loss 0.0160 (0.0159)	Acc@1 99.609 (99.573)	Acc@5 100.000 (100.000)
Epoch: [155][128/196]	Time 0.118 (0.123)	Data 0.000 (0.002)	Loss 0.0126 (0.0156)	Acc@1 100.000 (99.612)	Acc@5 100.000 (99.997)
Epoch: [155][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.0205 (0.0150)	Acc@1 99.609 (99.642)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 92.07363819548974
test acc: 93.13
Epoche: [156/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [156][0/196]	Time 0.182 (0.182)	Data 0.200 (0.200)	Loss 0.0037 (0.0037)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [156][64/196]	Time 0.118 (0.124)	Data 0.000 (0.003)	Loss 0.0082 (0.0157)	Acc@1 100.000 (99.639)	Acc@5 100.000 (100.000)
Epoch: [156][128/196]	Time 0.120 (0.123)	Data 0.000 (0.002)	Loss 0.0133 (0.0142)	Acc@1 99.609 (99.685)	Acc@5 100.000 (100.000)
Epoch: [156][192/196]	Time 0.126 (0.122)	Data 0.000 (0.001)	Loss 0.0197 (0.0141)	Acc@1 99.609 (99.698)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.08830279379441
test acc: 93.25
Epoche: [157/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [157][0/196]	Time 0.178 (0.178)	Data 0.196 (0.196)	Loss 0.0201 (0.0201)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [157][64/196]	Time 0.118 (0.122)	Data 0.000 (0.003)	Loss 0.0127 (0.0139)	Acc@1 99.609 (99.688)	Acc@5 100.000 (100.000)
Epoch: [157][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.0177 (0.0140)	Acc@1 99.609 (99.697)	Acc@5 100.000 (100.000)
Epoch: [157][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.0177 (0.0143)	Acc@1 99.219 (99.674)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.19216331209496
test acc: 93.28
Epoche: [158/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [158][0/196]	Time 0.180 (0.180)	Data 0.195 (0.195)	Loss 0.0226 (0.0226)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [158][64/196]	Time 0.119 (0.122)	Data 0.000 (0.003)	Loss 0.0188 (0.0144)	Acc@1 98.828 (99.663)	Acc@5 100.000 (100.000)
Epoch: [158][128/196]	Time 0.138 (0.122)	Data 0.000 (0.002)	Loss 0.0158 (0.0133)	Acc@1 99.609 (99.709)	Acc@5 100.000 (100.000)
Epoch: [158][192/196]	Time 0.132 (0.122)	Data 0.000 (0.001)	Loss 0.0097 (0.0131)	Acc@1 100.000 (99.721)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.27535686436973
test acc: 93.2
Epoche: [159/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [159][0/196]	Time 0.194 (0.194)	Data 0.228 (0.228)	Loss 0.0186 (0.0186)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [159][64/196]	Time 0.127 (0.123)	Data 0.000 (0.004)	Loss 0.0083 (0.0133)	Acc@1 100.000 (99.688)	Acc@5 100.000 (100.000)
Epoch: [159][128/196]	Time 0.148 (0.123)	Data 0.000 (0.002)	Loss 0.0159 (0.0124)	Acc@1 99.219 (99.734)	Acc@5 100.000 (100.000)
Epoch: [159][192/196]	Time 0.123 (0.122)	Data 0.000 (0.001)	Loss 0.0164 (0.0126)	Acc@1 99.609 (99.715)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.27284979060241
test acc: 93.23
Epoche: [160/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [160][0/196]	Time 0.181 (0.181)	Data 0.215 (0.215)	Loss 0.0205 (0.0205)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [160][64/196]	Time 0.121 (0.123)	Data 0.000 (0.004)	Loss 0.0157 (0.0131)	Acc@1 99.609 (99.748)	Acc@5 100.000 (100.000)
Epoch: [160][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.0068 (0.0123)	Acc@1 100.000 (99.749)	Acc@5 100.000 (100.000)
Epoch: [160][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0042 (0.0125)	Acc@1 100.000 (99.727)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.34905757273944
test acc: 93.35
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [161/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [161][0/196]	Time 0.163 (0.163)	Data 0.199 (0.199)	Loss 0.0088 (0.0088)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [161][64/196]	Time 0.122 (0.121)	Data 0.000 (0.003)	Loss 0.0044 (0.0118)	Acc@1 100.000 (99.778)	Acc@5 100.000 (100.000)
Epoch: [161][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.0180 (0.0121)	Acc@1 99.609 (99.746)	Acc@5 100.000 (99.997)
Epoch: [161][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.0144 (0.0120)	Acc@1 100.000 (99.749)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 92.381830960937
test acc: 93.19
Epoche: [162/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [162][0/196]	Time 0.173 (0.173)	Data 0.232 (0.232)	Loss 0.0085 (0.0085)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [162][64/196]	Time 0.124 (0.122)	Data 0.000 (0.004)	Loss 0.0067 (0.0108)	Acc@1 100.000 (99.826)	Acc@5 100.000 (100.000)
Epoch: [162][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.0060 (0.0108)	Acc@1 100.000 (99.809)	Acc@5 100.000 (100.000)
Epoch: [162][192/196]	Time 0.116 (0.121)	Data 0.000 (0.001)	Loss 0.0095 (0.0111)	Acc@1 100.000 (99.796)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.45999197924479
test acc: 93.35
Epoche: [163/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [163][0/196]	Time 0.181 (0.181)	Data 0.194 (0.194)	Loss 0.0069 (0.0069)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [163][64/196]	Time 0.121 (0.122)	Data 0.000 (0.003)	Loss 0.0099 (0.0113)	Acc@1 100.000 (99.760)	Acc@5 100.000 (100.000)
Epoch: [163][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.0056 (0.0115)	Acc@1 100.000 (99.749)	Acc@5 100.000 (100.000)
Epoch: [163][192/196]	Time 0.131 (0.121)	Data 0.000 (0.001)	Loss 0.0096 (0.0114)	Acc@1 100.000 (99.767)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.43645737949556
test acc: 93.34
Epoche: [164/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [164][0/196]	Time 0.172 (0.172)	Data 0.221 (0.221)	Loss 0.0084 (0.0084)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [164][64/196]	Time 0.121 (0.122)	Data 0.000 (0.004)	Loss 0.0131 (0.0109)	Acc@1 99.609 (99.802)	Acc@5 100.000 (100.000)
Epoch: [164][128/196]	Time 0.120 (0.123)	Data 0.000 (0.002)	Loss 0.0048 (0.0109)	Acc@1 100.000 (99.779)	Acc@5 100.000 (100.000)
Epoch: [164][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0044 (0.0109)	Acc@1 100.000 (99.775)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.5352276878142
test acc: 93.3
Epoche: [165/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [165][0/196]	Time 0.181 (0.181)	Data 0.229 (0.229)	Loss 0.0052 (0.0052)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [165][64/196]	Time 0.119 (0.122)	Data 0.000 (0.004)	Loss 0.0070 (0.0112)	Acc@1 100.000 (99.796)	Acc@5 100.000 (100.000)
Epoch: [165][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0134 (0.0108)	Acc@1 99.609 (99.788)	Acc@5 100.000 (100.000)
Epoch: [165][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0134 (0.0106)	Acc@1 99.609 (99.790)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.5816766058426
test acc: 93.15
Epoche: [166/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [166][0/196]	Time 0.154 (0.154)	Data 0.205 (0.205)	Loss 0.0125 (0.0125)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [166][64/196]	Time 0.117 (0.120)	Data 0.000 (0.003)	Loss 0.0136 (0.0103)	Acc@1 99.219 (99.772)	Acc@5 100.000 (100.000)
Epoch: [166][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.0091 (0.0102)	Acc@1 100.000 (99.773)	Acc@5 100.000 (100.000)
Epoch: [166][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.0093 (0.0102)	Acc@1 99.609 (99.775)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.6805041008866
test acc: 93.25
Epoche: [167/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [167][0/196]	Time 0.174 (0.174)	Data 0.216 (0.216)	Loss 0.0073 (0.0073)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [167][64/196]	Time 0.117 (0.122)	Data 0.000 (0.004)	Loss 0.0138 (0.0097)	Acc@1 99.219 (99.808)	Acc@5 100.000 (100.000)
Epoch: [167][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.0250 (0.0102)	Acc@1 99.219 (99.797)	Acc@5 100.000 (100.000)
Epoch: [167][192/196]	Time 0.124 (0.122)	Data 0.000 (0.001)	Loss 0.0243 (0.0104)	Acc@1 99.219 (99.781)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.65797553332754
test acc: 93.17
Epoche: [168/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [168][0/196]	Time 0.189 (0.189)	Data 0.201 (0.201)	Loss 0.0168 (0.0168)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [168][64/196]	Time 0.119 (0.122)	Data 0.000 (0.003)	Loss 0.0116 (0.0106)	Acc@1 99.609 (99.748)	Acc@5 100.000 (100.000)
Epoch: [168][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.0101 (0.0103)	Acc@1 100.000 (99.788)	Acc@5 100.000 (100.000)
Epoch: [168][192/196]	Time 0.124 (0.121)	Data 0.000 (0.001)	Loss 0.0058 (0.0103)	Acc@1 100.000 (99.796)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.65631459614875
test acc: 93.31
Epoche: [169/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [169][0/196]	Time 0.189 (0.189)	Data 0.237 (0.237)	Loss 0.0060 (0.0060)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [169][64/196]	Time 0.124 (0.123)	Data 0.000 (0.004)	Loss 0.0055 (0.0096)	Acc@1 99.609 (99.820)	Acc@5 100.000 (100.000)
Epoch: [169][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.0059 (0.0099)	Acc@1 100.000 (99.812)	Acc@5 100.000 (100.000)
Epoch: [169][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0364 (0.0100)	Acc@1 99.219 (99.810)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.82714763395633
test acc: 93.25
Epoche: [170/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [170][0/196]	Time 0.182 (0.182)	Data 0.239 (0.239)	Loss 0.0022 (0.0022)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [170][64/196]	Time 0.120 (0.123)	Data 0.000 (0.004)	Loss 0.0038 (0.0098)	Acc@1 100.000 (99.772)	Acc@5 100.000 (100.000)
Epoch: [170][128/196]	Time 0.120 (0.123)	Data 0.000 (0.002)	Loss 0.0077 (0.0097)	Acc@1 100.000 (99.797)	Acc@5 100.000 (100.000)
Epoch: [170][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0055 (0.0096)	Acc@1 100.000 (99.812)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.79226696215115
test acc: 93.27
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [171/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [171][0/196]	Time 0.174 (0.174)	Data 0.209 (0.209)	Loss 0.0075 (0.0075)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [171][64/196]	Time 0.122 (0.122)	Data 0.000 (0.003)	Loss 0.0095 (0.0088)	Acc@1 99.609 (99.874)	Acc@5 100.000 (100.000)
Epoch: [171][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0051 (0.0094)	Acc@1 100.000 (99.852)	Acc@5 100.000 (100.000)
Epoch: [171][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0105 (0.0093)	Acc@1 100.000 (99.840)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.82164283289154
test acc: 93.12
Epoche: [172/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [172][0/196]	Time 0.176 (0.176)	Data 0.220 (0.220)	Loss 0.0056 (0.0056)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [172][64/196]	Time 0.118 (0.122)	Data 0.000 (0.004)	Loss 0.0097 (0.0092)	Acc@1 99.609 (99.838)	Acc@5 100.000 (100.000)
Epoch: [172][128/196]	Time 0.126 (0.122)	Data 0.000 (0.002)	Loss 0.0102 (0.0096)	Acc@1 100.000 (99.818)	Acc@5 100.000 (100.000)
Epoch: [172][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0051 (0.0095)	Acc@1 100.000 (99.824)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.84811976024457
test acc: 93.2
Epoche: [173/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [173][0/196]	Time 0.165 (0.165)	Data 0.201 (0.201)	Loss 0.0059 (0.0059)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [173][64/196]	Time 0.125 (0.121)	Data 0.000 (0.003)	Loss 0.0034 (0.0088)	Acc@1 100.000 (99.868)	Acc@5 100.000 (100.000)
Epoch: [173][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0066 (0.0088)	Acc@1 100.000 (99.855)	Acc@5 100.000 (100.000)
Epoch: [173][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.0066 (0.0091)	Acc@1 100.000 (99.852)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.90696210050729
test acc: 93.19
Epoche: [174/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [174][0/196]	Time 0.165 (0.165)	Data 0.226 (0.226)	Loss 0.0070 (0.0070)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [174][64/196]	Time 0.123 (0.123)	Data 0.000 (0.004)	Loss 0.0048 (0.0087)	Acc@1 100.000 (99.826)	Acc@5 100.000 (100.000)
Epoch: [174][128/196]	Time 0.126 (0.123)	Data 0.000 (0.002)	Loss 0.0075 (0.0092)	Acc@1 100.000 (99.830)	Acc@5 100.000 (100.000)
Epoch: [174][192/196]	Time 0.125 (0.122)	Data 0.000 (0.001)	Loss 0.0042 (0.0091)	Acc@1 100.000 (99.842)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.70982588986001
test acc: 93.17
Epoche: [175/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [175][0/196]	Time 0.183 (0.183)	Data 0.200 (0.200)	Loss 0.0054 (0.0054)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [175][64/196]	Time 0.152 (0.123)	Data 0.000 (0.003)	Loss 0.0079 (0.0076)	Acc@1 99.609 (99.874)	Acc@5 100.000 (100.000)
Epoch: [175][128/196]	Time 0.119 (0.123)	Data 0.000 (0.002)	Loss 0.0042 (0.0085)	Acc@1 100.000 (99.830)	Acc@5 100.000 (100.000)
Epoch: [175][192/196]	Time 0.116 (0.123)	Data 0.000 (0.001)	Loss 0.0127 (0.0089)	Acc@1 99.609 (99.814)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.8826304837976
test acc: 93.2
Epoche: [176/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [176][0/196]	Time 0.181 (0.181)	Data 0.215 (0.215)	Loss 0.0056 (0.0056)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [176][64/196]	Time 0.136 (0.123)	Data 0.000 (0.004)	Loss 0.0080 (0.0081)	Acc@1 100.000 (99.898)	Acc@5 100.000 (100.000)
Epoch: [176][128/196]	Time 0.117 (0.123)	Data 0.000 (0.002)	Loss 0.0118 (0.0081)	Acc@1 99.609 (99.888)	Acc@5 100.000 (100.000)
Epoch: [176][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.0063 (0.0082)	Acc@1 100.000 (99.877)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.86985677828997
test acc: 93.27
Epoche: [177/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [177][0/196]	Time 0.174 (0.174)	Data 0.204 (0.204)	Loss 0.0063 (0.0063)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [177][64/196]	Time 0.125 (0.123)	Data 0.000 (0.003)	Loss 0.0081 (0.0093)	Acc@1 100.000 (99.832)	Acc@5 100.000 (100.000)
Epoch: [177][128/196]	Time 0.118 (0.123)	Data 0.000 (0.002)	Loss 0.0055 (0.0092)	Acc@1 100.000 (99.836)	Acc@5 100.000 (100.000)
Epoch: [177][192/196]	Time 0.130 (0.123)	Data 0.000 (0.001)	Loss 0.0060 (0.0092)	Acc@1 100.000 (99.818)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.88555316100619
test acc: 93.26
Epoche: [178/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [178][0/196]	Time 0.157 (0.157)	Data 0.226 (0.226)	Loss 0.0042 (0.0042)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [178][64/196]	Time 0.125 (0.124)	Data 0.000 (0.004)	Loss 0.0142 (0.0076)	Acc@1 99.609 (99.892)	Acc@5 100.000 (100.000)
Epoch: [178][128/196]	Time 0.119 (0.124)	Data 0.000 (0.002)	Loss 0.0039 (0.0079)	Acc@1 100.000 (99.870)	Acc@5 100.000 (100.000)
Epoch: [178][192/196]	Time 0.120 (0.123)	Data 0.000 (0.001)	Loss 0.0023 (0.0082)	Acc@1 100.000 (99.858)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 93.00801288051161
test acc: 93.34
Epoche: [179/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [179][0/196]	Time 0.167 (0.167)	Data 0.223 (0.223)	Loss 0.0116 (0.0116)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [179][64/196]	Time 0.118 (0.122)	Data 0.000 (0.004)	Loss 0.0043 (0.0080)	Acc@1 100.000 (99.892)	Acc@5 100.000 (100.000)
Epoch: [179][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.0052 (0.0083)	Acc@1 100.000 (99.876)	Acc@5 100.000 (100.000)
Epoch: [179][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0025 (0.0085)	Acc@1 100.000 (99.866)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 93.16821049930279
test acc: 93.23
Epoche: [180/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [180][0/196]	Time 0.156 (0.156)	Data 0.233 (0.233)	Loss 0.0071 (0.0071)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [180][64/196]	Time 0.118 (0.122)	Data 0.000 (0.004)	Loss 0.0089 (0.0077)	Acc@1 100.000 (99.880)	Acc@5 100.000 (100.000)
Epoch: [180][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.0115 (0.0078)	Acc@1 100.000 (99.873)	Acc@5 100.000 (100.000)
Epoch: [180][192/196]	Time 0.124 (0.121)	Data 0.000 (0.001)	Loss 0.0104 (0.0081)	Acc@1 99.609 (99.858)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 93.20833730801333
test acc: 93.34
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Max memory: 113.6800768
 24.053s  