no display found. Using non-interactive Agg backend
[5, 5, 5]
[16, 32, 64]
Pytorch Training main.py; workers: 6; numOfStages: 3; layerinBlock: 2;widthofFirstLayer: 16; Epochen: 180; reset: False; start epoche: 1; test: True pathtoModell: ./output/experimente4/prune_reconf10_3/model.nn; checkpoint: ./output/experimente4/prune_reconf10_3; saveModell: True; LR: 0.1
random number: 6700
Files already downloaded and verified

width: 16
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (3, 3
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (4, 3
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (5, 3
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (6, 3
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (7, 3
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
width: 32
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
conv gefunden
(i,j): (9, 0
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
(i,j): (10, 3
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
(i,j): (11, 3
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
(i,j): (12, 3
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
(i,j): (13, 3
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
width: 64
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 16
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 32
conv gefunden
(i,j): (15, 0
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
conv gefunden
(i,j): (16, 3
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
conv gefunden
(i,j): (17, 3
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
conv gefunden
(i,j): (18, 3
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
width Module: 64
conv gefunden
(i,j): (19, 3
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
stagesI: {16: [(3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)], 32: [(10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)], 64: [(16, 0), (17, 0), (18, 0), (19, 0), (21, None)]}
stagesO: {16: [(0, None), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3)], 32: [(8, 3), (9, 0), (10, 3), (11, 3), (12, 3), (13, 3)], 64: [(14, 3), (15, 0), (16, 3), (17, 3), (18, 3), (19, 3)]}
Modell Erstellung
N2N(
  (module_list): ModuleList(
    (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (4): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (5): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (6): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (7): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (8): Sequential(
      (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (9): Sequential(
      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (10): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (11): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (12): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (13): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (14): Sequential(
      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (15): Sequential(
      (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (16): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (17): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (18): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (19): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (20): AdaptiveAvgPool2d(output_size=(1, 1))
    (21): Linear(in_features=64, out_features=10, bias=True)
  )
  (relu): ReLU(inplace=True)
)
device count: 1
Startepoche: 1
deeper epoch: 0
Epoche: [1/180]; Lr: 0.1
batch Size 256
befor train
/home/jessica.buehler/venv/lib/python3.6/site-packages/torch/cuda/memory.py:234: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  FutureWarning)
Epoch: [1][0/196]	Time 0.164 (0.164)	Data 0.203 (0.203)	Loss 2.4411 (2.4411)	Acc@1 10.547 (10.547)	Acc@5 55.078 (55.078)
Epoch: [1][64/196]	Time 0.098 (0.104)	Data 0.000 (0.003)	Loss 1.7867 (1.9554)	Acc@1 31.641 (25.811)	Acc@5 82.812 (80.048)
Epoch: [1][128/196]	Time 0.096 (0.102)	Data 0.000 (0.002)	Loss 1.5327 (1.8145)	Acc@1 39.453 (31.144)	Acc@5 93.359 (84.239)
Epoch: [1][192/196]	Time 0.098 (0.102)	Data 0.000 (0.001)	Loss 1.3824 (1.7060)	Acc@1 52.734 (35.575)	Acc@5 92.578 (86.784)
after train
n1: 1 for:
wAcc: 38.33
test acc: 38.33
Epoche: [2/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [2][0/196]	Time 0.141 (0.141)	Data 0.210 (0.210)	Loss 1.4332 (1.4332)	Acc@1 48.828 (48.828)	Acc@5 92.578 (92.578)
Epoch: [2][64/196]	Time 0.097 (0.103)	Data 0.000 (0.003)	Loss 1.0834 (1.2955)	Acc@1 59.375 (52.740)	Acc@5 95.703 (94.135)
Epoch: [2][128/196]	Time 0.095 (0.102)	Data 0.000 (0.002)	Loss 1.1429 (1.2280)	Acc@1 60.547 (55.493)	Acc@5 96.484 (94.992)
Epoch: [2][192/196]	Time 0.100 (0.101)	Data 0.000 (0.001)	Loss 1.0443 (1.1712)	Acc@1 64.062 (57.598)	Acc@5 98.438 (95.491)
after train
n1: 2 for:
wAcc: 38.33
test acc: 57.11
Epoche: [3/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [3][0/196]	Time 0.130 (0.130)	Data 0.224 (0.224)	Loss 0.9249 (0.9249)	Acc@1 66.016 (66.016)	Acc@5 96.875 (96.875)
Epoch: [3][64/196]	Time 0.097 (0.101)	Data 0.000 (0.004)	Loss 0.8929 (0.9819)	Acc@1 67.969 (65.721)	Acc@5 98.828 (96.959)
Epoch: [3][128/196]	Time 0.111 (0.102)	Data 0.000 (0.002)	Loss 0.8792 (0.9443)	Acc@1 70.703 (66.879)	Acc@5 98.047 (97.184)
Epoch: [3][192/196]	Time 0.098 (0.102)	Data 0.000 (0.001)	Loss 0.8696 (0.9125)	Acc@1 71.484 (67.922)	Acc@5 97.266 (97.446)
after train
n1: 3 for:
wAcc: 47.72
test acc: 58.14
Epoche: [4/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [4][0/196]	Time 0.116 (0.116)	Data 0.218 (0.218)	Loss 0.9002 (0.9002)	Acc@1 68.750 (68.750)	Acc@5 98.047 (98.047)
Epoch: [4][64/196]	Time 0.098 (0.103)	Data 0.000 (0.004)	Loss 0.7760 (0.8224)	Acc@1 73.047 (70.925)	Acc@5 99.219 (97.873)
Epoch: [4][128/196]	Time 0.114 (0.103)	Data 0.000 (0.002)	Loss 0.7921 (0.7933)	Acc@1 71.094 (71.854)	Acc@5 99.219 (98.113)
Epoch: [4][192/196]	Time 0.100 (0.103)	Data 0.000 (0.001)	Loss 0.7701 (0.7799)	Acc@1 73.047 (72.567)	Acc@5 97.656 (98.146)
after train
n1: 4 for:
wAcc: 50.7612
test acc: 62.75
Epoche: [5/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [5][0/196]	Time 0.150 (0.150)	Data 0.189 (0.189)	Loss 0.7690 (0.7690)	Acc@1 72.656 (72.656)	Acc@5 97.266 (97.266)
Epoch: [5][64/196]	Time 0.101 (0.103)	Data 0.000 (0.003)	Loss 0.6829 (0.7322)	Acc@1 76.562 (74.513)	Acc@5 99.219 (98.365)
Epoch: [5][128/196]	Time 0.093 (0.102)	Data 0.000 (0.002)	Loss 0.7408 (0.7128)	Acc@1 72.656 (75.215)	Acc@5 98.438 (98.401)
Epoch: [5][192/196]	Time 0.102 (0.102)	Data 0.000 (0.001)	Loss 0.6852 (0.6979)	Acc@1 76.562 (75.769)	Acc@5 98.438 (98.421)
after train
n1: 5 for:
wAcc: 53.65444444444445
test acc: 70.84
Epoche: [6/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [6][0/196]	Time 0.154 (0.154)	Data 0.182 (0.182)	Loss 0.7271 (0.7271)	Acc@1 73.828 (73.828)	Acc@5 97.656 (97.656)
Epoch: [6][64/196]	Time 0.096 (0.103)	Data 0.000 (0.003)	Loss 0.5402 (0.6369)	Acc@1 82.031 (77.788)	Acc@5 98.828 (98.726)
Epoch: [6][128/196]	Time 0.104 (0.102)	Data 0.000 (0.002)	Loss 0.5950 (0.6384)	Acc@1 80.078 (77.731)	Acc@5 98.828 (98.746)
Epoch: [6][192/196]	Time 0.102 (0.102)	Data 0.000 (0.001)	Loss 0.5561 (0.6334)	Acc@1 80.859 (78.046)	Acc@5 99.609 (98.747)
after train
n1: 6 for:
wAcc: 57.44543523531861
test acc: 73.42
Epoche: [7/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [7][0/196]	Time 0.141 (0.141)	Data 0.195 (0.195)	Loss 0.6692 (0.6692)	Acc@1 76.953 (76.953)	Acc@5 99.219 (99.219)
Epoch: [7][64/196]	Time 0.101 (0.102)	Data 0.000 (0.003)	Loss 0.5411 (0.5979)	Acc@1 80.078 (79.585)	Acc@5 98.438 (98.876)
Epoch: [7][128/196]	Time 0.098 (0.102)	Data 0.000 (0.002)	Loss 0.6993 (0.5908)	Acc@1 78.516 (79.606)	Acc@5 98.828 (98.919)
Epoch: [7][192/196]	Time 0.096 (0.102)	Data 0.000 (0.001)	Loss 0.5664 (0.5922)	Acc@1 76.953 (79.418)	Acc@5 98.047 (98.921)
after train
n1: 7 for:
wAcc: 60.207050781250004
test acc: 74.83
Epoche: [8/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [8][0/196]	Time 0.135 (0.135)	Data 0.194 (0.194)	Loss 0.5681 (0.5681)	Acc@1 82.812 (82.812)	Acc@5 99.609 (99.609)
Epoch: [8][64/196]	Time 0.101 (0.104)	Data 0.000 (0.003)	Loss 0.5284 (0.5545)	Acc@1 80.859 (80.829)	Acc@5 100.000 (98.996)
Epoch: [8][128/196]	Time 0.100 (0.103)	Data 0.000 (0.002)	Loss 0.5616 (0.5614)	Acc@1 80.859 (80.611)	Acc@5 98.828 (98.919)
Epoch: [8][192/196]	Time 0.100 (0.102)	Data 0.000 (0.001)	Loss 0.6268 (0.5582)	Acc@1 78.516 (80.693)	Acc@5 98.047 (98.958)
after train
n1: 8 for:
wAcc: 62.22852213133725
test acc: 72.28
Epoche: [9/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [9][0/196]	Time 0.129 (0.129)	Data 0.209 (0.209)	Loss 0.4796 (0.4796)	Acc@1 84.375 (84.375)	Acc@5 99.219 (99.219)
Epoch: [9][64/196]	Time 0.099 (0.102)	Data 0.000 (0.003)	Loss 0.5467 (0.5287)	Acc@1 79.297 (81.701)	Acc@5 99.609 (99.225)
Epoch: [9][128/196]	Time 0.100 (0.103)	Data 0.000 (0.002)	Loss 0.4998 (0.5392)	Acc@1 83.594 (81.329)	Acc@5 100.000 (99.158)
Epoch: [9][192/196]	Time 0.097 (0.102)	Data 0.000 (0.001)	Loss 0.5467 (0.5323)	Acc@1 80.859 (81.612)	Acc@5 99.219 (99.201)
after train
n1: 9 for:
wAcc: 63.06391142400001
test acc: 74.43
Epoche: [10/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [10][0/196]	Time 0.144 (0.144)	Data 0.220 (0.220)	Loss 0.5075 (0.5075)	Acc@1 82.812 (82.812)	Acc@5 98.828 (98.828)
Epoch: [10][64/196]	Time 0.104 (0.104)	Data 0.000 (0.004)	Loss 0.6210 (0.5175)	Acc@1 78.906 (82.097)	Acc@5 98.438 (99.195)
Epoch: [10][128/196]	Time 0.109 (0.103)	Data 0.000 (0.002)	Loss 0.5057 (0.5199)	Acc@1 82.422 (82.037)	Acc@5 99.609 (99.119)
Epoch: [10][192/196]	Time 0.099 (0.103)	Data 0.000 (0.001)	Loss 0.5225 (0.5179)	Acc@1 82.812 (82.084)	Acc@5 98.438 (99.128)
after train
n1: 10 for:
wAcc: 64.07626003836994
test acc: 70.17
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [11/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [11][0/196]	Time 0.147 (0.147)	Data 0.201 (0.201)	Loss 0.5546 (0.5546)	Acc@1 79.297 (79.297)	Acc@5 99.219 (99.219)
Epoch: [11][64/196]	Time 0.116 (0.121)	Data 0.000 (0.003)	Loss 0.4928 (0.4865)	Acc@1 83.984 (83.371)	Acc@5 99.219 (99.159)
Epoch: [11][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.5412 (0.4989)	Acc@1 82.422 (82.794)	Acc@5 98.438 (99.179)
Epoch: [11][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.5413 (0.5009)	Acc@1 81.250 (82.705)	Acc@5 99.219 (99.166)
after train
n1: 11 for:
wAcc: 64.11069197959534
test acc: 77.04
Epoche: [12/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [12][0/196]	Time 0.151 (0.151)	Data 0.216 (0.216)	Loss 0.4043 (0.4043)	Acc@1 85.938 (85.938)	Acc@5 99.219 (99.219)
Epoch: [12][64/196]	Time 0.120 (0.121)	Data 0.000 (0.004)	Loss 0.6017 (0.4835)	Acc@1 78.516 (83.383)	Acc@5 99.609 (99.267)
Epoch: [12][128/196]	Time 0.123 (0.121)	Data 0.000 (0.002)	Loss 0.4480 (0.4793)	Acc@1 83.594 (83.482)	Acc@5 99.609 (99.276)
Epoch: [12][192/196]	Time 0.115 (0.120)	Data 0.000 (0.001)	Loss 0.5733 (0.4809)	Acc@1 79.688 (83.491)	Acc@5 98.438 (99.221)
after train
n1: 12 for:
wAcc: 65.23687541707243
test acc: 75.91
Epoche: [13/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [13][0/196]	Time 0.189 (0.189)	Data 0.187 (0.187)	Loss 0.5036 (0.5036)	Acc@1 82.422 (82.422)	Acc@5 99.609 (99.609)
Epoch: [13][64/196]	Time 0.118 (0.122)	Data 0.000 (0.003)	Loss 0.5221 (0.4778)	Acc@1 84.375 (83.564)	Acc@5 99.609 (99.219)
Epoch: [13][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.3789 (0.4687)	Acc@1 87.500 (83.785)	Acc@5 99.219 (99.243)
Epoch: [13][192/196]	Time 0.124 (0.122)	Data 0.000 (0.001)	Loss 0.5426 (0.4691)	Acc@1 82.031 (83.758)	Acc@5 99.219 (99.255)
after train
n1: 13 for:
wAcc: 65.92247274363095
test acc: 76.15
Epoche: [14/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [14][0/196]	Time 0.169 (0.169)	Data 0.186 (0.186)	Loss 0.4462 (0.4462)	Acc@1 83.203 (83.203)	Acc@5 99.609 (99.609)
Epoch: [14][64/196]	Time 0.117 (0.121)	Data 0.000 (0.003)	Loss 0.4954 (0.4370)	Acc@1 82.812 (84.880)	Acc@5 98.438 (99.405)
Epoch: [14][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.5398 (0.4497)	Acc@1 82.031 (84.420)	Acc@5 98.828 (99.361)
Epoch: [14][192/196]	Time 0.114 (0.120)	Data 0.000 (0.001)	Loss 0.4598 (0.4562)	Acc@1 84.375 (84.165)	Acc@5 98.828 (99.322)
after train
n1: 14 for:
wAcc: 66.49295724893842
test acc: 76.94
Epoche: [15/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [15][0/196]	Time 0.186 (0.186)	Data 0.206 (0.206)	Loss 0.4713 (0.4713)	Acc@1 85.156 (85.156)	Acc@5 99.219 (99.219)
Epoch: [15][64/196]	Time 0.115 (0.120)	Data 0.000 (0.003)	Loss 0.3484 (0.4646)	Acc@1 89.453 (83.990)	Acc@5 99.219 (99.315)
Epoch: [15][128/196]	Time 0.123 (0.120)	Data 0.000 (0.002)	Loss 0.4555 (0.4618)	Acc@1 84.766 (84.139)	Acc@5 99.609 (99.325)
Epoch: [15][192/196]	Time 0.119 (0.120)	Data 0.000 (0.001)	Loss 0.4813 (0.4539)	Acc@1 83.203 (84.418)	Acc@5 99.609 (99.334)
after train
n1: 15 for:
wAcc: 67.0495037989059
test acc: 79.71
Epoche: [16/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [16][0/196]	Time 0.182 (0.182)	Data 0.224 (0.224)	Loss 0.4212 (0.4212)	Acc@1 83.203 (83.203)	Acc@5 100.000 (100.000)
Epoch: [16][64/196]	Time 0.126 (0.123)	Data 0.000 (0.004)	Loss 0.4644 (0.4379)	Acc@1 83.984 (85.036)	Acc@5 98.438 (99.375)
Epoch: [16][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.4600 (0.4484)	Acc@1 83.984 (84.681)	Acc@5 99.219 (99.376)
Epoch: [16][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.4194 (0.4466)	Acc@1 88.281 (84.733)	Acc@5 99.609 (99.371)
after train
n1: 16 for:
wAcc: 67.82669036241374
test acc: 76.81
Epoche: [17/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [17][0/196]	Time 0.189 (0.189)	Data 0.185 (0.185)	Loss 0.4090 (0.4090)	Acc@1 88.281 (88.281)	Acc@5 99.609 (99.609)
Epoch: [17][64/196]	Time 0.123 (0.123)	Data 0.000 (0.003)	Loss 0.4485 (0.4311)	Acc@1 86.328 (84.868)	Acc@5 99.219 (99.363)
Epoch: [17][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.4542 (0.4318)	Acc@1 85.547 (85.099)	Acc@5 99.219 (99.376)
Epoch: [17][192/196]	Time 0.113 (0.121)	Data 0.000 (0.001)	Loss 0.4279 (0.4383)	Acc@1 85.938 (84.808)	Acc@5 98.828 (99.352)
after train
n1: 17 for:
wAcc: 68.13288627086614
test acc: 73.79
Epoche: [18/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [18][0/196]	Time 0.175 (0.175)	Data 0.205 (0.205)	Loss 0.4591 (0.4591)	Acc@1 85.156 (85.156)	Acc@5 99.219 (99.219)
Epoch: [18][64/196]	Time 0.121 (0.122)	Data 0.000 (0.003)	Loss 0.3872 (0.4120)	Acc@1 86.328 (85.938)	Acc@5 99.609 (99.417)
Epoch: [18][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.4755 (0.4213)	Acc@1 83.594 (85.592)	Acc@5 99.219 (99.340)
Epoch: [18][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.3808 (0.4206)	Acc@1 87.109 (85.575)	Acc@5 100.000 (99.362)
after train
n1: 18 for:
wAcc: 68.07647437614447
test acc: 68.16
Epoche: [19/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [19][0/196]	Time 0.164 (0.164)	Data 0.190 (0.190)	Loss 0.4732 (0.4732)	Acc@1 81.250 (81.250)	Acc@5 99.219 (99.219)
Epoch: [19][64/196]	Time 0.115 (0.121)	Data 0.000 (0.003)	Loss 0.3790 (0.4086)	Acc@1 85.156 (85.721)	Acc@5 100.000 (99.519)
Epoch: [19][128/196]	Time 0.116 (0.121)	Data 0.000 (0.002)	Loss 0.3243 (0.4101)	Acc@1 89.844 (85.795)	Acc@5 100.000 (99.455)
Epoch: [19][192/196]	Time 0.123 (0.121)	Data 0.000 (0.001)	Loss 0.4334 (0.4235)	Acc@1 83.203 (85.330)	Acc@5 99.219 (99.358)
after train
n1: 19 for:
wAcc: 67.4832520198956
test acc: 80.35
Epoche: [20/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [20][0/196]	Time 0.167 (0.167)	Data 0.220 (0.220)	Loss 0.3058 (0.3058)	Acc@1 89.453 (89.453)	Acc@5 100.000 (100.000)
Epoch: [20][64/196]	Time 0.123 (0.121)	Data 0.000 (0.004)	Loss 0.4384 (0.3997)	Acc@1 85.547 (86.034)	Acc@5 98.828 (99.453)
Epoch: [20][128/196]	Time 0.116 (0.120)	Data 0.000 (0.002)	Loss 0.3426 (0.4077)	Acc@1 88.281 (85.898)	Acc@5 99.219 (99.449)
Epoch: [20][192/196]	Time 0.120 (0.120)	Data 0.000 (0.001)	Loss 0.3775 (0.4107)	Acc@1 86.719 (85.861)	Acc@5 99.609 (99.413)
after train
n1: 20 for:
wAcc: 68.17302294864183
test acc: 79.49
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [21/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [21][0/196]	Time 0.155 (0.155)	Data 0.218 (0.218)	Loss 0.3372 (0.3372)	Acc@1 89.844 (89.844)	Acc@5 100.000 (100.000)
Epoch: [21][64/196]	Time 0.127 (0.122)	Data 0.000 (0.004)	Loss 0.3773 (0.3761)	Acc@1 88.672 (87.157)	Acc@5 99.219 (99.585)
Epoch: [21][128/196]	Time 0.129 (0.121)	Data 0.000 (0.002)	Loss 0.4376 (0.3958)	Acc@1 84.766 (86.431)	Acc@5 99.219 (99.512)
Epoch: [21][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.3856 (0.4012)	Acc@1 85.938 (86.288)	Acc@5 100.000 (99.506)
after train
n1: 21 for:
wAcc: 68.66945636975416
test acc: 71.69
Epoche: [22/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [22][0/196]	Time 0.156 (0.156)	Data 0.218 (0.218)	Loss 0.4654 (0.4654)	Acc@1 84.375 (84.375)	Acc@5 98.047 (98.047)
Epoch: [22][64/196]	Time 0.117 (0.121)	Data 0.000 (0.004)	Loss 0.4012 (0.4090)	Acc@1 85.547 (85.841)	Acc@5 99.609 (99.459)
Epoch: [22][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.3627 (0.4109)	Acc@1 87.500 (85.862)	Acc@5 100.000 (99.434)
Epoch: [22][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.5252 (0.4067)	Acc@1 81.250 (86.018)	Acc@5 99.609 (99.433)
after train
n1: 22 for:
wAcc: 68.41146215464497
test acc: 70.09
Epoche: [23/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [23][0/196]	Time 0.162 (0.162)	Data 0.219 (0.219)	Loss 0.4068 (0.4068)	Acc@1 84.766 (84.766)	Acc@5 100.000 (100.000)
Epoch: [23][64/196]	Time 0.120 (0.120)	Data 0.000 (0.004)	Loss 0.3685 (0.3896)	Acc@1 85.547 (86.490)	Acc@5 100.000 (99.477)
Epoch: [23][128/196]	Time 0.125 (0.120)	Data 0.000 (0.002)	Loss 0.3860 (0.3969)	Acc@1 85.156 (86.343)	Acc@5 100.000 (99.455)
Epoch: [23][192/196]	Time 0.115 (0.120)	Data 0.000 (0.001)	Loss 0.3941 (0.3962)	Acc@1 85.938 (86.361)	Acc@5 99.609 (99.490)
after train
n1: 23 for:
wAcc: 68.07047933690038
test acc: 79.73
Epoche: [24/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [24][0/196]	Time 0.170 (0.170)	Data 0.227 (0.227)	Loss 0.4194 (0.4194)	Acc@1 85.547 (85.547)	Acc@5 98.828 (98.828)
Epoch: [24][64/196]	Time 0.116 (0.123)	Data 0.000 (0.004)	Loss 0.5046 (0.3887)	Acc@1 83.594 (86.827)	Acc@5 99.219 (99.489)
Epoch: [24][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.3737 (0.3957)	Acc@1 85.938 (86.380)	Acc@5 99.219 (99.485)
Epoch: [24][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.2813 (0.3915)	Acc@1 91.797 (86.599)	Acc@5 98.828 (99.445)
after train
n1: 24 for:
wAcc: 68.56024685525787
test acc: 82.92
Epoche: [25/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [25][0/196]	Time 0.160 (0.160)	Data 0.221 (0.221)	Loss 0.3157 (0.3157)	Acc@1 90.234 (90.234)	Acc@5 99.219 (99.219)
Epoch: [25][64/196]	Time 0.119 (0.120)	Data 0.000 (0.004)	Loss 0.5325 (0.3942)	Acc@1 84.375 (86.472)	Acc@5 98.438 (99.405)
Epoch: [25][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.4083 (0.3879)	Acc@1 86.328 (86.598)	Acc@5 100.000 (99.470)
Epoch: [25][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.3741 (0.3891)	Acc@1 85.938 (86.589)	Acc@5 100.000 (99.435)
after train
n1: 25 for:
wAcc: 69.22574429003716
test acc: 73.44
Epoche: [26/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [26][0/196]	Time 0.172 (0.172)	Data 0.207 (0.207)	Loss 0.4774 (0.4774)	Acc@1 85.156 (85.156)	Acc@5 99.219 (99.219)
Epoch: [26][64/196]	Time 0.121 (0.121)	Data 0.000 (0.003)	Loss 0.3723 (0.3779)	Acc@1 88.281 (87.200)	Acc@5 99.609 (99.597)
Epoch: [26][128/196]	Time 0.118 (0.121)	Data 0.000 (0.002)	Loss 0.3032 (0.3820)	Acc@1 91.016 (86.982)	Acc@5 100.000 (99.576)
Epoch: [26][192/196]	Time 0.114 (0.121)	Data 0.000 (0.001)	Loss 0.4220 (0.3864)	Acc@1 85.547 (86.800)	Acc@5 100.000 (99.559)
after train
n1: 26 for:
wAcc: 69.0970359399353
test acc: 83.12
Epoche: [27/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [27][0/196]	Time 0.181 (0.181)	Data 0.221 (0.221)	Loss 0.4155 (0.4155)	Acc@1 84.766 (84.766)	Acc@5 100.000 (100.000)
Epoch: [27][64/196]	Time 0.120 (0.121)	Data 0.000 (0.004)	Loss 0.3817 (0.3728)	Acc@1 88.672 (87.175)	Acc@5 100.000 (99.543)
Epoch: [27][128/196]	Time 0.118 (0.121)	Data 0.000 (0.002)	Loss 0.4095 (0.3725)	Acc@1 85.547 (87.185)	Acc@5 100.000 (99.525)
Epoch: [27][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.3183 (0.3789)	Acc@1 87.891 (86.960)	Acc@5 99.609 (99.478)
after train
n1: 27 for:
wAcc: 69.68332876118694
test acc: 75.24
Epoche: [28/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [28][0/196]	Time 0.187 (0.187)	Data 0.213 (0.213)	Loss 0.3939 (0.3939)	Acc@1 86.719 (86.719)	Acc@5 99.609 (99.609)
Epoch: [28][64/196]	Time 0.120 (0.122)	Data 0.000 (0.003)	Loss 0.3743 (0.3834)	Acc@1 84.375 (86.767)	Acc@5 99.609 (99.633)
Epoch: [28][128/196]	Time 0.126 (0.121)	Data 0.000 (0.002)	Loss 0.3563 (0.3804)	Acc@1 85.938 (86.900)	Acc@5 99.609 (99.525)
Epoch: [28][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.4428 (0.3783)	Acc@1 87.109 (87.022)	Acc@5 99.609 (99.502)
after train
n1: 28 for:
wAcc: 69.65108769011022
test acc: 75.64
Epoche: [29/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [29][0/196]	Time 0.198 (0.198)	Data 0.219 (0.219)	Loss 0.2913 (0.2913)	Acc@1 88.672 (88.672)	Acc@5 100.000 (100.000)
Epoch: [29][64/196]	Time 0.120 (0.121)	Data 0.000 (0.004)	Loss 0.4457 (0.3786)	Acc@1 85.156 (86.965)	Acc@5 99.219 (99.495)
Epoch: [29][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.3525 (0.3708)	Acc@1 88.672 (87.306)	Acc@5 99.219 (99.552)
Epoch: [29][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.4421 (0.3725)	Acc@1 83.594 (87.198)	Acc@5 99.219 (99.543)
after train
n1: 29 for:
wAcc: 69.65461802086868
test acc: 71.9
Epoche: [30/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [30][0/196]	Time 0.173 (0.173)	Data 0.191 (0.191)	Loss 0.4258 (0.4258)	Acc@1 87.109 (87.109)	Acc@5 98.828 (98.828)
Epoch: [30][64/196]	Time 0.115 (0.121)	Data 0.000 (0.003)	Loss 0.3456 (0.3618)	Acc@1 87.500 (87.428)	Acc@5 100.000 (99.537)
Epoch: [30][128/196]	Time 0.124 (0.121)	Data 0.000 (0.002)	Loss 0.4004 (0.3706)	Acc@1 87.109 (87.061)	Acc@5 99.609 (99.537)
Epoch: [30][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.4114 (0.3684)	Acc@1 86.719 (87.267)	Acc@5 100.000 (99.530)
after train
n1: 30 for:
wAcc: 69.42050603675091
test acc: 79.72
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [31/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [31][0/196]	Time 0.165 (0.165)	Data 0.218 (0.218)	Loss 0.3051 (0.3051)	Acc@1 89.844 (89.844)	Acc@5 100.000 (100.000)
Epoch: [31][64/196]	Time 0.121 (0.122)	Data 0.000 (0.004)	Loss 0.3228 (0.3451)	Acc@1 86.719 (88.101)	Acc@5 99.609 (99.609)
Epoch: [31][128/196]	Time 0.133 (0.121)	Data 0.000 (0.002)	Loss 0.3786 (0.3610)	Acc@1 87.500 (87.570)	Acc@5 100.000 (99.573)
Epoch: [31][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.3470 (0.3641)	Acc@1 89.844 (87.457)	Acc@5 99.219 (99.571)
after train
n1: 30 for:
wAcc: 72.79985556327289
test acc: 81.53
Epoche: [32/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [32][0/196]	Time 0.175 (0.175)	Data 0.186 (0.186)	Loss 0.3343 (0.3343)	Acc@1 89.062 (89.062)	Acc@5 100.000 (100.000)
Epoch: [32][64/196]	Time 0.135 (0.122)	Data 0.000 (0.003)	Loss 0.3539 (0.3575)	Acc@1 86.328 (87.752)	Acc@5 100.000 (99.579)
Epoch: [32][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.3606 (0.3609)	Acc@1 87.109 (87.555)	Acc@5 100.000 (99.564)
Epoch: [32][192/196]	Time 0.115 (0.121)	Data 0.000 (0.001)	Loss 0.3437 (0.3607)	Acc@1 90.234 (87.625)	Acc@5 100.000 (99.539)
after train
n1: 30 for:
wAcc: 73.51198909218323
test acc: 81.9
Epoche: [33/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [33][0/196]	Time 0.151 (0.151)	Data 0.185 (0.185)	Loss 0.3953 (0.3953)	Acc@1 87.500 (87.500)	Acc@5 98.828 (98.828)
Epoch: [33][64/196]	Time 0.123 (0.121)	Data 0.000 (0.003)	Loss 0.3034 (0.3607)	Acc@1 90.234 (87.590)	Acc@5 100.000 (99.543)
Epoch: [33][128/196]	Time 0.121 (0.120)	Data 0.000 (0.002)	Loss 0.3926 (0.3594)	Acc@1 85.547 (87.676)	Acc@5 98.828 (99.546)
Epoch: [33][192/196]	Time 0.124 (0.120)	Data 0.000 (0.001)	Loss 0.2968 (0.3600)	Acc@1 87.891 (87.595)	Acc@5 100.000 (99.563)
after train
n1: 30 for:
wAcc: 74.7195798651258
test acc: 74.21
Epoche: [34/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [34][0/196]	Time 0.159 (0.159)	Data 0.217 (0.217)	Loss 0.2692 (0.2692)	Acc@1 90.625 (90.625)	Acc@5 99.219 (99.219)
Epoch: [34][64/196]	Time 0.114 (0.122)	Data 0.000 (0.004)	Loss 0.4199 (0.3501)	Acc@1 83.203 (88.089)	Acc@5 99.609 (99.561)
Epoch: [34][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.3983 (0.3609)	Acc@1 87.109 (87.664)	Acc@5 100.000 (99.537)
Epoch: [34][192/196]	Time 0.123 (0.121)	Data 0.000 (0.001)	Loss 0.4178 (0.3612)	Acc@1 85.156 (87.664)	Acc@5 100.000 (99.543)
after train
n1: 30 for:
wAcc: 75.85620674289032
test acc: 82.38
Epoche: [35/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [35][0/196]	Time 0.159 (0.159)	Data 0.213 (0.213)	Loss 0.3669 (0.3669)	Acc@1 86.328 (86.328)	Acc@5 99.219 (99.219)
Epoch: [35][64/196]	Time 0.118 (0.123)	Data 0.000 (0.003)	Loss 0.3265 (0.3555)	Acc@1 87.500 (87.602)	Acc@5 100.000 (99.603)
Epoch: [35][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.3949 (0.3622)	Acc@1 87.500 (87.306)	Acc@5 100.000 (99.585)
Epoch: [35][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.3814 (0.3602)	Acc@1 86.328 (87.387)	Acc@5 100.000 (99.569)
after train
n1: 30 for:
wAcc: 76.65006544813254
test acc: 82.5
Epoche: [36/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [36][0/196]	Time 0.178 (0.178)	Data 0.208 (0.208)	Loss 0.4308 (0.4308)	Acc@1 87.109 (87.109)	Acc@5 99.609 (99.609)
Epoch: [36][64/196]	Time 0.118 (0.122)	Data 0.000 (0.003)	Loss 0.3694 (0.3484)	Acc@1 86.328 (88.167)	Acc@5 99.609 (99.585)
Epoch: [36][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.4021 (0.3533)	Acc@1 86.328 (87.939)	Acc@5 99.219 (99.600)
Epoch: [36][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.3481 (0.3507)	Acc@1 88.672 (87.996)	Acc@5 99.219 (99.601)
after train
n1: 30 for:
wAcc: 77.2313123762236
test acc: 83.98
Epoche: [37/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [37][0/196]	Time 0.167 (0.167)	Data 0.186 (0.186)	Loss 0.3706 (0.3706)	Acc@1 88.672 (88.672)	Acc@5 99.219 (99.219)
Epoch: [37][64/196]	Time 0.128 (0.122)	Data 0.000 (0.003)	Loss 0.3299 (0.3619)	Acc@1 89.062 (87.596)	Acc@5 99.219 (99.525)
Epoch: [37][128/196]	Time 0.117 (0.121)	Data 0.000 (0.002)	Loss 0.4132 (0.3549)	Acc@1 87.109 (87.897)	Acc@5 99.609 (99.552)
Epoch: [37][192/196]	Time 0.114 (0.121)	Data 0.000 (0.001)	Loss 0.3805 (0.3589)	Acc@1 84.766 (87.634)	Acc@5 100.000 (99.575)
after train
n1: 30 for:
wAcc: 77.29807960678812
test acc: 83.71
Epoche: [38/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [38][0/196]	Time 0.161 (0.161)	Data 0.242 (0.242)	Loss 0.3753 (0.3753)	Acc@1 87.109 (87.109)	Acc@5 99.609 (99.609)
Epoch: [38][64/196]	Time 0.127 (0.121)	Data 0.000 (0.004)	Loss 0.3630 (0.3373)	Acc@1 87.109 (88.425)	Acc@5 99.609 (99.621)
Epoch: [38][128/196]	Time 0.117 (0.121)	Data 0.000 (0.002)	Loss 0.3539 (0.3436)	Acc@1 87.109 (88.215)	Acc@5 99.609 (99.612)
Epoch: [38][192/196]	Time 0.116 (0.121)	Data 0.000 (0.001)	Loss 0.4666 (0.3515)	Acc@1 83.984 (87.840)	Acc@5 98.438 (99.581)
after train
n1: 30 for:
wAcc: 78.02255923829343
test acc: 76.97
Epoche: [39/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [39][0/196]	Time 0.178 (0.178)	Data 0.189 (0.189)	Loss 0.4699 (0.4699)	Acc@1 84.766 (84.766)	Acc@5 99.219 (99.219)
Epoch: [39][64/196]	Time 0.119 (0.121)	Data 0.000 (0.003)	Loss 0.3954 (0.3487)	Acc@1 86.719 (88.149)	Acc@5 99.219 (99.609)
Epoch: [39][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.4006 (0.3460)	Acc@1 85.938 (88.139)	Acc@5 100.000 (99.612)
Epoch: [39][192/196]	Time 0.114 (0.121)	Data 0.000 (0.001)	Loss 0.4406 (0.3462)	Acc@1 84.375 (88.164)	Acc@5 98.828 (99.585)
after train
n1: 30 for:
wAcc: 77.33881995680676
test acc: 82.67
Epoche: [40/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [40][0/196]	Time 0.176 (0.176)	Data 0.202 (0.202)	Loss 0.3876 (0.3876)	Acc@1 85.938 (85.938)	Acc@5 99.219 (99.219)
Epoch: [40][64/196]	Time 0.122 (0.121)	Data 0.000 (0.003)	Loss 0.2292 (0.3463)	Acc@1 91.797 (87.806)	Acc@5 100.000 (99.585)
Epoch: [40][128/196]	Time 0.118 (0.121)	Data 0.000 (0.002)	Loss 0.3385 (0.3447)	Acc@1 88.281 (87.951)	Acc@5 100.000 (99.621)
Epoch: [40][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.3061 (0.3441)	Acc@1 87.500 (88.075)	Acc@5 100.000 (99.581)
after train
n1: 30 for:
wAcc: 78.67590495462649
test acc: 82.51
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [41/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [41][0/196]	Time 0.167 (0.167)	Data 0.212 (0.212)	Loss 0.4105 (0.4105)	Acc@1 85.156 (85.156)	Acc@5 99.219 (99.219)
Epoch: [41][64/196]	Time 0.116 (0.122)	Data 0.000 (0.003)	Loss 0.3195 (0.3237)	Acc@1 89.453 (88.846)	Acc@5 100.000 (99.700)
Epoch: [41][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.3658 (0.3288)	Acc@1 86.719 (88.681)	Acc@5 100.000 (99.658)
Epoch: [41][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.3475 (0.3366)	Acc@1 89.062 (88.484)	Acc@5 99.609 (99.601)
after train
n1: 30 for:
wAcc: 78.75991136561126
test acc: 83.53
Epoche: [42/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [42][0/196]	Time 0.172 (0.172)	Data 0.192 (0.192)	Loss 0.2798 (0.2798)	Acc@1 91.016 (91.016)	Acc@5 99.609 (99.609)
Epoch: [42][64/196]	Time 0.116 (0.122)	Data 0.000 (0.003)	Loss 0.3204 (0.3269)	Acc@1 89.062 (88.990)	Acc@5 100.000 (99.609)
Epoch: [42][128/196]	Time 0.130 (0.121)	Data 0.000 (0.002)	Loss 0.4438 (0.3442)	Acc@1 85.156 (88.299)	Acc@5 99.609 (99.561)
Epoch: [42][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.4690 (0.3435)	Acc@1 85.156 (88.340)	Acc@5 99.219 (99.573)
after train
n1: 30 for:
wAcc: 79.10235379318108
test acc: 82.1
Epoche: [43/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [43][0/196]	Time 0.168 (0.168)	Data 0.188 (0.188)	Loss 0.2687 (0.2687)	Acc@1 91.406 (91.406)	Acc@5 99.609 (99.609)
Epoch: [43][64/196]	Time 0.127 (0.121)	Data 0.000 (0.003)	Loss 0.4331 (0.3184)	Acc@1 83.594 (89.081)	Acc@5 99.219 (99.663)
Epoch: [43][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.3374 (0.3389)	Acc@1 88.281 (88.324)	Acc@5 99.609 (99.649)
Epoch: [43][192/196]	Time 0.126 (0.121)	Data 0.000 (0.001)	Loss 0.4060 (0.3421)	Acc@1 85.547 (88.247)	Acc@5 99.609 (99.599)
after train
n1: 30 for:
wAcc: 79.4099539528752
test acc: 80.28
Epoche: [44/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [44][0/196]	Time 0.154 (0.154)	Data 0.221 (0.221)	Loss 0.3451 (0.3451)	Acc@1 87.891 (87.891)	Acc@5 100.000 (100.000)
Epoch: [44][64/196]	Time 0.122 (0.120)	Data 0.000 (0.004)	Loss 0.3233 (0.3390)	Acc@1 88.281 (88.191)	Acc@5 99.219 (99.537)
Epoch: [44][128/196]	Time 0.118 (0.120)	Data 0.000 (0.002)	Loss 0.3125 (0.3365)	Acc@1 89.844 (88.396)	Acc@5 98.828 (99.576)
Epoch: [44][192/196]	Time 0.113 (0.120)	Data 0.000 (0.001)	Loss 0.3592 (0.3386)	Acc@1 86.328 (88.326)	Acc@5 100.000 (99.599)
after train
n1: 30 for:
wAcc: 79.86652146947839
test acc: 76.53
Epoche: [45/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [45][0/196]	Time 0.170 (0.170)	Data 0.222 (0.222)	Loss 0.3477 (0.3477)	Acc@1 87.500 (87.500)	Acc@5 99.609 (99.609)
Epoch: [45][64/196]	Time 0.119 (0.122)	Data 0.000 (0.004)	Loss 0.3571 (0.3407)	Acc@1 87.891 (88.323)	Acc@5 98.828 (99.627)
Epoch: [45][128/196]	Time 0.115 (0.122)	Data 0.000 (0.002)	Loss 0.2678 (0.3401)	Acc@1 91.406 (88.221)	Acc@5 99.219 (99.606)
Epoch: [45][192/196]	Time 0.123 (0.122)	Data 0.000 (0.001)	Loss 0.3202 (0.3367)	Acc@1 89.844 (88.382)	Acc@5 100.000 (99.585)
after train
n1: 30 for:
wAcc: 79.23203350383014
test acc: 78.8
Epoche: [46/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [46][0/196]	Time 0.167 (0.167)	Data 0.204 (0.204)	Loss 0.3955 (0.3955)	Acc@1 86.719 (86.719)	Acc@5 100.000 (100.000)
Epoch: [46][64/196]	Time 0.117 (0.121)	Data 0.000 (0.003)	Loss 0.3177 (0.3275)	Acc@1 90.625 (88.612)	Acc@5 100.000 (99.694)
Epoch: [46][128/196]	Time 0.115 (0.121)	Data 0.000 (0.002)	Loss 0.3810 (0.3334)	Acc@1 88.672 (88.642)	Acc@5 100.000 (99.676)
Epoch: [46][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.2655 (0.3331)	Acc@1 92.188 (88.595)	Acc@5 99.609 (99.642)
after train
n1: 30 for:
wAcc: 78.76758447167718
test acc: 76.47
Epoche: [47/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [47][0/196]	Time 0.164 (0.164)	Data 0.207 (0.207)	Loss 0.3177 (0.3177)	Acc@1 89.453 (89.453)	Acc@5 99.219 (99.219)
Epoch: [47][64/196]	Time 0.124 (0.122)	Data 0.000 (0.003)	Loss 0.3519 (0.3364)	Acc@1 85.547 (88.450)	Acc@5 100.000 (99.621)
Epoch: [47][128/196]	Time 0.118 (0.121)	Data 0.000 (0.002)	Loss 0.2259 (0.3345)	Acc@1 91.406 (88.572)	Acc@5 99.609 (99.603)
Epoch: [47][192/196]	Time 0.122 (0.120)	Data 0.000 (0.001)	Loss 0.3280 (0.3355)	Acc@1 88.672 (88.516)	Acc@5 99.609 (99.636)
after train
n1: 30 for:
wAcc: 77.80547164816231
test acc: 80.56
Epoche: [48/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [48][0/196]	Time 0.148 (0.148)	Data 0.202 (0.202)	Loss 0.3177 (0.3177)	Acc@1 91.016 (91.016)	Acc@5 100.000 (100.000)
Epoch: [48][64/196]	Time 0.123 (0.121)	Data 0.000 (0.003)	Loss 0.3306 (0.3336)	Acc@1 88.281 (88.401)	Acc@5 99.219 (99.651)
Epoch: [48][128/196]	Time 0.125 (0.120)	Data 0.000 (0.002)	Loss 0.3362 (0.3367)	Acc@1 89.062 (88.324)	Acc@5 100.000 (99.640)
Epoch: [48][192/196]	Time 0.117 (0.120)	Data 0.000 (0.001)	Loss 0.3890 (0.3340)	Acc@1 87.500 (88.469)	Acc@5 99.609 (99.622)
after train
n1: 30 for:
wAcc: 79.74538853752368
test acc: 82.64
Epoche: [49/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [49][0/196]	Time 0.173 (0.173)	Data 0.226 (0.226)	Loss 0.2308 (0.2308)	Acc@1 91.406 (91.406)	Acc@5 100.000 (100.000)
Epoch: [49][64/196]	Time 0.122 (0.122)	Data 0.000 (0.004)	Loss 0.3635 (0.3179)	Acc@1 85.547 (88.960)	Acc@5 100.000 (99.675)
Epoch: [49][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.3407 (0.3308)	Acc@1 87.891 (88.520)	Acc@5 99.609 (99.661)
Epoch: [49][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.3521 (0.3345)	Acc@1 88.281 (88.494)	Acc@5 100.000 (99.650)
after train
n1: 30 for:
wAcc: 79.80781472490614
test acc: 82.67
Epoche: [50/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [50][0/196]	Time 0.173 (0.173)	Data 0.203 (0.203)	Loss 0.3838 (0.3838)	Acc@1 87.500 (87.500)	Acc@5 99.219 (99.219)
Epoch: [50][64/196]	Time 0.117 (0.121)	Data 0.000 (0.003)	Loss 0.3378 (0.3232)	Acc@1 88.281 (88.678)	Acc@5 99.609 (99.712)
Epoch: [50][128/196]	Time 0.114 (0.120)	Data 0.000 (0.002)	Loss 0.3172 (0.3262)	Acc@1 88.672 (88.654)	Acc@5 100.000 (99.694)
Epoch: [50][192/196]	Time 0.114 (0.120)	Data 0.000 (0.001)	Loss 0.3898 (0.3340)	Acc@1 85.547 (88.496)	Acc@5 98.828 (99.640)
after train
n1: 30 for:
wAcc: 78.86489169293355
test acc: 79.36
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [51/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [51][0/196]	Time 0.171 (0.171)	Data 0.220 (0.220)	Loss 0.3747 (0.3747)	Acc@1 85.547 (85.547)	Acc@5 99.609 (99.609)
Epoch: [51][64/196]	Time 0.131 (0.122)	Data 0.000 (0.004)	Loss 0.4128 (0.2996)	Acc@1 85.938 (89.633)	Acc@5 99.609 (99.724)
Epoch: [51][128/196]	Time 0.123 (0.121)	Data 0.000 (0.002)	Loss 0.4045 (0.3145)	Acc@1 85.938 (89.096)	Acc@5 99.609 (99.685)
Epoch: [51][192/196]	Time 0.124 (0.121)	Data 0.000 (0.001)	Loss 0.3542 (0.3190)	Acc@1 88.672 (88.927)	Acc@5 98.828 (99.652)
after train
n1: 30 for:
wAcc: 78.66553567276853
test acc: 84.83
Epoche: [52/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [52][0/196]	Time 0.166 (0.166)	Data 0.216 (0.216)	Loss 0.2407 (0.2407)	Acc@1 91.016 (91.016)	Acc@5 99.609 (99.609)
Epoch: [52][64/196]	Time 0.122 (0.121)	Data 0.000 (0.004)	Loss 0.3446 (0.3266)	Acc@1 84.375 (88.510)	Acc@5 100.000 (99.645)
Epoch: [52][128/196]	Time 0.117 (0.120)	Data 0.000 (0.002)	Loss 0.2459 (0.3222)	Acc@1 92.188 (88.778)	Acc@5 100.000 (99.606)
Epoch: [52][192/196]	Time 0.117 (0.120)	Data 0.000 (0.001)	Loss 0.3665 (0.3299)	Acc@1 88.672 (88.494)	Acc@5 99.219 (99.611)
after train
n1: 30 for:
wAcc: 80.4568164605407
test acc: 82.79
Epoche: [53/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [53][0/196]	Time 0.147 (0.147)	Data 0.219 (0.219)	Loss 0.3803 (0.3803)	Acc@1 87.500 (87.500)	Acc@5 99.609 (99.609)
Epoch: [53][64/196]	Time 0.118 (0.121)	Data 0.000 (0.004)	Loss 0.3550 (0.3226)	Acc@1 87.109 (88.948)	Acc@5 99.609 (99.579)
Epoch: [53][128/196]	Time 0.115 (0.121)	Data 0.000 (0.002)	Loss 0.3920 (0.3269)	Acc@1 85.156 (88.772)	Acc@5 100.000 (99.612)
Epoch: [53][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.2956 (0.3301)	Acc@1 90.234 (88.678)	Acc@5 100.000 (99.607)
after train
n1: 30 for:
wAcc: 81.06849579843333
test acc: 81.35
Epoche: [54/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [54][0/196]	Time 0.169 (0.169)	Data 0.218 (0.218)	Loss 0.2931 (0.2931)	Acc@1 89.453 (89.453)	Acc@5 100.000 (100.000)
Epoch: [54][64/196]	Time 0.119 (0.121)	Data 0.000 (0.004)	Loss 0.2731 (0.3173)	Acc@1 89.844 (89.177)	Acc@5 100.000 (99.591)
Epoch: [54][128/196]	Time 0.117 (0.121)	Data 0.000 (0.002)	Loss 0.2796 (0.3172)	Acc@1 91.797 (89.284)	Acc@5 99.609 (99.646)
Epoch: [54][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.3679 (0.3201)	Acc@1 88.281 (89.077)	Acc@5 98.438 (99.642)
after train
n1: 30 for:
wAcc: 79.71621379716184
test acc: 82.28
Epoche: [55/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [55][0/196]	Time 0.148 (0.148)	Data 0.190 (0.190)	Loss 0.3478 (0.3478)	Acc@1 86.328 (86.328)	Acc@5 99.609 (99.609)
Epoch: [55][64/196]	Time 0.122 (0.121)	Data 0.000 (0.003)	Loss 0.3201 (0.3178)	Acc@1 88.672 (89.069)	Acc@5 100.000 (99.681)
Epoch: [55][128/196]	Time 0.116 (0.120)	Data 0.000 (0.002)	Loss 0.3442 (0.3232)	Acc@1 87.500 (88.835)	Acc@5 99.609 (99.649)
Epoch: [55][192/196]	Time 0.117 (0.120)	Data 0.000 (0.001)	Loss 0.2626 (0.3220)	Acc@1 90.625 (88.866)	Acc@5 100.000 (99.670)
after train
n1: 30 for:
wAcc: 81.28097523274675
test acc: 73.94
Epoche: [56/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [56][0/196]	Time 0.195 (0.195)	Data 0.207 (0.207)	Loss 0.2599 (0.2599)	Acc@1 91.016 (91.016)	Acc@5 100.000 (100.000)
Epoch: [56][64/196]	Time 0.118 (0.123)	Data 0.000 (0.003)	Loss 0.3003 (0.3184)	Acc@1 89.453 (89.219)	Acc@5 99.609 (99.615)
Epoch: [56][128/196]	Time 0.123 (0.121)	Data 0.000 (0.002)	Loss 0.2614 (0.3185)	Acc@1 91.016 (89.223)	Acc@5 99.609 (99.637)
Epoch: [56][192/196]	Time 0.116 (0.121)	Data 0.000 (0.001)	Loss 0.3056 (0.3204)	Acc@1 90.625 (89.150)	Acc@5 98.828 (99.615)
after train
n1: 30 for:
wAcc: 79.66821885633404
test acc: 72.54
Epoche: [57/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [57][0/196]	Time 0.184 (0.184)	Data 0.186 (0.186)	Loss 0.3169 (0.3169)	Acc@1 89.844 (89.844)	Acc@5 100.000 (100.000)
Epoch: [57][64/196]	Time 0.117 (0.122)	Data 0.000 (0.003)	Loss 0.2849 (0.3108)	Acc@1 89.453 (89.062)	Acc@5 100.000 (99.681)
Epoch: [57][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.3521 (0.3197)	Acc@1 89.062 (88.999)	Acc@5 98.828 (99.618)
Epoch: [57][192/196]	Time 0.116 (0.121)	Data 0.000 (0.001)	Loss 0.3697 (0.3250)	Acc@1 86.719 (88.844)	Acc@5 99.609 (99.624)
after train
n1: 30 for:
wAcc: 79.26615839172578
test acc: 79.02
Epoche: [58/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [58][0/196]	Time 0.152 (0.152)	Data 0.216 (0.216)	Loss 0.2272 (0.2272)	Acc@1 92.188 (92.188)	Acc@5 99.609 (99.609)
Epoch: [58][64/196]	Time 0.118 (0.122)	Data 0.000 (0.004)	Loss 0.2871 (0.3223)	Acc@1 89.453 (88.972)	Acc@5 100.000 (99.663)
Epoch: [58][128/196]	Time 0.116 (0.121)	Data 0.000 (0.002)	Loss 0.3237 (0.3219)	Acc@1 89.453 (88.999)	Acc@5 99.219 (99.646)
Epoch: [58][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.2981 (0.3250)	Acc@1 89.844 (88.933)	Acc@5 100.000 (99.652)
after train
n1: 30 for:
wAcc: 78.70961698107432
test acc: 84.15
Epoche: [59/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [59][0/196]	Time 0.143 (0.143)	Data 0.232 (0.232)	Loss 0.3673 (0.3673)	Acc@1 87.500 (87.500)	Acc@5 99.219 (99.219)
Epoch: [59][64/196]	Time 0.115 (0.122)	Data 0.000 (0.004)	Loss 0.3238 (0.3026)	Acc@1 89.062 (89.579)	Acc@5 99.609 (99.712)
Epoch: [59][128/196]	Time 0.117 (0.121)	Data 0.000 (0.002)	Loss 0.3015 (0.3108)	Acc@1 89.844 (89.268)	Acc@5 99.609 (99.676)
Epoch: [59][192/196]	Time 0.123 (0.121)	Data 0.000 (0.001)	Loss 0.3994 (0.3152)	Acc@1 87.891 (89.115)	Acc@5 99.219 (99.670)
after train
n1: 30 for:
wAcc: 80.19108081154786
test acc: 81.45
Epoche: [60/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [60][0/196]	Time 0.155 (0.155)	Data 0.231 (0.231)	Loss 0.2994 (0.2994)	Acc@1 89.844 (89.844)	Acc@5 100.000 (100.000)
Epoch: [60][64/196]	Time 0.115 (0.123)	Data 0.000 (0.004)	Loss 0.3090 (0.3172)	Acc@1 89.453 (88.930)	Acc@5 99.609 (99.712)
Epoch: [60][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.4865 (0.3179)	Acc@1 85.547 (89.014)	Acc@5 98.828 (99.670)
Epoch: [60][192/196]	Time 0.114 (0.121)	Data 0.000 (0.001)	Loss 0.3452 (0.3225)	Acc@1 89.453 (88.880)	Acc@5 99.609 (99.626)
after train
n1: 30 for:
wAcc: 80.53395782296091
test acc: 81.71
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [61/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [61][0/196]	Time 0.181 (0.181)	Data 0.175 (0.175)	Loss 0.3285 (0.3285)	Acc@1 89.453 (89.453)	Acc@5 99.219 (99.219)
Epoch: [61][64/196]	Time 0.122 (0.123)	Data 0.000 (0.003)	Loss 0.3061 (0.2790)	Acc@1 87.500 (90.018)	Acc@5 99.609 (99.766)
Epoch: [61][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.3549 (0.3062)	Acc@1 86.719 (89.168)	Acc@5 99.609 (99.670)
Epoch: [61][192/196]	Time 0.124 (0.122)	Data 0.000 (0.001)	Loss 0.3986 (0.3121)	Acc@1 85.547 (89.069)	Acc@5 99.609 (99.636)
after train
n1: 30 for:
wAcc: 80.66331928798203
test acc: 83.05
Epoche: [62/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [62][0/196]	Time 0.165 (0.165)	Data 0.183 (0.183)	Loss 0.3497 (0.3497)	Acc@1 88.672 (88.672)	Acc@5 99.609 (99.609)
Epoch: [62][64/196]	Time 0.128 (0.121)	Data 0.000 (0.003)	Loss 0.2351 (0.3301)	Acc@1 92.188 (88.660)	Acc@5 100.000 (99.621)
Epoch: [62][128/196]	Time 0.126 (0.121)	Data 0.000 (0.002)	Loss 0.3809 (0.3230)	Acc@1 85.547 (88.914)	Acc@5 99.609 (99.643)
Epoch: [62][192/196]	Time 0.116 (0.120)	Data 0.000 (0.001)	Loss 0.3072 (0.3255)	Acc@1 89.844 (88.714)	Acc@5 99.219 (99.638)
after train
n1: 30 for:
wAcc: 79.70562031355931
test acc: 82.86
Epoche: [63/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [63][0/196]	Time 0.158 (0.158)	Data 0.220 (0.220)	Loss 0.3473 (0.3473)	Acc@1 89.844 (89.844)	Acc@5 100.000 (100.000)
Epoch: [63][64/196]	Time 0.122 (0.121)	Data 0.000 (0.004)	Loss 0.2337 (0.3076)	Acc@1 92.188 (89.585)	Acc@5 100.000 (99.657)
Epoch: [63][128/196]	Time 0.119 (0.120)	Data 0.000 (0.002)	Loss 0.4466 (0.3095)	Acc@1 84.375 (89.520)	Acc@5 100.000 (99.691)
Epoch: [63][192/196]	Time 0.127 (0.121)	Data 0.000 (0.001)	Loss 0.3094 (0.3073)	Acc@1 88.281 (89.522)	Acc@5 100.000 (99.705)
after train
n1: 30 for:
wAcc: 81.09019660310113
test acc: 79.29
Epoche: [64/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [64][0/196]	Time 0.159 (0.159)	Data 0.221 (0.221)	Loss 0.1999 (0.1999)	Acc@1 93.359 (93.359)	Acc@5 100.000 (100.000)
Epoch: [64][64/196]	Time 0.116 (0.121)	Data 0.000 (0.004)	Loss 0.3242 (0.3185)	Acc@1 89.062 (88.858)	Acc@5 100.000 (99.712)
Epoch: [64][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.3216 (0.3240)	Acc@1 89.844 (88.805)	Acc@5 99.219 (99.661)
Epoch: [64][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.2608 (0.3190)	Acc@1 91.797 (88.980)	Acc@5 100.000 (99.660)
after train
n1: 30 for:
wAcc: 80.99140227364117
test acc: 80.7
Epoche: [65/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [65][0/196]	Time 0.161 (0.161)	Data 0.188 (0.188)	Loss 0.3131 (0.3131)	Acc@1 89.453 (89.453)	Acc@5 100.000 (100.000)
Epoch: [65][64/196]	Time 0.116 (0.121)	Data 0.000 (0.003)	Loss 0.3070 (0.3068)	Acc@1 88.672 (89.297)	Acc@5 99.609 (99.772)
Epoch: [65][128/196]	Time 0.116 (0.121)	Data 0.000 (0.002)	Loss 0.3234 (0.3162)	Acc@1 88.672 (88.953)	Acc@5 100.000 (99.734)
Epoch: [65][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.3690 (0.3184)	Acc@1 85.938 (88.963)	Acc@5 100.000 (99.688)
after train
n1: 30 for:
wAcc: 81.18655323167415
test acc: 79.59
Epoche: [66/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [66][0/196]	Time 0.174 (0.174)	Data 0.186 (0.186)	Loss 0.2558 (0.2558)	Acc@1 90.625 (90.625)	Acc@5 100.000 (100.000)
Epoch: [66][64/196]	Time 0.126 (0.123)	Data 0.000 (0.003)	Loss 0.2991 (0.3109)	Acc@1 91.016 (89.279)	Acc@5 100.000 (99.688)
Epoch: [66][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.3204 (0.3107)	Acc@1 89.453 (89.214)	Acc@5 99.219 (99.658)
Epoch: [66][192/196]	Time 0.134 (0.121)	Data 0.000 (0.001)	Loss 0.2556 (0.3128)	Acc@1 91.797 (89.156)	Acc@5 100.000 (99.648)
after train
n1: 30 for:
wAcc: 81.04451817691705
test acc: 77.96
Epoche: [67/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [67][0/196]	Time 0.187 (0.187)	Data 0.212 (0.212)	Loss 0.3211 (0.3211)	Acc@1 88.281 (88.281)	Acc@5 99.219 (99.219)
Epoch: [67][64/196]	Time 0.119 (0.122)	Data 0.000 (0.003)	Loss 0.3725 (0.2937)	Acc@1 89.062 (89.820)	Acc@5 99.219 (99.700)
Epoch: [67][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.3518 (0.3046)	Acc@1 87.891 (89.608)	Acc@5 99.609 (99.661)
Epoch: [67][192/196]	Time 0.123 (0.121)	Data 0.000 (0.001)	Loss 0.3319 (0.3108)	Acc@1 87.891 (89.307)	Acc@5 99.609 (99.686)
after train
n1: 30 for:
wAcc: 79.87117210839541
test acc: 82.25
Epoche: [68/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [68][0/196]	Time 0.167 (0.167)	Data 0.219 (0.219)	Loss 0.2857 (0.2857)	Acc@1 88.281 (88.281)	Acc@5 99.609 (99.609)
Epoch: [68][64/196]	Time 0.115 (0.122)	Data 0.000 (0.004)	Loss 0.3314 (0.2975)	Acc@1 87.891 (89.910)	Acc@5 99.609 (99.688)
Epoch: [68][128/196]	Time 0.117 (0.121)	Data 0.000 (0.002)	Loss 0.2777 (0.3066)	Acc@1 91.016 (89.520)	Acc@5 99.609 (99.652)
Epoch: [68][192/196]	Time 0.113 (0.121)	Data 0.000 (0.001)	Loss 0.2548 (0.3063)	Acc@1 91.016 (89.524)	Acc@5 99.609 (99.634)
after train
n1: 30 for:
wAcc: 80.84864575188038
test acc: 81.31
Epoche: [69/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [69][0/196]	Time 0.163 (0.163)	Data 0.219 (0.219)	Loss 0.3239 (0.3239)	Acc@1 86.328 (86.328)	Acc@5 100.000 (100.000)
Epoch: [69][64/196]	Time 0.121 (0.122)	Data 0.000 (0.004)	Loss 0.3351 (0.3123)	Acc@1 89.062 (89.201)	Acc@5 99.219 (99.663)
Epoch: [69][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.3362 (0.3114)	Acc@1 87.500 (89.262)	Acc@5 99.219 (99.661)
Epoch: [69][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.3341 (0.3164)	Acc@1 89.062 (89.127)	Acc@5 99.609 (99.638)
after train
n1: 30 for:
wAcc: 80.85528069292279
test acc: 81.6
Epoche: [70/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [70][0/196]	Time 0.147 (0.147)	Data 0.199 (0.199)	Loss 0.3185 (0.3185)	Acc@1 89.453 (89.453)	Acc@5 99.609 (99.609)
Epoch: [70][64/196]	Time 0.127 (0.123)	Data 0.000 (0.003)	Loss 0.3490 (0.2913)	Acc@1 89.453 (89.796)	Acc@5 99.609 (99.736)
Epoch: [70][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.2803 (0.3043)	Acc@1 90.234 (89.365)	Acc@5 99.609 (99.694)
Epoch: [70][192/196]	Time 0.115 (0.122)	Data 0.000 (0.001)	Loss 0.3307 (0.3085)	Acc@1 88.281 (89.291)	Acc@5 99.609 (99.682)
after train
n1: 30 for:
wAcc: 81.05077988821878
test acc: 80.74
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [71/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [71][0/196]	Time 0.140 (0.140)	Data 0.215 (0.215)	Loss 0.3663 (0.3663)	Acc@1 88.281 (88.281)	Acc@5 100.000 (100.000)
Epoch: [71][64/196]	Time 0.119 (0.121)	Data 0.000 (0.003)	Loss 0.3342 (0.2888)	Acc@1 89.453 (90.114)	Acc@5 99.609 (99.730)
Epoch: [71][128/196]	Time 0.120 (0.120)	Data 0.000 (0.002)	Loss 0.3832 (0.3020)	Acc@1 86.328 (89.577)	Acc@5 99.219 (99.718)
Epoch: [71][192/196]	Time 0.117 (0.120)	Data 0.000 (0.001)	Loss 0.3338 (0.3094)	Acc@1 88.672 (89.374)	Acc@5 100.000 (99.686)
after train
n1: 30 for:
wAcc: 80.82400654599248
test acc: 79.32
Epoche: [72/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [72][0/196]	Time 0.189 (0.189)	Data 0.198 (0.198)	Loss 0.3098 (0.3098)	Acc@1 88.672 (88.672)	Acc@5 100.000 (100.000)
Epoch: [72][64/196]	Time 0.129 (0.122)	Data 0.000 (0.003)	Loss 0.2996 (0.2985)	Acc@1 88.281 (89.748)	Acc@5 99.609 (99.712)
Epoch: [72][128/196]	Time 0.127 (0.122)	Data 0.000 (0.002)	Loss 0.2686 (0.2972)	Acc@1 91.406 (89.720)	Acc@5 100.000 (99.715)
Epoch: [72][192/196]	Time 0.115 (0.121)	Data 0.000 (0.001)	Loss 0.3562 (0.3069)	Acc@1 86.719 (89.405)	Acc@5 99.219 (99.672)
after train
n1: 30 for:
wAcc: 80.46387183142372
test acc: 86.02
Epoche: [73/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [73][0/196]	Time 0.161 (0.161)	Data 0.197 (0.197)	Loss 0.2949 (0.2949)	Acc@1 91.016 (91.016)	Acc@5 100.000 (100.000)
Epoch: [73][64/196]	Time 0.124 (0.121)	Data 0.000 (0.003)	Loss 0.3715 (0.3132)	Acc@1 85.547 (89.399)	Acc@5 100.000 (99.663)
Epoch: [73][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.2767 (0.3113)	Acc@1 89.062 (89.377)	Acc@5 100.000 (99.700)
Epoch: [73][192/196]	Time 0.113 (0.120)	Data 0.000 (0.001)	Loss 0.3016 (0.3085)	Acc@1 88.281 (89.401)	Acc@5 100.000 (99.702)
after train
n1: 30 for:
wAcc: 80.28022587360641
test acc: 83.24
Epoche: [74/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [74][0/196]	Time 0.154 (0.154)	Data 0.187 (0.187)	Loss 0.2354 (0.2354)	Acc@1 92.188 (92.188)	Acc@5 100.000 (100.000)
Epoch: [74][64/196]	Time 0.123 (0.122)	Data 0.000 (0.003)	Loss 0.3849 (0.3000)	Acc@1 87.109 (89.543)	Acc@5 99.609 (99.651)
Epoch: [74][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.2476 (0.3056)	Acc@1 91.406 (89.538)	Acc@5 100.000 (99.658)
Epoch: [74][192/196]	Time 0.114 (0.121)	Data 0.000 (0.001)	Loss 0.3030 (0.3075)	Acc@1 88.672 (89.449)	Acc@5 100.000 (99.664)
after train
n1: 30 for:
wAcc: 80.79933377799259
test acc: 83.79
Epoche: [75/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [75][0/196]	Time 0.159 (0.159)	Data 0.218 (0.218)	Loss 0.2637 (0.2637)	Acc@1 89.453 (89.453)	Acc@5 100.000 (100.000)
Epoch: [75][64/196]	Time 0.119 (0.122)	Data 0.000 (0.004)	Loss 0.3118 (0.2886)	Acc@1 89.844 (90.090)	Acc@5 99.609 (99.760)
Epoch: [75][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.2519 (0.3022)	Acc@1 90.625 (89.714)	Acc@5 100.000 (99.715)
Epoch: [75][192/196]	Time 0.118 (0.120)	Data 0.000 (0.001)	Loss 0.3600 (0.3040)	Acc@1 86.719 (89.680)	Acc@5 99.609 (99.709)
after train
n1: 30 for:
wAcc: 80.65545155748804
test acc: 77.86
Epoche: [76/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [76][0/196]	Time 0.144 (0.144)	Data 0.224 (0.224)	Loss 0.2582 (0.2582)	Acc@1 91.406 (91.406)	Acc@5 100.000 (100.000)
Epoch: [76][64/196]	Time 0.120 (0.122)	Data 0.000 (0.004)	Loss 0.2894 (0.3011)	Acc@1 91.797 (89.724)	Acc@5 99.609 (99.736)
Epoch: [76][128/196]	Time 0.125 (0.122)	Data 0.000 (0.002)	Loss 0.3401 (0.3038)	Acc@1 86.719 (89.674)	Acc@5 99.609 (99.715)
Epoch: [76][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.3454 (0.3080)	Acc@1 87.500 (89.546)	Acc@5 99.219 (99.688)
after train
n1: 30 for:
wAcc: 81.06635661322525
test acc: 78.74
Epoche: [77/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [77][0/196]	Time 0.164 (0.164)	Data 0.228 (0.228)	Loss 0.3136 (0.3136)	Acc@1 85.938 (85.938)	Acc@5 100.000 (100.000)
Epoch: [77][64/196]	Time 0.125 (0.122)	Data 0.000 (0.004)	Loss 0.2953 (0.3094)	Acc@1 89.844 (89.369)	Acc@5 99.609 (99.615)
Epoch: [77][128/196]	Time 0.118 (0.120)	Data 0.000 (0.002)	Loss 0.2551 (0.3141)	Acc@1 90.625 (89.087)	Acc@5 99.609 (99.625)
Epoch: [77][192/196]	Time 0.118 (0.120)	Data 0.000 (0.001)	Loss 0.3307 (0.3118)	Acc@1 89.453 (89.180)	Acc@5 100.000 (99.636)
after train
n1: 30 for:
wAcc: 81.21695712885665
test acc: 81.87
Epoche: [78/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [78][0/196]	Time 0.176 (0.176)	Data 0.211 (0.211)	Loss 0.3355 (0.3355)	Acc@1 87.891 (87.891)	Acc@5 99.609 (99.609)
Epoch: [78][64/196]	Time 0.122 (0.122)	Data 0.000 (0.003)	Loss 0.3656 (0.3071)	Acc@1 85.938 (89.315)	Acc@5 100.000 (99.688)
Epoch: [78][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.2843 (0.3105)	Acc@1 88.672 (89.238)	Acc@5 100.000 (99.658)
Epoch: [78][192/196]	Time 0.124 (0.121)	Data 0.000 (0.001)	Loss 0.3622 (0.3141)	Acc@1 87.891 (89.178)	Acc@5 99.609 (99.636)
after train
n1: 30 for:
wAcc: 81.26342577371223
test acc: 83.83
Epoche: [79/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [79][0/196]	Time 0.187 (0.187)	Data 0.226 (0.226)	Loss 0.3507 (0.3507)	Acc@1 88.672 (88.672)	Acc@5 99.609 (99.609)
Epoch: [79][64/196]	Time 0.122 (0.123)	Data 0.000 (0.004)	Loss 0.4166 (0.2939)	Acc@1 85.938 (89.934)	Acc@5 98.828 (99.639)
Epoch: [79][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.4102 (0.3028)	Acc@1 86.328 (89.629)	Acc@5 98.828 (99.658)
Epoch: [79][192/196]	Time 0.115 (0.121)	Data 0.000 (0.001)	Loss 0.2777 (0.3083)	Acc@1 91.406 (89.415)	Acc@5 99.609 (99.670)
after train
n1: 30 for:
wAcc: 80.95051245319222
test acc: 75.44
Epoche: [80/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [80][0/196]	Time 0.155 (0.155)	Data 0.201 (0.201)	Loss 0.3372 (0.3372)	Acc@1 87.891 (87.891)	Acc@5 99.219 (99.219)
Epoch: [80][64/196]	Time 0.124 (0.123)	Data 0.000 (0.003)	Loss 0.2961 (0.3099)	Acc@1 89.062 (89.279)	Acc@5 99.219 (99.663)
Epoch: [80][128/196]	Time 0.128 (0.122)	Data 0.000 (0.002)	Loss 0.2837 (0.3120)	Acc@1 88.281 (89.147)	Acc@5 100.000 (99.685)
Epoch: [80][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.3183 (0.3078)	Acc@1 90.234 (89.334)	Acc@5 99.609 (99.692)
after train
n1: 30 for:
wAcc: 81.38574723884696
test acc: 77.64
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [81/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [81][0/196]	Time 0.187 (0.187)	Data 0.186 (0.186)	Loss 0.3391 (0.3391)	Acc@1 88.281 (88.281)	Acc@5 99.609 (99.609)
Epoch: [81][64/196]	Time 0.117 (0.122)	Data 0.000 (0.003)	Loss 0.3171 (0.2709)	Acc@1 87.109 (90.715)	Acc@5 100.000 (99.772)
Epoch: [81][128/196]	Time 0.137 (0.121)	Data 0.000 (0.002)	Loss 0.3234 (0.2934)	Acc@1 87.891 (89.892)	Acc@5 99.609 (99.685)
Epoch: [81][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.2439 (0.2970)	Acc@1 89.453 (89.698)	Acc@5 99.609 (99.694)
after train
n1: 30 for:
wAcc: 80.84918054988776
test acc: 81.28
Epoche: [82/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [82][0/196]	Time 0.164 (0.164)	Data 0.222 (0.222)	Loss 0.2678 (0.2678)	Acc@1 88.672 (88.672)	Acc@5 99.609 (99.609)
Epoch: [82][64/196]	Time 0.114 (0.124)	Data 0.000 (0.004)	Loss 0.3570 (0.3023)	Acc@1 85.938 (89.561)	Acc@5 100.000 (99.694)
Epoch: [82][128/196]	Time 0.117 (0.123)	Data 0.000 (0.002)	Loss 0.2464 (0.3040)	Acc@1 92.578 (89.538)	Acc@5 100.000 (99.664)
Epoch: [82][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.2929 (0.3058)	Acc@1 89.453 (89.538)	Acc@5 100.000 (99.666)
after train
n1: 30 for:
wAcc: 80.66880671069102
test acc: 80.91
Epoche: [83/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [83][0/196]	Time 0.149 (0.149)	Data 0.199 (0.199)	Loss 0.2352 (0.2352)	Acc@1 92.188 (92.188)	Acc@5 100.000 (100.000)
Epoch: [83][64/196]	Time 0.114 (0.121)	Data 0.000 (0.003)	Loss 0.2782 (0.2947)	Acc@1 89.062 (90.018)	Acc@5 100.000 (99.700)
Epoch: [83][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.2835 (0.2991)	Acc@1 90.625 (89.732)	Acc@5 99.609 (99.703)
Epoch: [83][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.3392 (0.3009)	Acc@1 89.062 (89.656)	Acc@5 99.609 (99.715)
after train
n1: 30 for:
wAcc: 80.8188098163017
test acc: 83.37
Epoche: [84/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [84][0/196]	Time 0.179 (0.179)	Data 0.215 (0.215)	Loss 0.2686 (0.2686)	Acc@1 91.016 (91.016)	Acc@5 99.609 (99.609)
Epoch: [84][64/196]	Time 0.115 (0.124)	Data 0.000 (0.004)	Loss 0.3422 (0.2846)	Acc@1 88.281 (90.222)	Acc@5 99.609 (99.694)
Epoch: [84][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.2722 (0.2957)	Acc@1 90.625 (89.807)	Acc@5 100.000 (99.724)
Epoch: [84][192/196]	Time 0.116 (0.121)	Data 0.000 (0.001)	Loss 0.2294 (0.2965)	Acc@1 92.188 (89.771)	Acc@5 99.609 (99.684)
after train
n1: 30 for:
wAcc: 79.77775934397306
test acc: 85.5
Epoche: [85/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [85][0/196]	Time 0.147 (0.147)	Data 0.211 (0.211)	Loss 0.2463 (0.2463)	Acc@1 91.797 (91.797)	Acc@5 99.609 (99.609)
Epoch: [85][64/196]	Time 0.120 (0.121)	Data 0.000 (0.003)	Loss 0.2768 (0.2915)	Acc@1 90.234 (89.886)	Acc@5 99.609 (99.663)
Epoch: [85][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.2638 (0.2953)	Acc@1 90.625 (89.859)	Acc@5 99.219 (99.652)
Epoch: [85][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.3002 (0.3022)	Acc@1 89.844 (89.573)	Acc@5 100.000 (99.648)
after train
n1: 30 for:
wAcc: 79.94454998035084
test acc: 83.46
Epoche: [86/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [86][0/196]	Time 0.162 (0.162)	Data 0.193 (0.193)	Loss 0.2762 (0.2762)	Acc@1 91.016 (91.016)	Acc@5 100.000 (100.000)
Epoch: [86][64/196]	Time 0.119 (0.123)	Data 0.000 (0.003)	Loss 0.3030 (0.2806)	Acc@1 88.672 (90.276)	Acc@5 100.000 (99.742)
Epoch: [86][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.3975 (0.2959)	Acc@1 84.375 (89.829)	Acc@5 100.000 (99.694)
Epoch: [86][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.3668 (0.3002)	Acc@1 87.500 (89.702)	Acc@5 99.219 (99.666)
after train
n1: 30 for:
wAcc: 81.10811209835909
test acc: 81.03
Epoche: [87/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [87][0/196]	Time 0.185 (0.185)	Data 0.182 (0.182)	Loss 0.2745 (0.2745)	Acc@1 91.797 (91.797)	Acc@5 99.219 (99.219)
Epoch: [87][64/196]	Time 0.116 (0.122)	Data 0.000 (0.003)	Loss 0.2900 (0.2922)	Acc@1 89.453 (90.060)	Acc@5 100.000 (99.754)
Epoch: [87][128/196]	Time 0.118 (0.121)	Data 0.000 (0.002)	Loss 0.2747 (0.2993)	Acc@1 92.188 (89.714)	Acc@5 99.609 (99.703)
Epoch: [87][192/196]	Time 0.128 (0.121)	Data 0.000 (0.001)	Loss 0.2774 (0.3025)	Acc@1 92.578 (89.660)	Acc@5 100.000 (99.698)
after train
n1: 30 for:
wAcc: 81.8446733967986
test acc: 81.51
Epoche: [88/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [88][0/196]	Time 0.168 (0.168)	Data 0.188 (0.188)	Loss 0.3781 (0.3781)	Acc@1 87.109 (87.109)	Acc@5 99.609 (99.609)
Epoch: [88][64/196]	Time 0.121 (0.123)	Data 0.000 (0.003)	Loss 0.2077 (0.3240)	Acc@1 93.359 (88.912)	Acc@5 99.609 (99.706)
Epoch: [88][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.3668 (0.3052)	Acc@1 85.938 (89.492)	Acc@5 100.000 (99.718)
Epoch: [88][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.2426 (0.3040)	Acc@1 91.797 (89.548)	Acc@5 100.000 (99.725)
after train
n1: 30 for:
wAcc: 81.43276536019118
test acc: 79.56
Epoche: [89/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [89][0/196]	Time 0.172 (0.172)	Data 0.218 (0.218)	Loss 0.2307 (0.2307)	Acc@1 92.578 (92.578)	Acc@5 100.000 (100.000)
Epoch: [89][64/196]	Time 0.124 (0.123)	Data 0.000 (0.004)	Loss 0.2218 (0.2894)	Acc@1 93.750 (90.162)	Acc@5 99.609 (99.802)
Epoch: [89][128/196]	Time 0.114 (0.122)	Data 0.000 (0.002)	Loss 0.3553 (0.2970)	Acc@1 88.281 (89.810)	Acc@5 99.219 (99.746)
Epoch: [89][192/196]	Time 0.113 (0.122)	Data 0.000 (0.001)	Loss 0.3501 (0.3061)	Acc@1 87.500 (89.548)	Acc@5 99.609 (99.717)
after train
n1: 30 for:
wAcc: 81.34952779344911
test acc: 84.43
Epoche: [90/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [90][0/196]	Time 0.185 (0.185)	Data 0.196 (0.196)	Loss 0.3613 (0.3613)	Acc@1 88.281 (88.281)	Acc@5 99.219 (99.219)
Epoch: [90][64/196]	Time 0.120 (0.123)	Data 0.000 (0.003)	Loss 0.1830 (0.3013)	Acc@1 93.359 (89.471)	Acc@5 100.000 (99.748)
Epoch: [90][128/196]	Time 0.126 (0.121)	Data 0.000 (0.002)	Loss 0.2004 (0.2978)	Acc@1 94.141 (89.683)	Acc@5 100.000 (99.718)
Epoch: [90][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.3286 (0.3043)	Acc@1 89.453 (89.518)	Acc@5 99.219 (99.690)
after train
n1: 30 for:
wAcc: 81.74198042251273
test acc: 82.5
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [91/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [91][0/196]	Time 0.153 (0.153)	Data 0.215 (0.215)	Loss 0.3624 (0.3624)	Acc@1 86.719 (86.719)	Acc@5 98.828 (98.828)
Epoch: [91][64/196]	Time 0.118 (0.124)	Data 0.000 (0.004)	Loss 0.3052 (0.2753)	Acc@1 88.281 (90.427)	Acc@5 99.609 (99.766)
Epoch: [91][128/196]	Time 0.121 (0.123)	Data 0.000 (0.002)	Loss 0.2816 (0.2867)	Acc@1 90.625 (90.116)	Acc@5 99.219 (99.758)
Epoch: [91][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.3059 (0.2922)	Acc@1 89.062 (89.979)	Acc@5 100.000 (99.725)
after train
n1: 30 for:
wAcc: 81.76341821550673
test acc: 83.09
Epoche: [92/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [92][0/196]	Time 0.157 (0.157)	Data 0.199 (0.199)	Loss 0.2716 (0.2716)	Acc@1 89.844 (89.844)	Acc@5 100.000 (100.000)
Epoch: [92][64/196]	Time 0.122 (0.123)	Data 0.000 (0.003)	Loss 0.3230 (0.2934)	Acc@1 87.500 (89.850)	Acc@5 100.000 (99.736)
Epoch: [92][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.2170 (0.3008)	Acc@1 92.188 (89.638)	Acc@5 100.000 (99.703)
Epoch: [92][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.2771 (0.2993)	Acc@1 89.844 (89.617)	Acc@5 99.609 (99.707)
after train
n1: 30 for:
wAcc: 81.33291937772975
test acc: 81.43
Epoche: [93/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [93][0/196]	Time 0.161 (0.161)	Data 0.198 (0.198)	Loss 0.2490 (0.2490)	Acc@1 91.797 (91.797)	Acc@5 99.609 (99.609)
Epoch: [93][64/196]	Time 0.115 (0.124)	Data 0.000 (0.003)	Loss 0.1864 (0.2181)	Acc@1 92.969 (92.680)	Acc@5 100.000 (99.748)
Epoch: [93][128/196]	Time 0.116 (0.122)	Data 0.000 (0.002)	Loss 0.1834 (0.1979)	Acc@1 93.750 (93.426)	Acc@5 99.609 (99.824)
Epoch: [93][192/196]	Time 0.122 (0.121)	Data 0.000 (0.001)	Loss 0.1534 (0.1878)	Acc@1 95.312 (93.788)	Acc@5 100.000 (99.860)
after train
n1: 30 for:
wAcc: 81.54301443939518
test acc: 91.59
Epoche: [94/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [94][0/196]	Time 0.178 (0.178)	Data 0.183 (0.183)	Loss 0.1499 (0.1499)	Acc@1 94.141 (94.141)	Acc@5 99.609 (99.609)
Epoch: [94][64/196]	Time 0.118 (0.123)	Data 0.000 (0.003)	Loss 0.1351 (0.1428)	Acc@1 96.484 (95.264)	Acc@5 100.000 (99.916)
Epoch: [94][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.1806 (0.1429)	Acc@1 94.531 (95.334)	Acc@5 99.609 (99.921)
Epoch: [94][192/196]	Time 0.116 (0.121)	Data 0.000 (0.001)	Loss 0.1426 (0.1426)	Acc@1 95.312 (95.375)	Acc@5 100.000 (99.923)
after train
n1: 30 for:
wAcc: 82.03074372766876
test acc: 91.7
Epoche: [95/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [95][0/196]	Time 0.179 (0.179)	Data 0.184 (0.184)	Loss 0.1484 (0.1484)	Acc@1 95.312 (95.312)	Acc@5 100.000 (100.000)
Epoch: [95][64/196]	Time 0.118 (0.124)	Data 0.000 (0.003)	Loss 0.1527 (0.1291)	Acc@1 95.312 (95.709)	Acc@5 100.000 (99.952)
Epoch: [95][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.1730 (0.1292)	Acc@1 95.312 (95.764)	Acc@5 100.000 (99.945)
Epoch: [95][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.1152 (0.1282)	Acc@1 96.094 (95.772)	Acc@5 100.000 (99.941)
after train
n1: 30 for:
wAcc: 82.4189313746745
test acc: 92.0
Epoche: [96/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [96][0/196]	Time 0.176 (0.176)	Data 0.192 (0.192)	Loss 0.0834 (0.0834)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [96][64/196]	Time 0.120 (0.124)	Data 0.000 (0.003)	Loss 0.1517 (0.1158)	Acc@1 94.531 (96.202)	Acc@5 100.000 (99.958)
Epoch: [96][128/196]	Time 0.115 (0.122)	Data 0.000 (0.002)	Loss 0.1313 (0.1170)	Acc@1 96.094 (96.127)	Acc@5 99.609 (99.945)
Epoch: [96][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.1416 (0.1187)	Acc@1 95.312 (96.039)	Acc@5 100.000 (99.939)
after train
n1: 30 for:
wAcc: 83.65723391494502
test acc: 91.8
Epoche: [97/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [97][0/196]	Time 0.177 (0.177)	Data 0.189 (0.189)	Loss 0.1276 (0.1276)	Acc@1 95.703 (95.703)	Acc@5 100.000 (100.000)
Epoch: [97][64/196]	Time 0.119 (0.125)	Data 0.000 (0.003)	Loss 0.1638 (0.1098)	Acc@1 93.359 (96.394)	Acc@5 100.000 (99.964)
Epoch: [97][128/196]	Time 0.121 (0.123)	Data 0.000 (0.002)	Loss 0.0938 (0.1079)	Acc@1 97.266 (96.515)	Acc@5 100.000 (99.955)
Epoch: [97][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.1328 (0.1082)	Acc@1 95.312 (96.438)	Acc@5 100.000 (99.960)
after train
n1: 30 for:
wAcc: 84.04668579855962
test acc: 91.97
Epoche: [98/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [98][0/196]	Time 0.185 (0.185)	Data 0.221 (0.221)	Loss 0.0908 (0.0908)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [98][64/196]	Time 0.118 (0.124)	Data 0.000 (0.004)	Loss 0.0903 (0.1110)	Acc@1 96.875 (96.208)	Acc@5 100.000 (99.928)
Epoch: [98][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.1044 (0.1063)	Acc@1 96.094 (96.394)	Acc@5 100.000 (99.949)
Epoch: [98][192/196]	Time 0.116 (0.122)	Data 0.000 (0.001)	Loss 0.1009 (0.1064)	Acc@1 96.875 (96.399)	Acc@5 100.000 (99.955)
after train
n1: 30 for:
wAcc: 84.59979021154334
test acc: 92.11
Epoche: [99/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [99][0/196]	Time 0.163 (0.163)	Data 0.181 (0.181)	Loss 0.0680 (0.0680)	Acc@1 97.656 (97.656)	Acc@5 100.000 (100.000)
Epoch: [99][64/196]	Time 0.121 (0.124)	Data 0.000 (0.003)	Loss 0.0901 (0.1023)	Acc@1 96.094 (96.605)	Acc@5 100.000 (99.952)
Epoch: [99][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.1085 (0.1022)	Acc@1 96.875 (96.605)	Acc@5 99.609 (99.952)
Epoch: [99][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.0841 (0.1002)	Acc@1 96.484 (96.604)	Acc@5 100.000 (99.951)
after train
n1: 30 for:
wAcc: 84.9599969360858
test acc: 92.21
Epoche: [100/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [100][0/196]	Time 0.151 (0.151)	Data 0.208 (0.208)	Loss 0.0812 (0.0812)	Acc@1 96.484 (96.484)	Acc@5 100.000 (100.000)
Epoch: [100][64/196]	Time 0.118 (0.122)	Data 0.000 (0.003)	Loss 0.0900 (0.0913)	Acc@1 97.266 (97.043)	Acc@5 100.000 (99.964)
Epoch: [100][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.1266 (0.0924)	Acc@1 93.750 (97.045)	Acc@5 100.000 (99.970)
Epoch: [100][192/196]	Time 0.123 (0.121)	Data 0.000 (0.001)	Loss 0.0815 (0.0922)	Acc@1 96.875 (97.021)	Acc@5 100.000 (99.976)
after train
n1: 30 for:
wAcc: 85.22246165795663
test acc: 91.85
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [101/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [101][0/196]	Time 0.152 (0.152)	Data 0.217 (0.217)	Loss 0.0448 (0.0448)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [101][64/196]	Time 0.119 (0.123)	Data 0.000 (0.004)	Loss 0.0693 (0.0820)	Acc@1 98.047 (97.314)	Acc@5 100.000 (99.976)
Epoch: [101][128/196]	Time 0.118 (0.121)	Data 0.000 (0.002)	Loss 0.1079 (0.0853)	Acc@1 96.875 (97.138)	Acc@5 100.000 (99.976)
Epoch: [101][192/196]	Time 0.133 (0.121)	Data 0.000 (0.001)	Loss 0.0734 (0.0871)	Acc@1 96.875 (97.090)	Acc@5 100.000 (99.966)
after train
n1: 30 for:
wAcc: 86.61860721032568
test acc: 91.68
Epoche: [102/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [102][0/196]	Time 0.177 (0.177)	Data 0.224 (0.224)	Loss 0.0685 (0.0685)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [102][64/196]	Time 0.120 (0.123)	Data 0.000 (0.004)	Loss 0.0498 (0.0811)	Acc@1 98.828 (97.368)	Acc@5 100.000 (99.970)
Epoch: [102][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.0808 (0.0844)	Acc@1 96.094 (97.199)	Acc@5 100.000 (99.970)
Epoch: [102][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.1043 (0.0839)	Acc@1 95.703 (97.245)	Acc@5 100.000 (99.966)
after train
n1: 30 for:
wAcc: 86.54326755149195
test acc: 92.11
Epoche: [103/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [103][0/196]	Time 0.148 (0.148)	Data 0.216 (0.216)	Loss 0.0647 (0.0647)	Acc@1 97.656 (97.656)	Acc@5 100.000 (100.000)
Epoch: [103][64/196]	Time 0.120 (0.121)	Data 0.000 (0.004)	Loss 0.0615 (0.0784)	Acc@1 98.047 (97.410)	Acc@5 100.000 (99.982)
Epoch: [103][128/196]	Time 0.123 (0.121)	Data 0.000 (0.002)	Loss 0.0768 (0.0761)	Acc@1 97.266 (97.526)	Acc@5 100.000 (99.985)
Epoch: [103][192/196]	Time 0.122 (0.121)	Data 0.000 (0.001)	Loss 0.1233 (0.0781)	Acc@1 95.703 (97.438)	Acc@5 100.000 (99.982)
after train
n1: 30 for:
wAcc: 86.98192043691155
test acc: 92.13
Epoche: [104/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [104][0/196]	Time 0.163 (0.163)	Data 0.214 (0.214)	Loss 0.0827 (0.0827)	Acc@1 96.875 (96.875)	Acc@5 100.000 (100.000)
Epoch: [104][64/196]	Time 0.120 (0.123)	Data 0.000 (0.003)	Loss 0.0718 (0.0844)	Acc@1 98.047 (97.151)	Acc@5 100.000 (99.988)
Epoch: [104][128/196]	Time 0.116 (0.121)	Data 0.000 (0.002)	Loss 0.0696 (0.0816)	Acc@1 97.266 (97.232)	Acc@5 100.000 (99.982)
Epoch: [104][192/196]	Time 0.114 (0.121)	Data 0.000 (0.001)	Loss 0.0924 (0.0807)	Acc@1 97.266 (97.324)	Acc@5 100.000 (99.970)
after train
n1: 30 for:
wAcc: 86.45680456782159
test acc: 92.21
Epoche: [105/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [105][0/196]	Time 0.186 (0.186)	Data 0.185 (0.185)	Loss 0.0597 (0.0597)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [105][64/196]	Time 0.120 (0.122)	Data 0.000 (0.003)	Loss 0.0660 (0.0702)	Acc@1 98.047 (97.734)	Acc@5 100.000 (99.982)
Epoch: [105][128/196]	Time 0.116 (0.121)	Data 0.000 (0.002)	Loss 0.1038 (0.0731)	Acc@1 96.094 (97.587)	Acc@5 100.000 (99.979)
Epoch: [105][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0583 (0.0740)	Acc@1 98.047 (97.557)	Acc@5 100.000 (99.984)
after train
n1: 30 for:
wAcc: 86.95519263704557
test acc: 92.3
Epoche: [106/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [106][0/196]	Time 0.180 (0.180)	Data 0.185 (0.185)	Loss 0.0747 (0.0747)	Acc@1 97.656 (97.656)	Acc@5 100.000 (100.000)
Epoch: [106][64/196]	Time 0.120 (0.122)	Data 0.000 (0.003)	Loss 0.0775 (0.0668)	Acc@1 98.828 (97.831)	Acc@5 100.000 (99.982)
Epoch: [106][128/196]	Time 0.130 (0.122)	Data 0.000 (0.002)	Loss 0.0908 (0.0687)	Acc@1 96.875 (97.705)	Acc@5 100.000 (99.988)
Epoch: [106][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.0522 (0.0709)	Acc@1 98.828 (97.602)	Acc@5 100.000 (99.980)
after train
n1: 30 for:
wAcc: 87.75249659269686
test acc: 92.27
Epoche: [107/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [107][0/196]	Time 0.147 (0.147)	Data 0.191 (0.191)	Loss 0.0443 (0.0443)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [107][64/196]	Time 0.115 (0.122)	Data 0.000 (0.003)	Loss 0.0574 (0.0673)	Acc@1 97.656 (97.812)	Acc@5 100.000 (99.988)
Epoch: [107][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.0659 (0.0679)	Acc@1 98.438 (97.684)	Acc@5 100.000 (99.979)
Epoch: [107][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0866 (0.0676)	Acc@1 97.266 (97.713)	Acc@5 100.000 (99.978)
after train
n1: 30 for:
wAcc: 88.32728907762223
test acc: 91.86
Epoche: [108/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [108][0/196]	Time 0.179 (0.179)	Data 0.212 (0.212)	Loss 0.0611 (0.0611)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [108][64/196]	Time 0.117 (0.122)	Data 0.000 (0.003)	Loss 0.0833 (0.0626)	Acc@1 96.484 (97.867)	Acc@5 100.000 (99.988)
Epoch: [108][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.0742 (0.0657)	Acc@1 98.438 (97.796)	Acc@5 100.000 (99.985)
Epoch: [108][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.0267 (0.0665)	Acc@1 99.609 (97.792)	Acc@5 100.000 (99.984)
after train
n1: 30 for:
wAcc: 87.3423344460559
test acc: 92.02
Epoche: [109/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [109][0/196]	Time 0.190 (0.190)	Data 0.209 (0.209)	Loss 0.0633 (0.0633)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [109][64/196]	Time 0.122 (0.123)	Data 0.000 (0.003)	Loss 0.0463 (0.0572)	Acc@1 98.047 (98.113)	Acc@5 100.000 (100.000)
Epoch: [109][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0772 (0.0605)	Acc@1 98.047 (97.989)	Acc@5 100.000 (99.988)
Epoch: [109][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0465 (0.0612)	Acc@1 98.438 (97.958)	Acc@5 100.000 (99.982)
after train
n1: 30 for:
wAcc: 87.96215474643834
test acc: 92.01
Epoche: [110/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [110][0/196]	Time 0.141 (0.141)	Data 0.214 (0.214)	Loss 0.0575 (0.0575)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [110][64/196]	Time 0.115 (0.119)	Data 0.000 (0.003)	Loss 0.0353 (0.0593)	Acc@1 99.609 (98.029)	Acc@5 100.000 (99.976)
Epoch: [110][128/196]	Time 0.125 (0.120)	Data 0.000 (0.002)	Loss 0.0770 (0.0608)	Acc@1 97.266 (97.965)	Acc@5 100.000 (99.979)
Epoch: [110][192/196]	Time 0.118 (0.120)	Data 0.000 (0.001)	Loss 0.0649 (0.0632)	Acc@1 97.266 (97.881)	Acc@5 100.000 (99.974)
after train
n1: 30 for:
wAcc: 88.74951012148398
test acc: 91.72
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [111/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [111][0/196]	Time 0.171 (0.171)	Data 0.197 (0.197)	Loss 0.0663 (0.0663)	Acc@1 97.656 (97.656)	Acc@5 100.000 (100.000)
Epoch: [111][64/196]	Time 0.118 (0.122)	Data 0.000 (0.003)	Loss 0.0490 (0.0560)	Acc@1 98.438 (98.257)	Acc@5 100.000 (99.982)
Epoch: [111][128/196]	Time 0.121 (0.121)	Data 0.000 (0.002)	Loss 0.0419 (0.0572)	Acc@1 98.438 (98.147)	Acc@5 100.000 (99.979)
Epoch: [111][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.0430 (0.0597)	Acc@1 98.828 (98.002)	Acc@5 100.000 (99.980)
after train
n1: 30 for:
wAcc: 88.88766685359548
test acc: 91.97
Epoche: [112/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [112][0/196]	Time 0.168 (0.168)	Data 0.193 (0.193)	Loss 0.0581 (0.0581)	Acc@1 97.656 (97.656)	Acc@5 100.000 (100.000)
Epoch: [112][64/196]	Time 0.115 (0.122)	Data 0.000 (0.003)	Loss 0.1006 (0.0515)	Acc@1 96.094 (98.317)	Acc@5 100.000 (99.994)
Epoch: [112][128/196]	Time 0.115 (0.121)	Data 0.000 (0.002)	Loss 0.0482 (0.0562)	Acc@1 98.438 (98.183)	Acc@5 100.000 (99.976)
Epoch: [112][192/196]	Time 0.119 (0.121)	Data 0.000 (0.001)	Loss 0.0401 (0.0566)	Acc@1 98.438 (98.160)	Acc@5 100.000 (99.984)
after train
n1: 30 for:
wAcc: 89.4421484874069
test acc: 92.33
Epoche: [113/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [113][0/196]	Time 0.178 (0.178)	Data 0.234 (0.234)	Loss 0.0621 (0.0621)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [113][64/196]	Time 0.120 (0.123)	Data 0.000 (0.004)	Loss 0.0631 (0.0552)	Acc@1 97.266 (98.155)	Acc@5 100.000 (99.988)
Epoch: [113][128/196]	Time 0.113 (0.122)	Data 0.000 (0.002)	Loss 0.0790 (0.0571)	Acc@1 98.047 (98.117)	Acc@5 100.000 (99.991)
Epoch: [113][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.0740 (0.0594)	Acc@1 97.656 (97.996)	Acc@5 100.000 (99.988)
after train
n1: 30 for:
wAcc: 89.93637760514677
test acc: 91.76
Epoche: [114/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [114][0/196]	Time 0.151 (0.151)	Data 0.214 (0.214)	Loss 0.0566 (0.0566)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [114][64/196]	Time 0.118 (0.123)	Data 0.000 (0.004)	Loss 0.0393 (0.0550)	Acc@1 99.219 (98.077)	Acc@5 100.000 (100.000)
Epoch: [114][128/196]	Time 0.129 (0.122)	Data 0.000 (0.002)	Loss 0.0457 (0.0587)	Acc@1 98.438 (98.023)	Acc@5 100.000 (99.997)
Epoch: [114][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0673 (0.0601)	Acc@1 97.656 (97.990)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 89.7591250861037
test acc: 91.97
Epoche: [115/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [115][0/196]	Time 0.181 (0.181)	Data 0.188 (0.188)	Loss 0.0298 (0.0298)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [115][64/196]	Time 0.119 (0.121)	Data 0.000 (0.003)	Loss 0.0435 (0.0505)	Acc@1 98.438 (98.275)	Acc@5 100.000 (99.994)
Epoch: [115][128/196]	Time 0.127 (0.121)	Data 0.000 (0.002)	Loss 0.0532 (0.0531)	Acc@1 98.438 (98.213)	Acc@5 100.000 (99.991)
Epoch: [115][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0363 (0.0538)	Acc@1 98.438 (98.182)	Acc@5 100.000 (99.988)
after train
n1: 30 for:
wAcc: 89.55047759322252
test acc: 92.19
Epoche: [116/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [116][0/196]	Time 0.177 (0.177)	Data 0.229 (0.229)	Loss 0.0629 (0.0629)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [116][64/196]	Time 0.118 (0.122)	Data 0.000 (0.004)	Loss 0.0392 (0.0552)	Acc@1 99.609 (98.299)	Acc@5 100.000 (99.982)
Epoch: [116][128/196]	Time 0.130 (0.123)	Data 0.000 (0.002)	Loss 0.0477 (0.0552)	Acc@1 98.828 (98.277)	Acc@5 100.000 (99.982)
Epoch: [116][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.0568 (0.0557)	Acc@1 98.047 (98.201)	Acc@5 100.000 (99.982)
after train
n1: 30 for:
wAcc: 89.79015890887831
test acc: 91.61
Epoche: [117/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [117][0/196]	Time 0.171 (0.171)	Data 0.187 (0.187)	Loss 0.0267 (0.0267)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [117][64/196]	Time 0.120 (0.121)	Data 0.000 (0.003)	Loss 0.0700 (0.0534)	Acc@1 98.047 (98.227)	Acc@5 100.000 (100.000)
Epoch: [117][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.0626 (0.0544)	Acc@1 97.266 (98.207)	Acc@5 100.000 (100.000)
Epoch: [117][192/196]	Time 0.122 (0.121)	Data 0.000 (0.001)	Loss 0.0712 (0.0534)	Acc@1 98.047 (98.213)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 89.62567297490764
test acc: 91.33
Epoche: [118/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [118][0/196]	Time 0.146 (0.146)	Data 0.215 (0.215)	Loss 0.0293 (0.0293)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [118][64/196]	Time 0.125 (0.122)	Data 0.000 (0.004)	Loss 0.0851 (0.0504)	Acc@1 97.656 (98.347)	Acc@5 100.000 (99.994)
Epoch: [118][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.0407 (0.0517)	Acc@1 99.219 (98.286)	Acc@5 100.000 (99.997)
Epoch: [118][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.0888 (0.0533)	Acc@1 97.266 (98.247)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 90.43964434094468
test acc: 91.45
Epoche: [119/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [119][0/196]	Time 0.166 (0.166)	Data 0.216 (0.216)	Loss 0.0374 (0.0374)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [119][64/196]	Time 0.123 (0.123)	Data 0.000 (0.004)	Loss 0.0507 (0.0473)	Acc@1 98.047 (98.371)	Acc@5 100.000 (100.000)
Epoch: [119][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.0772 (0.0508)	Acc@1 96.875 (98.289)	Acc@5 100.000 (99.997)
Epoch: [119][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0725 (0.0505)	Acc@1 97.656 (98.304)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 90.22582477153396
test acc: 91.86
Epoche: [120/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [120][0/196]	Time 0.194 (0.194)	Data 0.185 (0.185)	Loss 0.0523 (0.0523)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [120][64/196]	Time 0.116 (0.123)	Data 0.000 (0.003)	Loss 0.0679 (0.0548)	Acc@1 97.656 (98.095)	Acc@5 100.000 (99.982)
Epoch: [120][128/196]	Time 0.127 (0.123)	Data 0.000 (0.002)	Loss 0.0548 (0.0513)	Acc@1 98.047 (98.268)	Acc@5 100.000 (99.991)
Epoch: [120][192/196]	Time 0.123 (0.122)	Data 0.000 (0.001)	Loss 0.0285 (0.0516)	Acc@1 99.219 (98.255)	Acc@5 100.000 (99.992)
after train
n1: 30 for:
wAcc: 90.4165467502083
test acc: 91.78
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [121/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [121][0/196]	Time 0.150 (0.150)	Data 0.217 (0.217)	Loss 0.0519 (0.0519)	Acc@1 97.266 (97.266)	Acc@5 100.000 (100.000)
Epoch: [121][64/196]	Time 0.125 (0.122)	Data 0.000 (0.004)	Loss 0.0687 (0.0443)	Acc@1 97.266 (98.636)	Acc@5 100.000 (100.000)
Epoch: [121][128/196]	Time 0.113 (0.121)	Data 0.000 (0.002)	Loss 0.0526 (0.0476)	Acc@1 98.047 (98.386)	Acc@5 100.000 (99.997)
Epoch: [121][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0788 (0.0483)	Acc@1 97.266 (98.389)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 90.26453929097809
test acc: 91.42
Epoche: [122/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [122][0/196]	Time 0.182 (0.182)	Data 0.192 (0.192)	Loss 0.0449 (0.0449)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [122][64/196]	Time 0.124 (0.124)	Data 0.000 (0.003)	Loss 0.0605 (0.0484)	Acc@1 98.047 (98.444)	Acc@5 100.000 (99.994)
Epoch: [122][128/196]	Time 0.119 (0.123)	Data 0.000 (0.002)	Loss 0.0417 (0.0476)	Acc@1 98.438 (98.407)	Acc@5 100.000 (99.991)
Epoch: [122][192/196]	Time 0.123 (0.122)	Data 0.000 (0.001)	Loss 0.0277 (0.0474)	Acc@1 99.219 (98.413)	Acc@5 100.000 (99.990)
after train
n1: 30 for:
wAcc: 91.8078305647611
test acc: 91.81
Epoche: [123/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [123][0/196]	Time 0.199 (0.199)	Data 0.180 (0.180)	Loss 0.0623 (0.0623)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [123][64/196]	Time 0.118 (0.124)	Data 0.000 (0.003)	Loss 0.0384 (0.0464)	Acc@1 98.438 (98.498)	Acc@5 100.000 (99.994)
Epoch: [123][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.0651 (0.0467)	Acc@1 98.047 (98.522)	Acc@5 100.000 (99.997)
Epoch: [123][192/196]	Time 0.115 (0.122)	Data 0.000 (0.001)	Loss 0.0454 (0.0483)	Acc@1 98.438 (98.435)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.82387229962164
test acc: 91.23
Epoche: [124/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [124][0/196]	Time 0.167 (0.167)	Data 0.207 (0.207)	Loss 0.0448 (0.0448)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [124][64/196]	Time 0.122 (0.123)	Data 0.000 (0.003)	Loss 0.0386 (0.0449)	Acc@1 97.656 (98.498)	Acc@5 100.000 (100.000)
Epoch: [124][128/196]	Time 0.118 (0.123)	Data 0.000 (0.002)	Loss 0.0534 (0.0468)	Acc@1 98.438 (98.428)	Acc@5 100.000 (100.000)
Epoch: [124][192/196]	Time 0.116 (0.122)	Data 0.000 (0.001)	Loss 0.0562 (0.0478)	Acc@1 98.828 (98.411)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.82892642488346
test acc: 91.51
Epoche: [125/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [125][0/196]	Time 0.185 (0.185)	Data 0.184 (0.184)	Loss 0.0384 (0.0384)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [125][64/196]	Time 0.120 (0.123)	Data 0.000 (0.003)	Loss 0.0457 (0.0466)	Acc@1 98.828 (98.516)	Acc@5 100.000 (100.000)
Epoch: [125][128/196]	Time 0.125 (0.122)	Data 0.000 (0.002)	Loss 0.0436 (0.0458)	Acc@1 98.438 (98.528)	Acc@5 100.000 (99.994)
Epoch: [125][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.0556 (0.0474)	Acc@1 98.438 (98.474)	Acc@5 100.000 (99.992)
after train
n1: 30 for:
wAcc: 91.7794382150553
test acc: 91.64
Epoche: [126/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [126][0/196]	Time 0.172 (0.172)	Data 0.211 (0.211)	Loss 0.0424 (0.0424)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [126][64/196]	Time 0.118 (0.123)	Data 0.000 (0.003)	Loss 0.0505 (0.0463)	Acc@1 98.047 (98.377)	Acc@5 100.000 (99.994)
Epoch: [126][128/196]	Time 0.117 (0.123)	Data 0.000 (0.002)	Loss 0.0831 (0.0489)	Acc@1 97.266 (98.262)	Acc@5 99.609 (99.994)
Epoch: [126][192/196]	Time 0.115 (0.123)	Data 0.000 (0.001)	Loss 0.0587 (0.0500)	Acc@1 98.047 (98.251)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 91.79501766591204
test acc: 91.43
Epoche: [127/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [127][0/196]	Time 0.160 (0.160)	Data 0.220 (0.220)	Loss 0.0426 (0.0426)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [127][64/196]	Time 0.122 (0.123)	Data 0.000 (0.004)	Loss 0.0400 (0.0505)	Acc@1 98.438 (98.317)	Acc@5 100.000 (99.982)
Epoch: [127][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.0255 (0.0496)	Acc@1 99.609 (98.347)	Acc@5 100.000 (99.991)
Epoch: [127][192/196]	Time 0.113 (0.122)	Data 0.000 (0.001)	Loss 0.0674 (0.0511)	Acc@1 97.656 (98.306)	Acc@5 100.000 (99.988)
after train
n1: 30 for:
wAcc: 91.79170675709302
test acc: 91.86
Epoche: [128/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [128][0/196]	Time 0.177 (0.177)	Data 0.218 (0.218)	Loss 0.0623 (0.0623)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [128][64/196]	Time 0.124 (0.124)	Data 0.000 (0.004)	Loss 0.0315 (0.0468)	Acc@1 98.828 (98.401)	Acc@5 100.000 (100.000)
Epoch: [128][128/196]	Time 0.131 (0.123)	Data 0.000 (0.002)	Loss 0.0494 (0.0462)	Acc@1 99.219 (98.492)	Acc@5 100.000 (100.000)
Epoch: [128][192/196]	Time 0.115 (0.122)	Data 0.000 (0.001)	Loss 0.0305 (0.0481)	Acc@1 98.828 (98.413)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.81056892848876
test acc: 91.41
Epoche: [129/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [129][0/196]	Time 0.157 (0.157)	Data 0.224 (0.224)	Loss 0.0442 (0.0442)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [129][64/196]	Time 0.120 (0.122)	Data 0.000 (0.004)	Loss 0.0498 (0.0491)	Acc@1 98.828 (98.329)	Acc@5 100.000 (99.988)
Epoch: [129][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.0720 (0.0477)	Acc@1 97.266 (98.368)	Acc@5 100.000 (99.991)
Epoch: [129][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.0512 (0.0484)	Acc@1 97.656 (98.318)	Acc@5 100.000 (99.988)
after train
n1: 30 for:
wAcc: 91.73268361120459
test acc: 91.7
Epoche: [130/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [130][0/196]	Time 0.154 (0.154)	Data 0.216 (0.216)	Loss 0.0304 (0.0304)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [130][64/196]	Time 0.122 (0.123)	Data 0.000 (0.004)	Loss 0.0243 (0.0416)	Acc@1 99.609 (98.594)	Acc@5 100.000 (100.000)
Epoch: [130][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0405 (0.0441)	Acc@1 98.438 (98.547)	Acc@5 100.000 (99.997)
Epoch: [130][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.0786 (0.0461)	Acc@1 98.438 (98.486)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.70599952639562
test acc: 91.65
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [131/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [131][0/196]	Time 0.162 (0.162)	Data 0.190 (0.190)	Loss 0.0268 (0.0268)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [131][64/196]	Time 0.116 (0.123)	Data 0.000 (0.003)	Loss 0.0266 (0.0422)	Acc@1 99.219 (98.696)	Acc@5 100.000 (100.000)
Epoch: [131][128/196]	Time 0.119 (0.122)	Data 0.000 (0.002)	Loss 0.0752 (0.0435)	Acc@1 96.875 (98.592)	Acc@5 100.000 (99.997)
Epoch: [131][192/196]	Time 0.124 (0.121)	Data 0.000 (0.001)	Loss 0.0425 (0.0451)	Acc@1 98.047 (98.555)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.76454812333935
test acc: 91.31
Epoche: [132/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [132][0/196]	Time 0.159 (0.159)	Data 0.199 (0.199)	Loss 0.0395 (0.0395)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [132][64/196]	Time 0.116 (0.122)	Data 0.000 (0.003)	Loss 0.0468 (0.0526)	Acc@1 98.438 (98.215)	Acc@5 100.000 (100.000)
Epoch: [132][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.0538 (0.0509)	Acc@1 98.438 (98.295)	Acc@5 100.000 (100.000)
Epoch: [132][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0409 (0.0516)	Acc@1 98.047 (98.259)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.73811366910749
test acc: 91.22
Epoche: [133/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [133][0/196]	Time 0.175 (0.175)	Data 0.200 (0.200)	Loss 0.0719 (0.0719)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [133][64/196]	Time 0.118 (0.122)	Data 0.000 (0.003)	Loss 0.0327 (0.0503)	Acc@1 98.828 (98.347)	Acc@5 100.000 (99.994)
Epoch: [133][128/196]	Time 0.114 (0.121)	Data 0.000 (0.002)	Loss 0.0348 (0.0507)	Acc@1 98.828 (98.304)	Acc@5 100.000 (99.994)
Epoch: [133][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.1032 (0.0505)	Acc@1 96.484 (98.251)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 91.71625190535744
test acc: 91.65
Epoche: [134/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [134][0/196]	Time 0.176 (0.176)	Data 0.224 (0.224)	Loss 0.0422 (0.0422)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [134][64/196]	Time 0.118 (0.123)	Data 0.000 (0.004)	Loss 0.0396 (0.0489)	Acc@1 98.438 (98.480)	Acc@5 100.000 (99.994)
Epoch: [134][128/196]	Time 0.115 (0.121)	Data 0.000 (0.002)	Loss 0.0724 (0.0476)	Acc@1 97.266 (98.474)	Acc@5 100.000 (99.997)
Epoch: [134][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.0568 (0.0491)	Acc@1 98.438 (98.369)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.72498812903463
test acc: 91.79
Epoche: [135/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [135][0/196]	Time 0.151 (0.151)	Data 0.227 (0.227)	Loss 0.0475 (0.0475)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [135][64/196]	Time 0.115 (0.122)	Data 0.000 (0.004)	Loss 0.0362 (0.0496)	Acc@1 98.438 (98.341)	Acc@5 100.000 (100.000)
Epoch: [135][128/196]	Time 0.123 (0.121)	Data 0.000 (0.002)	Loss 0.0324 (0.0499)	Acc@1 98.828 (98.338)	Acc@5 100.000 (100.000)
Epoch: [135][192/196]	Time 0.117 (0.120)	Data 0.000 (0.001)	Loss 0.0284 (0.0511)	Acc@1 99.609 (98.308)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.72484559657316
test acc: 91.54
Epoche: [136/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [136][0/196]	Time 0.174 (0.174)	Data 0.215 (0.215)	Loss 0.0361 (0.0361)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [136][64/196]	Time 0.122 (0.121)	Data 0.000 (0.004)	Loss 0.0493 (0.0450)	Acc@1 97.266 (98.504)	Acc@5 100.000 (100.000)
Epoch: [136][128/196]	Time 0.115 (0.121)	Data 0.000 (0.002)	Loss 0.0564 (0.0466)	Acc@1 97.656 (98.459)	Acc@5 100.000 (100.000)
Epoch: [136][192/196]	Time 0.126 (0.121)	Data 0.000 (0.001)	Loss 0.0872 (0.0493)	Acc@1 96.094 (98.334)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.65364983574402
test acc: 91.71
Epoche: [137/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [137][0/196]	Time 0.173 (0.173)	Data 0.231 (0.231)	Loss 0.0342 (0.0342)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [137][64/196]	Time 0.123 (0.121)	Data 0.000 (0.004)	Loss 0.0191 (0.0492)	Acc@1 99.609 (98.383)	Acc@5 100.000 (99.994)
Epoch: [137][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.0946 (0.0503)	Acc@1 97.656 (98.292)	Acc@5 100.000 (99.994)
Epoch: [137][192/196]	Time 0.115 (0.121)	Data 0.000 (0.001)	Loss 0.0656 (0.0505)	Acc@1 96.875 (98.298)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 91.68041517937102
test acc: 91.44
Epoche: [138/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [138][0/196]	Time 0.186 (0.186)	Data 0.188 (0.188)	Loss 0.0436 (0.0436)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [138][64/196]	Time 0.117 (0.122)	Data 0.000 (0.003)	Loss 0.0480 (0.0508)	Acc@1 98.438 (98.377)	Acc@5 100.000 (100.000)
Epoch: [138][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.0320 (0.0530)	Acc@1 99.219 (98.283)	Acc@5 100.000 (100.000)
Epoch: [138][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.0698 (0.0526)	Acc@1 97.266 (98.290)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.66345890706498
test acc: 91.64
Epoche: [139/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [139][0/196]	Time 0.147 (0.147)	Data 0.224 (0.224)	Loss 0.0541 (0.0541)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [139][64/196]	Time 0.117 (0.122)	Data 0.000 (0.004)	Loss 0.0182 (0.0544)	Acc@1 100.000 (98.167)	Acc@5 100.000 (99.988)
Epoch: [139][128/196]	Time 0.131 (0.123)	Data 0.000 (0.002)	Loss 0.0374 (0.0532)	Acc@1 98.828 (98.162)	Acc@5 100.000 (99.991)
Epoch: [139][192/196]	Time 0.123 (0.122)	Data 0.000 (0.001)	Loss 0.0453 (0.0517)	Acc@1 98.438 (98.221)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 91.62002257758937
test acc: 91.93
Epoche: [140/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [140][0/196]	Time 0.143 (0.143)	Data 0.188 (0.188)	Loss 0.0492 (0.0492)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [140][64/196]	Time 0.123 (0.121)	Data 0.000 (0.003)	Loss 0.0331 (0.0437)	Acc@1 99.219 (98.630)	Acc@5 100.000 (99.994)
Epoch: [140][128/196]	Time 0.117 (0.121)	Data 0.000 (0.002)	Loss 0.0600 (0.0475)	Acc@1 98.047 (98.425)	Acc@5 100.000 (99.994)
Epoch: [140][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.0591 (0.0498)	Acc@1 98.438 (98.340)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.67616151028145
test acc: 91.65
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 16, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [141/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [141][0/196]	Time 0.170 (0.170)	Data 0.210 (0.210)	Loss 0.0305 (0.0305)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [141][64/196]	Time 0.119 (0.122)	Data 0.000 (0.003)	Loss 0.0377 (0.0407)	Acc@1 98.828 (98.660)	Acc@5 100.000 (100.000)
Epoch: [141][128/196]	Time 0.122 (0.121)	Data 0.000 (0.002)	Loss 0.0714 (0.0460)	Acc@1 98.047 (98.428)	Acc@5 100.000 (99.997)
Epoch: [141][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.0635 (0.0481)	Acc@1 97.266 (98.389)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.72651583151588
test acc: 90.99
Epoche: [142/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [142][0/196]	Time 0.159 (0.159)	Data 0.215 (0.215)	Loss 0.0712 (0.0712)	Acc@1 97.656 (97.656)	Acc@5 100.000 (100.000)
Epoch: [142][64/196]	Time 0.140 (0.122)	Data 0.000 (0.004)	Loss 0.0110 (0.0489)	Acc@1 100.000 (98.335)	Acc@5 100.000 (100.000)
Epoch: [142][128/196]	Time 0.128 (0.122)	Data 0.000 (0.002)	Loss 0.0590 (0.0528)	Acc@1 97.656 (98.219)	Acc@5 100.000 (99.994)
Epoch: [142][192/196]	Time 0.122 (0.121)	Data 0.000 (0.001)	Loss 0.0717 (0.0537)	Acc@1 96.484 (98.189)	Acc@5 100.000 (99.992)
after train
n1: 30 for:
wAcc: 91.59659859346706
test acc: 90.59
Epoche: [143/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [143][0/196]	Time 0.176 (0.176)	Data 0.191 (0.191)	Loss 0.0375 (0.0375)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [143][64/196]	Time 0.114 (0.123)	Data 0.000 (0.003)	Loss 0.0505 (0.0525)	Acc@1 98.047 (98.239)	Acc@5 100.000 (99.994)
Epoch: [143][128/196]	Time 0.124 (0.123)	Data 0.000 (0.002)	Loss 0.0614 (0.0531)	Acc@1 96.875 (98.192)	Acc@5 100.000 (99.994)
Epoch: [143][192/196]	Time 0.123 (0.122)	Data 0.000 (0.001)	Loss 0.0696 (0.0544)	Acc@1 96.875 (98.146)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.56201467574826
test acc: 90.93
Epoche: [144/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [144][0/196]	Time 0.168 (0.168)	Data 0.209 (0.209)	Loss 0.0311 (0.0311)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [144][64/196]	Time 0.127 (0.123)	Data 0.000 (0.003)	Loss 0.0936 (0.0505)	Acc@1 98.047 (98.341)	Acc@5 99.609 (99.994)
Epoch: [144][128/196]	Time 0.115 (0.123)	Data 0.000 (0.002)	Loss 0.0690 (0.0493)	Acc@1 98.438 (98.338)	Acc@5 100.000 (99.997)
Epoch: [144][192/196]	Time 0.122 (0.122)	Data 0.000 (0.001)	Loss 0.0780 (0.0501)	Acc@1 97.656 (98.316)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.55304307797084
test acc: 91.34
Epoche: [145/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [145][0/196]	Time 0.177 (0.177)	Data 0.219 (0.219)	Loss 0.0287 (0.0287)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [145][64/196]	Time 0.113 (0.122)	Data 0.000 (0.004)	Loss 0.0612 (0.0567)	Acc@1 98.047 (98.101)	Acc@5 100.000 (99.994)
Epoch: [145][128/196]	Time 0.115 (0.121)	Data 0.000 (0.002)	Loss 0.0495 (0.0551)	Acc@1 98.438 (98.150)	Acc@5 100.000 (99.994)
Epoch: [145][192/196]	Time 0.122 (0.121)	Data 0.000 (0.001)	Loss 0.0805 (0.0551)	Acc@1 97.656 (98.182)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 91.45545266006215
test acc: 91.4
Epoche: [146/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [146][0/196]	Time 0.157 (0.157)	Data 0.215 (0.215)	Loss 0.0436 (0.0436)	Acc@1 98.438 (98.438)	Acc@5 100.000 (100.000)
Epoch: [146][64/196]	Time 0.119 (0.121)	Data 0.000 (0.004)	Loss 0.0683 (0.0539)	Acc@1 97.266 (98.191)	Acc@5 100.000 (99.988)
Epoch: [146][128/196]	Time 0.119 (0.121)	Data 0.000 (0.002)	Loss 0.0401 (0.0529)	Acc@1 98.828 (98.271)	Acc@5 100.000 (99.994)
Epoch: [146][192/196]	Time 0.114 (0.121)	Data 0.000 (0.001)	Loss 0.0511 (0.0515)	Acc@1 98.047 (98.314)	Acc@5 100.000 (99.996)
after train
n1: 30 for:
wAcc: 91.4113978330624
test acc: 91.21
Epoche: [147/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [147][0/196]	Time 0.177 (0.177)	Data 0.221 (0.221)	Loss 0.0791 (0.0791)	Acc@1 96.875 (96.875)	Acc@5 100.000 (100.000)
Epoch: [147][64/196]	Time 0.122 (0.122)	Data 0.000 (0.004)	Loss 0.0554 (0.0510)	Acc@1 98.828 (98.311)	Acc@5 100.000 (99.994)
Epoch: [147][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.0456 (0.0538)	Acc@1 98.438 (98.183)	Acc@5 100.000 (99.994)
Epoch: [147][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.0767 (0.0544)	Acc@1 97.656 (98.136)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 91.4157518113469
test acc: 90.77
Epoche: [148/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [148][0/196]	Time 0.189 (0.189)	Data 0.190 (0.190)	Loss 0.0522 (0.0522)	Acc@1 98.047 (98.047)	Acc@5 100.000 (100.000)
Epoch: [148][64/196]	Time 0.121 (0.122)	Data 0.000 (0.003)	Loss 0.0423 (0.0517)	Acc@1 99.219 (98.293)	Acc@5 100.000 (99.988)
Epoch: [148][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.0614 (0.0524)	Acc@1 98.438 (98.262)	Acc@5 100.000 (99.988)
Epoch: [148][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.0800 (0.0526)	Acc@1 98.047 (98.219)	Acc@5 100.000 (99.990)
after train
n1: 30 for:
wAcc: 91.43336064263282
test acc: 90.64
Epoche: [149/180]; Lr: 0.010000000000000002
batch Size 256
befor train
Epoch: [149][0/196]	Time 0.169 (0.169)	Data 0.216 (0.216)	Loss 0.0485 (0.0485)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [149][64/196]	Time 0.122 (0.123)	Data 0.000 (0.004)	Loss 0.0468 (0.0528)	Acc@1 98.438 (98.353)	Acc@5 99.609 (99.994)
Epoch: [149][128/196]	Time 0.118 (0.122)	Data 0.000 (0.002)	Loss 0.0471 (0.0538)	Acc@1 98.047 (98.274)	Acc@5 100.000 (99.994)
Epoch: [149][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.0587 (0.0541)	Acc@1 98.047 (98.239)	Acc@5 100.000 (99.994)
after train
n1: 30 for:
wAcc: 91.37061116046418
test acc: 91.62
Epoche: [150/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [150][0/196]	Time 0.167 (0.167)	Data 0.211 (0.211)	Loss 0.0325 (0.0325)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [150][64/196]	Time 0.114 (0.123)	Data 0.000 (0.003)	Loss 0.0371 (0.0345)	Acc@1 99.219 (98.924)	Acc@5 100.000 (99.994)
Epoch: [150][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.0229 (0.0343)	Acc@1 100.000 (98.895)	Acc@5 100.000 (99.997)
Epoch: [150][192/196]	Time 0.120 (0.122)	Data 0.000 (0.001)	Loss 0.0235 (0.0329)	Acc@1 99.609 (98.962)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.33465860240742
test acc: 92.48
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 15, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [151/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [151][0/196]	Time 0.154 (0.154)	Data 0.196 (0.196)	Loss 0.0366 (0.0366)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [151][64/196]	Time 0.149 (0.121)	Data 0.000 (0.003)	Loss 0.0172 (0.0248)	Acc@1 99.609 (99.279)	Acc@5 100.000 (100.000)
Epoch: [151][128/196]	Time 0.118 (0.121)	Data 0.000 (0.002)	Loss 0.0119 (0.0244)	Acc@1 100.000 (99.313)	Acc@5 100.000 (100.000)
Epoch: [151][192/196]	Time 0.115 (0.121)	Data 0.000 (0.001)	Loss 0.0227 (0.0234)	Acc@1 99.219 (99.348)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.46493060312524
test acc: 92.62
Epoche: [152/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [152][0/196]	Time 0.185 (0.185)	Data 0.189 (0.189)	Loss 0.0110 (0.0110)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [152][64/196]	Time 0.119 (0.121)	Data 0.000 (0.003)	Loss 0.0104 (0.0205)	Acc@1 99.609 (99.483)	Acc@5 100.000 (100.000)
Epoch: [152][128/196]	Time 0.118 (0.121)	Data 0.000 (0.002)	Loss 0.0145 (0.0213)	Acc@1 100.000 (99.443)	Acc@5 100.000 (100.000)
Epoch: [152][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.0127 (0.0209)	Acc@1 99.609 (99.462)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.45560550617432
test acc: 92.64
Epoche: [153/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [153][0/196]	Time 0.171 (0.171)	Data 0.215 (0.215)	Loss 0.0417 (0.0417)	Acc@1 98.828 (98.828)	Acc@5 100.000 (100.000)
Epoch: [153][64/196]	Time 0.121 (0.123)	Data 0.000 (0.004)	Loss 0.0127 (0.0207)	Acc@1 100.000 (99.495)	Acc@5 100.000 (100.000)
Epoch: [153][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.0087 (0.0197)	Acc@1 100.000 (99.516)	Acc@5 100.000 (100.000)
Epoch: [153][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0151 (0.0193)	Acc@1 99.219 (99.514)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.57249529019109
test acc: 92.78
Epoche: [154/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [154][0/196]	Time 0.176 (0.176)	Data 0.190 (0.190)	Loss 0.0152 (0.0152)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [154][64/196]	Time 0.115 (0.122)	Data 0.000 (0.003)	Loss 0.0172 (0.0184)	Acc@1 99.609 (99.531)	Acc@5 100.000 (100.000)
Epoch: [154][128/196]	Time 0.117 (0.122)	Data 0.000 (0.002)	Loss 0.0109 (0.0184)	Acc@1 100.000 (99.488)	Acc@5 100.000 (100.000)
Epoch: [154][192/196]	Time 0.122 (0.121)	Data 0.000 (0.001)	Loss 0.0089 (0.0183)	Acc@1 100.000 (99.500)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.66919182229776
test acc: 92.86
Epoche: [155/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [155][0/196]	Time 0.168 (0.168)	Data 0.199 (0.199)	Loss 0.0101 (0.0101)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [155][64/196]	Time 0.120 (0.122)	Data 0.000 (0.003)	Loss 0.0231 (0.0162)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [155][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.0120 (0.0172)	Acc@1 99.609 (99.594)	Acc@5 100.000 (100.000)
Epoch: [155][192/196]	Time 0.114 (0.122)	Data 0.000 (0.001)	Loss 0.0243 (0.0172)	Acc@1 99.219 (99.575)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.71566022932208
test acc: 92.79
Epoche: [156/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [156][0/196]	Time 0.175 (0.175)	Data 0.194 (0.194)	Loss 0.0285 (0.0285)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [156][64/196]	Time 0.117 (0.121)	Data 0.000 (0.003)	Loss 0.0237 (0.0145)	Acc@1 99.219 (99.681)	Acc@5 100.000 (99.994)
Epoch: [156][128/196]	Time 0.123 (0.121)	Data 0.000 (0.002)	Loss 0.0136 (0.0157)	Acc@1 99.609 (99.628)	Acc@5 100.000 (99.997)
Epoch: [156][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.0255 (0.0155)	Acc@1 98.828 (99.634)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.84713394220609
test acc: 92.83
Epoche: [157/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [157][0/196]	Time 0.178 (0.178)	Data 0.216 (0.216)	Loss 0.0186 (0.0186)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [157][64/196]	Time 0.113 (0.121)	Data 0.000 (0.004)	Loss 0.0229 (0.0163)	Acc@1 99.219 (99.597)	Acc@5 100.000 (99.994)
Epoch: [157][128/196]	Time 0.115 (0.122)	Data 0.000 (0.002)	Loss 0.0060 (0.0153)	Acc@1 100.000 (99.655)	Acc@5 100.000 (99.997)
Epoch: [157][192/196]	Time 0.118 (0.121)	Data 0.000 (0.001)	Loss 0.0082 (0.0150)	Acc@1 100.000 (99.660)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 91.84549195485282
test acc: 92.88
Epoche: [158/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [158][0/196]	Time 0.179 (0.179)	Data 0.223 (0.223)	Loss 0.0069 (0.0069)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [158][64/196]	Time 0.118 (0.121)	Data 0.000 (0.004)	Loss 0.0080 (0.0136)	Acc@1 100.000 (99.742)	Acc@5 100.000 (100.000)
Epoch: [158][128/196]	Time 0.124 (0.122)	Data 0.000 (0.002)	Loss 0.0140 (0.0137)	Acc@1 99.609 (99.712)	Acc@5 100.000 (100.000)
Epoch: [158][192/196]	Time 0.114 (0.121)	Data 0.000 (0.001)	Loss 0.0173 (0.0147)	Acc@1 99.219 (99.666)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 91.95415726097892
test acc: 92.81
Epoche: [159/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [159][0/196]	Time 0.150 (0.150)	Data 0.219 (0.219)	Loss 0.0086 (0.0086)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [159][64/196]	Time 0.117 (0.122)	Data 0.000 (0.004)	Loss 0.0105 (0.0129)	Acc@1 100.000 (99.700)	Acc@5 100.000 (100.000)
Epoch: [159][128/196]	Time 0.117 (0.121)	Data 0.000 (0.002)	Loss 0.0087 (0.0138)	Acc@1 100.000 (99.703)	Acc@5 100.000 (100.000)
Epoch: [159][192/196]	Time 0.115 (0.121)	Data 0.000 (0.001)	Loss 0.0092 (0.0137)	Acc@1 100.000 (99.707)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.00214484369873
test acc: 92.78
Epoche: [160/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [160][0/196]	Time 0.170 (0.170)	Data 0.223 (0.223)	Loss 0.0090 (0.0090)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [160][64/196]	Time 0.119 (0.122)	Data 0.000 (0.004)	Loss 0.0187 (0.0144)	Acc@1 99.609 (99.675)	Acc@5 100.000 (100.000)
Epoch: [160][128/196]	Time 0.120 (0.122)	Data 0.000 (0.002)	Loss 0.0099 (0.0141)	Acc@1 100.000 (99.676)	Acc@5 100.000 (100.000)
Epoch: [160][192/196]	Time 0.116 (0.121)	Data 0.000 (0.001)	Loss 0.0193 (0.0138)	Acc@1 99.219 (99.660)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.00317811786852
test acc: 92.83
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 15, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [161/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [161][0/196]	Time 0.162 (0.162)	Data 0.197 (0.197)	Loss 0.0132 (0.0132)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [161][64/196]	Time 0.116 (0.122)	Data 0.000 (0.003)	Loss 0.0119 (0.0137)	Acc@1 99.609 (99.675)	Acc@5 100.000 (100.000)
Epoch: [161][128/196]	Time 0.138 (0.122)	Data 0.000 (0.002)	Loss 0.0188 (0.0132)	Acc@1 99.219 (99.682)	Acc@5 100.000 (100.000)
Epoch: [161][192/196]	Time 0.121 (0.122)	Data 0.000 (0.001)	Loss 0.0130 (0.0129)	Acc@1 100.000 (99.705)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.04351092495094
test acc: 92.79
Epoche: [162/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [162][0/196]	Time 0.169 (0.169)	Data 0.201 (0.201)	Loss 0.0097 (0.0097)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [162][64/196]	Time 0.114 (0.122)	Data 0.000 (0.003)	Loss 0.0161 (0.0127)	Acc@1 100.000 (99.760)	Acc@5 100.000 (100.000)
Epoch: [162][128/196]	Time 0.114 (0.121)	Data 0.000 (0.002)	Loss 0.0123 (0.0125)	Acc@1 100.000 (99.740)	Acc@5 100.000 (100.000)
Epoch: [162][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0101 (0.0123)	Acc@1 100.000 (99.741)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.1538329800524
test acc: 92.91
Epoche: [163/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [163][0/196]	Time 0.178 (0.178)	Data 0.212 (0.212)	Loss 0.0140 (0.0140)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [163][64/196]	Time 0.124 (0.122)	Data 0.000 (0.003)	Loss 0.0134 (0.0124)	Acc@1 99.609 (99.657)	Acc@5 100.000 (100.000)
Epoch: [163][128/196]	Time 0.121 (0.122)	Data 0.000 (0.002)	Loss 0.0238 (0.0119)	Acc@1 99.219 (99.706)	Acc@5 100.000 (100.000)
Epoch: [163][192/196]	Time 0.114 (0.121)	Data 0.000 (0.001)	Loss 0.0152 (0.0121)	Acc@1 100.000 (99.737)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.22285656709533
test acc: 92.86
Epoche: [164/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [164][0/196]	Time 0.172 (0.172)	Data 0.192 (0.192)	Loss 0.0077 (0.0077)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [164][64/196]	Time 0.127 (0.123)	Data 0.000 (0.003)	Loss 0.0227 (0.0129)	Acc@1 99.219 (99.730)	Acc@5 100.000 (100.000)
Epoch: [164][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.0106 (0.0123)	Acc@1 100.000 (99.730)	Acc@5 100.000 (100.000)
Epoch: [164][192/196]	Time 0.117 (0.122)	Data 0.000 (0.001)	Loss 0.0078 (0.0120)	Acc@1 100.000 (99.739)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.22782220571392
test acc: 92.82
Epoche: [165/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [165][0/196]	Time 0.170 (0.170)	Data 0.182 (0.182)	Loss 0.0234 (0.0234)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [165][64/196]	Time 0.119 (0.123)	Data 0.000 (0.003)	Loss 0.0068 (0.0130)	Acc@1 100.000 (99.688)	Acc@5 100.000 (100.000)
Epoch: [165][128/196]	Time 0.141 (0.123)	Data 0.000 (0.002)	Loss 0.0201 (0.0119)	Acc@1 99.219 (99.755)	Acc@5 100.000 (100.000)
Epoch: [165][192/196]	Time 0.126 (0.122)	Data 0.000 (0.001)	Loss 0.0053 (0.0122)	Acc@1 100.000 (99.733)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.29060268943142
test acc: 92.9
Epoche: [166/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [166][0/196]	Time 0.158 (0.158)	Data 0.187 (0.187)	Loss 0.0123 (0.0123)	Acc@1 99.219 (99.219)	Acc@5 100.000 (100.000)
Epoch: [166][64/196]	Time 0.121 (0.122)	Data 0.000 (0.003)	Loss 0.0197 (0.0123)	Acc@1 99.609 (99.694)	Acc@5 100.000 (100.000)
Epoch: [166][128/196]	Time 0.147 (0.122)	Data 0.000 (0.002)	Loss 0.0062 (0.0122)	Acc@1 100.000 (99.694)	Acc@5 100.000 (100.000)
Epoch: [166][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.0100 (0.0118)	Acc@1 100.000 (99.723)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.29088702449637
test acc: 92.77
Epoche: [167/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [167][0/196]	Time 0.184 (0.184)	Data 0.191 (0.191)	Loss 0.0084 (0.0084)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [167][64/196]	Time 0.122 (0.123)	Data 0.000 (0.003)	Loss 0.0067 (0.0098)	Acc@1 100.000 (99.880)	Acc@5 100.000 (100.000)
Epoch: [167][128/196]	Time 0.143 (0.122)	Data 0.000 (0.002)	Loss 0.0104 (0.0104)	Acc@1 99.609 (99.827)	Acc@5 100.000 (100.000)
Epoch: [167][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.0152 (0.0106)	Acc@1 99.609 (99.810)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.3507098504936
test acc: 92.77
Epoche: [168/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [168][0/196]	Time 0.168 (0.168)	Data 0.217 (0.217)	Loss 0.0070 (0.0070)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [168][64/196]	Time 0.117 (0.122)	Data 0.000 (0.004)	Loss 0.0179 (0.0111)	Acc@1 99.609 (99.796)	Acc@5 100.000 (100.000)
Epoch: [168][128/196]	Time 0.120 (0.121)	Data 0.000 (0.002)	Loss 0.0051 (0.0109)	Acc@1 100.000 (99.824)	Acc@5 100.000 (100.000)
Epoch: [168][192/196]	Time 0.121 (0.121)	Data 0.000 (0.001)	Loss 0.0180 (0.0107)	Acc@1 99.609 (99.806)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.41968367948157
test acc: 92.84
Epoche: [169/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [169][0/196]	Time 0.155 (0.155)	Data 0.210 (0.210)	Loss 0.0070 (0.0070)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [169][64/196]	Time 0.119 (0.122)	Data 0.000 (0.003)	Loss 0.0057 (0.0101)	Acc@1 100.000 (99.820)	Acc@5 100.000 (100.000)
Epoch: [169][128/196]	Time 0.117 (0.121)	Data 0.000 (0.002)	Loss 0.0112 (0.0101)	Acc@1 99.219 (99.803)	Acc@5 100.000 (100.000)
Epoch: [169][192/196]	Time 0.117 (0.121)	Data 0.000 (0.001)	Loss 0.0064 (0.0107)	Acc@1 100.000 (99.783)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.40632362542244
test acc: 92.9
Epoche: [170/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [170][0/196]	Time 0.179 (0.179)	Data 0.186 (0.186)	Loss 0.0068 (0.0068)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [170][64/196]	Time 0.120 (0.123)	Data 0.000 (0.003)	Loss 0.0084 (0.0105)	Acc@1 100.000 (99.778)	Acc@5 100.000 (100.000)
Epoch: [170][128/196]	Time 0.128 (0.122)	Data 0.000 (0.002)	Loss 0.0191 (0.0106)	Acc@1 99.609 (99.785)	Acc@5 100.000 (100.000)
Epoch: [170][192/196]	Time 0.119 (0.122)	Data 0.000 (0.001)	Loss 0.0045 (0.0105)	Acc@1 100.000 (99.787)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.34276308632457
test acc: 92.89
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 15, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Epoche: [171/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [171][0/196]	Time 0.160 (0.160)	Data 0.217 (0.217)	Loss 0.0093 (0.0093)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [171][64/196]	Time 0.127 (0.122)	Data 0.000 (0.004)	Loss 0.0071 (0.0101)	Acc@1 100.000 (99.832)	Acc@5 100.000 (100.000)
Epoch: [171][128/196]	Time 0.131 (0.122)	Data 0.000 (0.002)	Loss 0.0098 (0.0099)	Acc@1 100.000 (99.833)	Acc@5 100.000 (100.000)
Epoch: [171][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0113 (0.0101)	Acc@1 100.000 (99.822)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.3202440707613
test acc: 92.99
Epoche: [172/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [172][0/196]	Time 0.162 (0.162)	Data 0.221 (0.221)	Loss 0.0073 (0.0073)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [172][64/196]	Time 0.118 (0.122)	Data 0.000 (0.004)	Loss 0.0047 (0.0106)	Acc@1 100.000 (99.760)	Acc@5 100.000 (100.000)
Epoch: [172][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.0074 (0.0103)	Acc@1 100.000 (99.788)	Acc@5 100.000 (100.000)
Epoch: [172][192/196]	Time 0.118 (0.122)	Data 0.000 (0.001)	Loss 0.0053 (0.0101)	Acc@1 100.000 (99.804)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.4126050601748
test acc: 92.92
Epoche: [173/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [173][0/196]	Time 0.164 (0.164)	Data 0.215 (0.215)	Loss 0.0063 (0.0063)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [173][64/196]	Time 0.120 (0.122)	Data 0.000 (0.003)	Loss 0.0142 (0.0115)	Acc@1 99.609 (99.766)	Acc@5 100.000 (99.994)
Epoch: [173][128/196]	Time 0.123 (0.122)	Data 0.000 (0.002)	Loss 0.0153 (0.0104)	Acc@1 100.000 (99.800)	Acc@5 100.000 (99.997)
Epoch: [173][192/196]	Time 0.120 (0.121)	Data 0.000 (0.001)	Loss 0.0127 (0.0100)	Acc@1 99.609 (99.820)	Acc@5 100.000 (99.998)
after train
n1: 30 for:
wAcc: 92.50461045605246
test acc: 92.75
Epoche: [174/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [174][0/196]	Time 0.174 (0.174)	Data 0.215 (0.215)	Loss 0.0079 (0.0079)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [174][64/196]	Time 0.111 (0.123)	Data 0.000 (0.004)	Loss 0.0044 (0.0100)	Acc@1 100.000 (99.814)	Acc@5 100.000 (100.000)
Epoch: [174][128/196]	Time 0.122 (0.122)	Data 0.000 (0.002)	Loss 0.0119 (0.0096)	Acc@1 99.609 (99.815)	Acc@5 100.000 (100.000)
Epoch: [174][192/196]	Time 0.116 (0.122)	Data 0.000 (0.001)	Loss 0.0075 (0.0100)	Acc@1 100.000 (99.802)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.52911573296755
test acc: 92.79
Epoche: [175/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [175][0/196]	Time 0.160 (0.160)	Data 0.188 (0.188)	Loss 0.0142 (0.0142)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [175][64/196]	Time 0.116 (0.120)	Data 0.000 (0.003)	Loss 0.0087 (0.0105)	Acc@1 100.000 (99.736)	Acc@5 100.000 (100.000)
Epoch: [175][128/196]	Time 0.118 (0.120)	Data 0.000 (0.002)	Loss 0.0042 (0.0096)	Acc@1 100.000 (99.791)	Acc@5 100.000 (100.000)
Epoch: [175][192/196]	Time 0.120 (0.120)	Data 0.000 (0.001)	Loss 0.0200 (0.0095)	Acc@1 99.219 (99.804)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.51848028012576
test acc: 92.87
Epoche: [176/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [176][0/196]	Time 0.151 (0.151)	Data 0.199 (0.199)	Loss 0.0084 (0.0084)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [176][64/196]	Time 0.116 (0.120)	Data 0.000 (0.003)	Loss 0.0194 (0.0085)	Acc@1 99.219 (99.862)	Acc@5 100.000 (100.000)
Epoch: [176][128/196]	Time 0.124 (0.120)	Data 0.000 (0.002)	Loss 0.0072 (0.0094)	Acc@1 100.000 (99.821)	Acc@5 100.000 (100.000)
Epoch: [176][192/196]	Time 0.119 (0.120)	Data 0.000 (0.001)	Loss 0.0062 (0.0097)	Acc@1 100.000 (99.783)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.47755188654367
test acc: 92.87
Epoche: [177/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [177][0/196]	Time 0.157 (0.157)	Data 0.208 (0.208)	Loss 0.0118 (0.0118)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [177][64/196]	Time 0.122 (0.125)	Data 0.000 (0.003)	Loss 0.0167 (0.0099)	Acc@1 99.219 (99.754)	Acc@5 100.000 (100.000)
Epoch: [177][128/196]	Time 0.127 (0.125)	Data 0.000 (0.002)	Loss 0.0041 (0.0096)	Acc@1 100.000 (99.788)	Acc@5 100.000 (100.000)
Epoch: [177][192/196]	Time 0.119 (0.124)	Data 0.000 (0.001)	Loss 0.0060 (0.0099)	Acc@1 100.000 (99.794)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.48407811722828
test acc: 92.85
Epoche: [178/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [178][0/196]	Time 0.175 (0.175)	Data 0.200 (0.200)	Loss 0.0151 (0.0151)	Acc@1 99.609 (99.609)	Acc@5 100.000 (100.000)
Epoch: [178][64/196]	Time 0.127 (0.123)	Data 0.000 (0.003)	Loss 0.0072 (0.0093)	Acc@1 100.000 (99.838)	Acc@5 100.000 (100.000)
Epoch: [178][128/196]	Time 0.141 (0.123)	Data 0.000 (0.002)	Loss 0.0038 (0.0092)	Acc@1 100.000 (99.833)	Acc@5 100.000 (100.000)
Epoch: [178][192/196]	Time 0.124 (0.123)	Data 0.000 (0.001)	Loss 0.0090 (0.0090)	Acc@1 100.000 (99.836)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.649356306731
test acc: 92.83
Epoche: [179/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [179][0/196]	Time 0.181 (0.181)	Data 0.191 (0.191)	Loss 0.0084 (0.0084)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [179][64/196]	Time 0.121 (0.124)	Data 0.000 (0.003)	Loss 0.0106 (0.0100)	Acc@1 100.000 (99.754)	Acc@5 100.000 (100.000)
Epoch: [179][128/196]	Time 0.120 (0.124)	Data 0.000 (0.002)	Loss 0.0035 (0.0094)	Acc@1 100.000 (99.773)	Acc@5 100.000 (100.000)
Epoch: [179][192/196]	Time 0.122 (0.123)	Data 0.000 (0.001)	Loss 0.0146 (0.0094)	Acc@1 99.609 (99.779)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.7853336777837
test acc: 92.74
Epoche: [180/180]; Lr: 0.0010000000000000002
batch Size 256
befor train
Epoch: [180][0/196]	Time 0.162 (0.162)	Data 0.201 (0.201)	Loss 0.0076 (0.0076)	Acc@1 100.000 (100.000)	Acc@5 100.000 (100.000)
Epoch: [180][64/196]	Time 0.122 (0.124)	Data 0.000 (0.003)	Loss 0.0035 (0.0078)	Acc@1 100.000 (99.874)	Acc@5 100.000 (100.000)
Epoch: [180][128/196]	Time 0.123 (0.123)	Data 0.000 (0.002)	Loss 0.0052 (0.0086)	Acc@1 100.000 (99.849)	Acc@5 100.000 (100.000)
Epoch: [180][192/196]	Time 0.125 (0.123)	Data 0.000 (0.001)	Loss 0.0093 (0.0088)	Acc@1 99.609 (99.840)	Acc@5 100.000 (100.000)
after train
n1: 30 for:
wAcc: 92.80264754239234
test acc: 92.74
Prune Train:
[INFO] Force the sparse filters to zero...


 Reconf: 
[(0, None)]: [16, 3, 3, 3]


 Reconf: 
[(3, 0)]: [16, 15, 3, 3]


 Reconf: 
[(3, 3)]: [16, 16, 3, 3]


 Reconf: 
[(4, 0)]: [16, 16, 3, 3]


 Reconf: 
[(4, 3)]: [16, 16, 3, 3]


 Reconf: 
[(5, 0)]: [16, 16, 3, 3]


 Reconf: 
[(5, 3)]: [16, 16, 3, 3]


 Reconf: 
[(6, 0)]: [16, 16, 3, 3]


 Reconf: 
[(6, 3)]: [16, 16, 3, 3]


 Reconf: 
[(7, 0)]: [16, 16, 3, 3]


 Reconf: 
[(7, 3)]: [16, 16, 3, 3]


 Reconf: 
[(8, 0)]: [32, 16, 3, 3]


 Reconf: 
[(8, 3)]: [32, 32, 3, 3]


 Reconf: 
[(9, 0)]: [32, 16, 1, 1]


 Reconf: 
[(10, 0)]: [32, 32, 3, 3]


 Reconf: 
[(10, 3)]: [32, 32, 3, 3]


 Reconf: 
[(11, 0)]: [32, 32, 3, 3]


 Reconf: 
[(11, 3)]: [32, 32, 3, 3]


 Reconf: 
[(12, 0)]: [32, 32, 3, 3]


 Reconf: 
[(12, 3)]: [32, 32, 3, 3]


 Reconf: 
[(13, 0)]: [32, 32, 3, 3]


 Reconf: 
[(13, 3)]: [32, 32, 3, 3]


 Reconf: 
[(14, 0)]: [64, 32, 3, 3]


 Reconf: 
[(14, 3)]: [64, 64, 3, 3]


 Reconf: 
[(15, 0)]: [64, 32, 1, 1]


 Reconf: 
[(16, 0)]: [64, 64, 3, 3]


 Reconf: 
[(16, 3)]: [64, 64, 3, 3]


 Reconf: 
[(17, 0)]: [64, 64, 3, 3]


 Reconf: 
[(17, 3)]: [64, 64, 3, 3]


 Reconf: 
[(18, 0)]: [64, 64, 3, 3]


 Reconf: 
[(18, 3)]: [64, 64, 3, 3]


 Reconf: 
[(19, 0)]: [64, 64, 3, 3]


 Reconf: 
[(19, 3)]: [64, 64, 3, 3]


 Reconf: 
[(21, None)]: [10, 64]
i: 0
adj layrs: []
i: 1
adj layrs: []
i: 2
adj layrs: []
i: 3
0: (i,j): (3,3)
adj layrs: [(3, 0), (3, 3)]

> Adj_lyr:  (3, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 4
0: (i,j): (4,3)
adj layrs: [(4, 0), (4, 3)]

> Adj_lyr:  (4, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 5
0: (i,j): (5,3)
adj layrs: [(5, 0), (5, 3)]

> Adj_lyr:  (5, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 6
0: (i,j): (6,3)
adj layrs: [(6, 0), (6, 3)]

> Adj_lyr:  (6, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 7
0: (i,j): (7,3)
adj layrs: [(7, 0), (7, 3)]

> Adj_lyr:  (7, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
i: 8
0: (i,j): (8,3)
adj layrs: [(8, 0), (8, 3)]

> Adj_lyr:  (8, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 9
adj layrs: []
i: 10
0: (i,j): (10,3)
adj layrs: [(10, 0), (10, 3)]

> Adj_lyr:  (10, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 11
0: (i,j): (11,3)
adj layrs: [(11, 0), (11, 3)]

> Adj_lyr:  (11, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 12
0: (i,j): (12,3)
adj layrs: [(12, 0), (12, 3)]

> Adj_lyr:  (12, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 13
0: (i,j): (13,3)
adj layrs: [(13, 0), (13, 3)]

> Adj_lyr:  (13, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
i: 14
0: (i,j): (14,3)
adj layrs: [(14, 0), (14, 3)]

> Adj_lyr:  (14, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 15
adj layrs: []
i: 16
0: (i,j): (16,3)
adj layrs: [(16, 0), (16, 3)]

> Adj_lyr:  (16, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 17
0: (i,j): (17,3)
adj layrs: [(17, 0), (17, 3)]

> Adj_lyr:  (17, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 18
0: (i,j): (18,3)
adj layrs: [(18, 0), (18, 3)]

> Adj_lyr:  (18, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 19
0: (i,j): (19,3)
adj layrs: [(19, 0), (19, 3)]

> Adj_lyr:  (19, 0)
>IDX: 0; IDX+1: 1

>Edge:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
i: 20
adj layrs: []
i: 21
adj layrs: []
listI (i,j): 3,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 4,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 5,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 6,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 7,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 8,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 0,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 3,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 4,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 5,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 6,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listO (i,j): 7,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
listI (i,j): 10,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 11,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 12,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 13,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 14,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 8,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 9,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 10,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 11,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 12,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listO (i,j): 13,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] 
listI (i,j): 16,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 17,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 18,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 19,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listI (i,j): 21,None; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 14,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 15,0; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 16,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 17,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 18,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
listO (i,j): 19,3; edges: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] 
Dense channels: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
[INFO] Squeezing the sparse model to dense one...
dense chs: {(0, None): {'in_chs': [0, 1, 2], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 1}, (3, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 2}, (3, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 3}, (4, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 4}, (4, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 5}, (5, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 6}, (5, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 7}, (6, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 8}, (6, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 9}, (7, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 10}, (7, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'idx': 11}, (8, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 12}, (8, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 13}, (9, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 14}, (10, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 15}, (10, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 16}, (11, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 17}, (11, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 18}, (12, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 19}, (12, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 20}, (13, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 21}, (13, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'idx': 22}, (14, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 23}, (14, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 24}, (15, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 25}, (16, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 26}, (16, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 27}, (17, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 28}, (17, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 29}, (18, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 30}, (18, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 31}, (19, 0): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 32}, (19, 3): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'idx': 33}, (21, None): {'in_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 'out_chs': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'idx': 34}}
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (0, None)
in chs: [0, 1, 2]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (0, None)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (3, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (3, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (4, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (4, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (5, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (5, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (6, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (6, 3)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 0)
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (7, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (7, 3)
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (8, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (8, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (8, 3)
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))

Name:  (9, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (9, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (10, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (10, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (11, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (11, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (12, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (12, 3)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 0)
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (13, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (13, 3)
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

Name:  (14, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (14, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (14, 3)
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))

Name:  (15, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (15, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (16, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (16, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (17, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (17, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (18, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (18, 3)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 0)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 0)
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

Name:  (19, 3)
in chs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
Module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)

WName:  (19, 3)
module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
Size of Weight: torch.Size([16, 3, 3, 3])
module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Size of Weight: torch.Size([16])
module: ReLU(inplace=True)
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
Size of Weight: torch.Size([16, 16, 3, 3])
Size of Weight: torch.Size([16])
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Sequential: [Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
module: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 16, 1, 1])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
Size of Weight: torch.Size([32, 32, 3, 3])
Size of Weight: torch.Size([32])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 32, 1, 1])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
Size of Weight: torch.Size([64, 64, 3, 3])
Size of Weight: torch.Size([64])
module: AdaptiveAvgPool2d(output_size=(1, 1))
module: Linear(in_features=64, out_features=10, bias=True)
Size of Weight: torch.Size([10, 64])
Max memory: 113.6800768
 24.328s  