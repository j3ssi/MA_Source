import torch.nn as nn
__all__ = ['resnet32_flat']
class ResNet32(nn.Module):
	def __init__(self, num_classes=10):
		super(ResNet32, self).__init__()
		self.conv1 = nn.Conv2d(3, 8, kernel_size=3, stride=1, padding=1, bias=False)
		self.bn1 = nn.BatchNorm2d(8)
		self.conv4 = nn.Conv2d(8, 1, kernel_size=3, stride=1, padding=1, bias=False)
		self.bn4 = nn.BatchNorm2d(1)
		self.conv5 = nn.Conv2d(1, 8, kernel_size=3, stride=1, padding=1, bias=False)
		self.bn5 = nn.BatchNorm2d(8)
		self.conv8 = nn.Conv2d(8, 1, kernel_size=3, stride=1, padding=1, bias=False)
		self.bn8 = nn.BatchNorm2d(1)
		self.conv9 = nn.Conv2d(1, 8, kernel_size=3, stride=1, padding=1, bias=False)
		self.bn9 = nn.BatchNorm2d(8)
		self.conv12 = nn.Conv2d(8, 10, kernel_size=3, stride=2, padding=1, bias=False)
		self.bn12 = nn.BatchNorm2d(10)
		self.conv13 = nn.Conv2d(10, 17, kernel_size=3, stride=1, padding=1, bias=False)
		self.bn13 = nn.BatchNorm2d(17)
		self.conv14 = nn.Conv2d(8, 17, kernel_size=1, stride=2, padding=0, bias=False)
		self.bn14 = nn.BatchNorm2d(17)
		self.conv23 = nn.Conv2d(17, 13, kernel_size=3, stride=2, padding=1, bias=False)
		self.bn23 = nn.BatchNorm2d(13)
		self.conv24 = nn.Conv2d(13, 14, kernel_size=3, stride=1, padding=1, bias=False)
		self.bn24 = nn.BatchNorm2d(14)
		self.conv25 = nn.Conv2d(17, 14, kernel_size=1, stride=2, padding=0, bias=False)
		self.bn25 = nn.BatchNorm2d(14)
		self.conv26 = nn.Conv2d(14, 6, kernel_size=3, stride=1, padding=1, bias=False)
		self.bn26 = nn.BatchNorm2d(6)
		self.conv27 = nn.Conv2d(6, 14, kernel_size=3, stride=1, padding=1, bias=False)
		self.bn27 = nn.BatchNorm2d(14)
		self.avgpool = nn.AvgPool2d(8)
		self.relu = nn.ReLU(inplace=True)
		self.fc = nn.Linear(14, num_classes)
	def forward(self, x):
		x = self.conv1(x)
		x = self.bn1(x)
		_x = self.relu(x)
		x = self.conv4(_x)
		x = self.bn4(x)
		x = self.relu(x)
		x = self.conv5(x)
		x = self.bn5(x)
		_x = _x + x
		_x = self.relu(_x)
		x = self.conv8(_x)
		x = self.bn8(x)
		x = self.relu(x)
		x = self.conv9(x)
		x = self.bn9(x)
		_x = _x + x
		_x = self.relu(_x)
		x = self.conv12(_x)
		x = self.bn12(x)
		x = self.relu(x)
		x = self.conv13(x)
		x = self.bn13(x)
		_x = self.conv14(_x)
		_x = self.bn14(_x)
		_x = _x + x
		_x = self.relu(_x)
		x = self.conv23(_x)
		x = self.bn23(x)
		x = self.relu(x)
		x = self.conv24(x)
		x = self.bn24(x)
		_x = self.conv25(_x)
		_x = self.bn25(_x)
		_x = _x + x
		_x = self.relu(_x)
		x = self.conv26(_x)
		x = self.bn26(x)
		x = self.relu(x)
		x = self.conv27(x)
		x = self.bn27(x)
		_x = _x + x
		_x = self.relu(_x)
		x = self.avgpool(_x)
		x = x.view(x.size(0), -1)
		x = self.fc(x)
		return x
def resnet32_flat(**kwargs):
	model = ResNet32(**kwargs)
	return model
