no display found. Using non-interactive Agg backend
[5, 5, 5]
[16, 32, 64]
Pytorch Training main.py; workers: 6; numOfStages: 3; layerinBlock: 2;widthofFirstLayer: 16; Epochen: 180; reset: False; start epoche: 1; test: True pathtoModell: ./output/experimente4/test1/model.nn; checkpoint: ./output/experimente4/test1; saveModell: True; LR: 0.1
random number: 3996
Files already downloaded and verified
width: 16

Arch Num:  [[2, 2, 2, 2, 2], [3, 2, 2, 2, 2], [3, 2, 2, 2, 2]]
conv0: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0
bn1: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
Relu; i: 2
i : 2; block: 0
Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 2; block: 0
Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 2
i : 3; block: 1
Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 3; block: 1
Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 3
i : 4; block: 2
Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 4; block: 2
Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 4
i : 5; block: 3
Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 5; block: 3
Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 5
i : 6; block: 4
Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 6; block: 4
Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 6
i : 7; block: 0
Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False); i=0; if 1
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i=0
relu: 0
i : 7; block: 0
Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
i : 7; block: 0
Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False); i: 2 if 2
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 2
seq: Sequential(
  (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 7
seq1: Sequential(
  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 8
i : 8; block: 1
Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 8; block: 1
Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 8
i : 9; block: 2
Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 9; block: 2
Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 9
i : 10; block: 3
Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 10; block: 3
Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 10
i : 11; block: 4
Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 11; block: 4
Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 11
i : 12; block: 0
Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False); i=0; if 1
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i=0
relu: 0
i : 12; block: 0
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
i : 12; block: 0
Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False); i: 2 if 2
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 2
seq: Sequential(
  (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 12
seq1: Sequential(
  (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 13
i : 13; block: 1
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 13; block: 1
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 13
i : 14; block: 2
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 14; block: 2
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 14
i : 15; block: 3
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 15; block: 3
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 15
i : 16; block: 4
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 if 4
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 0
relu; i: 0
i : 16; block: 4
Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 1 if 3
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1
seq: Sequential(
  (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
); i: 16
avgpoll: AdaptiveAvgPool2d(output_size=(1, 1))
linear: Linear(in_features=64, out_features=10, bias=True)
Modell Erstellung
N2N(
  (module_list): ModuleList(
    (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (4): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (5): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (6): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (7): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (8): Sequential(
      (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (9): Sequential(
      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (10): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (11): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (12): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (13): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (14): Sequential(
      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (15): Sequential(
      (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (16): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (17): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (18): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (19): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (20): AdaptiveAvgPool2d(output_size=(1, 1))
    (21): Linear(in_features=64, out_features=10, bias=True)
  )
  (relu): ReLU(inplace=True)
)
device count: 4
Startepoche: 1
deeper epoch: 0
Epoche: [1/180]; Lr: 0.1
batch Size 256
befor train
/home/jessica.buehler/venv/lib/python3.6/site-packages/torch/cuda/memory.py:234: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  FutureWarning)
Epoch: [1][0/196]	Time 0.629 (0.629)	Data 0.282 (0.282)	Loss 2.4527 (2.4527)	Acc@1 10.547 (10.547)	Acc@5 51.562 (51.562)
Epoch: [1][64/196]	Time 0.552 (0.427)	Data 0.000 (0.005)	Loss 1.7742 (2.0594)	Acc@1 33.203 (23.173)	Acc@5 89.062 (75.415)
Epoch: [1][128/196]	Time 0.541 (0.420)	Data 0.000 (0.002)	Loss 1.4497 (1.8547)	Acc@1 44.531 (30.002)	Acc@5 92.188 (82.168)
Epoch: [1][192/196]	Time 0.548 (0.417)	Data 0.000 (0.002)	Loss 1.4203 (1.7168)	Acc@1 48.438 (35.446)	Acc@5 92.969 (85.490)
after train
n1: 1 for:
wAcc: 42.1
test acc: 42.1
IndexL: 0
Module= Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); indexL: 1
indexConv: 1
modulelist[indexConv]: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
indexConv: 2
modulelist[indexConv]: ReLU(inplace=True)
indexConv: 3
modulelist[indexConv]: Sequential(
  (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
module1: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); indexConv: 3; index: 3
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 3, 3, 3); new shape: (8, 3, 3, 3)
new shape: (24, 3, 3, 3)
module after: Conv2d(3, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 3, 3, 3])
Batchnorm1
oldw2 shape: (16, 16, 3, 3); new shape w2: (16, 8, 3, 3)
new shape: (16, 24, 3, 3)
module1 after: Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 3
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 3
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 3
module1: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 3
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 24, 3, 3); new shape: (8, 24, 3, 3)
new shape: (24, 24, 3, 3)
module after: Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 24, 3, 3])
Batchnorm1
oldw2 shape: (16, 16, 3, 3); new shape w2: (16, 8, 3, 3)
new shape: (16, 24, 3, 3)
module1 after: Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 3
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 3
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 3
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 4
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 24, 3, 3); new shape: (8, 24, 3, 3)
new shape: (24, 24, 3, 3)
module after: Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 24, 3, 3])
Batchnorm1
oldw2 shape: (16, 16, 3, 3); new shape w2: (16, 8, 3, 3)
new shape: (16, 24, 3, 3)
module1 after: Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 4
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 4
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 4
module1: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 4
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 24, 3, 3); new shape: (8, 24, 3, 3)
new shape: (24, 24, 3, 3)
module after: Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 24, 3, 3])
Batchnorm1
oldw2 shape: (16, 16, 3, 3); new shape w2: (16, 8, 3, 3)
new shape: (16, 24, 3, 3)
module1 after: Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 4
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 4
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 4
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 5
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 24, 3, 3); new shape: (8, 24, 3, 3)
new shape: (24, 24, 3, 3)
module after: Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 24, 3, 3])
Batchnorm1
oldw2 shape: (16, 16, 3, 3); new shape w2: (16, 8, 3, 3)
new shape: (16, 24, 3, 3)
module1 after: Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 5
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 5
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 5
module1: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 5
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 24, 3, 3); new shape: (8, 24, 3, 3)
new shape: (24, 24, 3, 3)
module after: Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 24, 3, 3])
Batchnorm1
oldw2 shape: (16, 16, 3, 3); new shape w2: (16, 8, 3, 3)
new shape: (16, 24, 3, 3)
module1 after: Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 5
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 5
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 5
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 6
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 24, 3, 3); new shape: (8, 24, 3, 3)
new shape: (24, 24, 3, 3)
module after: Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 24, 3, 3])
Batchnorm1
oldw2 shape: (16, 16, 3, 3); new shape w2: (16, 8, 3, 3)
new shape: (16, 24, 3, 3)
module1 after: Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 6
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 6
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 6
module1: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 6
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 24, 3, 3); new shape: (8, 24, 3, 3)
new shape: (24, 24, 3, 3)
module after: Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 24, 3, 3])
Batchnorm1
oldw2 shape: (16, 16, 3, 3); new shape w2: (16, 8, 3, 3)
new shape: (16, 24, 3, 3)
module1 after: Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 6
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 6
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 6
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 7
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 24, 3, 3); new shape: (8, 24, 3, 3)
new shape: (24, 24, 3, 3)
module after: Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 24, 3, 3])
Batchnorm1
oldw2 shape: (16, 16, 3, 3); new shape w2: (16, 8, 3, 3)
new shape: (16, 24, 3, 3)
module1 after: Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 7
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 7
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 7
module1: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 7
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 24, 3, 3); new shape: (8, 24, 3, 3)
new shape: (24, 24, 3, 3)
module after: Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 24, 3, 3])
Batchnorm1
oldw2 shape: (16, 16, 3, 3); new shape w2: (16, 8, 3, 3)
new shape: (16, 24, 3, 3)
module1 after: Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 7
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 7
 moduleBn: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 7
Module= Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 8
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (16, 24, 3, 3); new shape: (8, 24, 3, 3)
new shape: (24, 24, 3, 3)
module after: Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([24, 24, 3, 3])
Batchnorm1
oldw2 shape: (32, 16, 3, 3); new shape w2: (32, 8, 3, 3)
new shape: (32, 24, 3, 3)
module1 after: Conv2d(24, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
IndexL: 8
Module= Conv2d(24, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False); i: 0 indexL: 8
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 8
module1: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 8
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 24, 3, 3); new shape: (16, 24, 3, 3)
new shape: (48, 24, 3, 3)
module after: Conv2d(24, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
size of weight after: torch.Size([48, 24, 3, 3])
Batchnorm1
oldw2 shape: (32, 32, 3, 3); new shape w2: (32, 16, 3, 3)
new shape: (32, 48, 3, 3)
module1 after: Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 8
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 8
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 8
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 9
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 48, 3, 3); new shape: (16, 48, 3, 3)
new shape: (48, 48, 3, 3)
module after: Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([48, 48, 3, 3])
Batchnorm1
oldw2 shape: (32, 16, 1, 1); new shape w2: (32, 8, 1, 1)
new shape: (32, 24, 1, 1)
module1 after: Conv2d(24, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
IndexL: 9
Module= Conv2d(24, 32, kernel_size=(1, 1), stride=(2, 2), bias=False); i: 0 indexL: 9
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 9
Module= Conv2d(24, 32, kernel_size=(1, 1), stride=(2, 2), bias=False); i: 0 indexL: 10
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 24, 1, 1); new shape: (16, 24, 1, 1)
new shape: (48, 24, 1, 1)
module after: Conv2d(24, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)
size of weight after: torch.Size([48, 24, 1, 1])
Batchnorm1
oldw2 shape: (32, 32, 3, 3); new shape w2: (32, 16, 3, 3)
new shape: (32, 48, 3, 3)
module1 after: Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 10
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 10
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 10
module1: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 10
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 48, 3, 3); new shape: (16, 48, 3, 3)
new shape: (48, 48, 3, 3)
module after: Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([48, 48, 3, 3])
Batchnorm1
oldw2 shape: (32, 32, 3, 3); new shape w2: (32, 16, 3, 3)
new shape: (32, 48, 3, 3)
module1 after: Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 10
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 10
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 10
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 11
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 48, 3, 3); new shape: (16, 48, 3, 3)
new shape: (48, 48, 3, 3)
module after: Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([48, 48, 3, 3])
Batchnorm1
oldw2 shape: (32, 32, 3, 3); new shape w2: (32, 16, 3, 3)
new shape: (32, 48, 3, 3)
module1 after: Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 11
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 11
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 11
module1: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 11
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 48, 3, 3); new shape: (16, 48, 3, 3)
new shape: (48, 48, 3, 3)
module after: Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([48, 48, 3, 3])
Batchnorm1
oldw2 shape: (32, 32, 3, 3); new shape w2: (32, 16, 3, 3)
new shape: (32, 48, 3, 3)
module1 after: Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 11
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 11
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 11
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 12
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 48, 3, 3); new shape: (16, 48, 3, 3)
new shape: (48, 48, 3, 3)
module after: Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([48, 48, 3, 3])
Batchnorm1
oldw2 shape: (32, 32, 3, 3); new shape w2: (32, 16, 3, 3)
new shape: (32, 48, 3, 3)
module1 after: Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 12
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 12
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 12
module1: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 12
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 48, 3, 3); new shape: (16, 48, 3, 3)
new shape: (48, 48, 3, 3)
module after: Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([48, 48, 3, 3])
Batchnorm1
oldw2 shape: (32, 32, 3, 3); new shape w2: (32, 16, 3, 3)
new shape: (32, 48, 3, 3)
module1 after: Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 12
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 12
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 12
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 13
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 48, 3, 3); new shape: (16, 48, 3, 3)
new shape: (48, 48, 3, 3)
module after: Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([48, 48, 3, 3])
Batchnorm1
oldw2 shape: (32, 32, 3, 3); new shape w2: (32, 16, 3, 3)
new shape: (32, 48, 3, 3)
module1 after: Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 13
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 13
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 13
module1: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 13
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 48, 3, 3); new shape: (16, 48, 3, 3)
new shape: (48, 48, 3, 3)
module after: Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([48, 48, 3, 3])
Batchnorm1
oldw2 shape: (32, 32, 3, 3); new shape w2: (32, 16, 3, 3)
new shape: (32, 48, 3, 3)
module1 after: Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 13
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 13
 moduleBn: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 13
Module= Conv2d(48, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 14
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (32, 48, 3, 3); new shape: (16, 48, 3, 3)
new shape: (48, 48, 3, 3)
module after: Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([48, 48, 3, 3])
Batchnorm1
oldw2 shape: (64, 32, 3, 3); new shape w2: (64, 16, 3, 3)
new shape: (64, 48, 3, 3)
module1 after: Conv2d(48, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
IndexL: 14
Module= Conv2d(48, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False); i: 0 indexL: 14
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 14
module1: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 14
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 48, 3, 3); new shape: (32, 48, 3, 3)
new shape: (96, 48, 3, 3)
module after: Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
size of weight after: torch.Size([96, 48, 3, 3])
Batchnorm1
oldw2 shape: (64, 64, 3, 3); new shape w2: (64, 32, 3, 3)
new shape: (64, 96, 3, 3)
module1 after: Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 14
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 14
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 14
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 15
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 96, 3, 3); new shape: (32, 96, 3, 3)
new shape: (96, 96, 3, 3)
module after: Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([96, 96, 3, 3])
Batchnorm1
oldw2 shape: (64, 32, 1, 1); new shape w2: (64, 16, 1, 1)
new shape: (64, 48, 1, 1)
module1 after: Conv2d(48, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
IndexL: 15
Module= Conv2d(48, 64, kernel_size=(1, 1), stride=(2, 2), bias=False); i: 0 indexL: 15
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 15
Module= Conv2d(48, 64, kernel_size=(1, 1), stride=(2, 2), bias=False); i: 0 indexL: 16
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 48, 1, 1); new shape: (32, 48, 1, 1)
new shape: (96, 48, 1, 1)
module after: Conv2d(48, 96, kernel_size=(1, 1), stride=(2, 2), bias=False)
size of weight after: torch.Size([96, 48, 1, 1])
Batchnorm1
oldw2 shape: (64, 64, 3, 3); new shape w2: (64, 32, 3, 3)
new shape: (64, 96, 3, 3)
module1 after: Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 16
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 16
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 16
module1: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 16
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 96, 3, 3); new shape: (32, 96, 3, 3)
new shape: (96, 96, 3, 3)
module after: Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([96, 96, 3, 3])
Batchnorm1
oldw2 shape: (64, 64, 3, 3); new shape w2: (64, 32, 3, 3)
new shape: (64, 96, 3, 3)
module1 after: Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 16
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 16
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 16
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 17
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 96, 3, 3); new shape: (32, 96, 3, 3)
new shape: (96, 96, 3, 3)
module after: Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([96, 96, 3, 3])
Batchnorm1
oldw2 shape: (64, 64, 3, 3); new shape w2: (64, 32, 3, 3)
new shape: (64, 96, 3, 3)
module1 after: Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 17
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 17
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 17
module1: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 17
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 96, 3, 3); new shape: (32, 96, 3, 3)
new shape: (96, 96, 3, 3)
module after: Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([96, 96, 3, 3])
Batchnorm1
oldw2 shape: (64, 64, 3, 3); new shape w2: (64, 32, 3, 3)
new shape: (64, 96, 3, 3)
module1 after: Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 17
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 17
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 17
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 18
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 96, 3, 3); new shape: (32, 96, 3, 3)
new shape: (96, 96, 3, 3)
module after: Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([96, 96, 3, 3])
Batchnorm1
oldw2 shape: (64, 64, 3, 3); new shape w2: (64, 32, 3, 3)
new shape: (64, 96, 3, 3)
module1 after: Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 18
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 18
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 18
module1: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 18
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 96, 3, 3); new shape: (32, 96, 3, 3)
new shape: (96, 96, 3, 3)
module after: Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([96, 96, 3, 3])
Batchnorm1
oldw2 shape: (64, 64, 3, 3); new shape w2: (64, 32, 3, 3)
new shape: (64, 96, 3, 3)
module1 after: Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 18
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 18
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 18
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 19
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 96, 3, 3); new shape: (32, 96, 3, 3)
new shape: (96, 96, 3, 3)
module after: Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([96, 96, 3, 3])
Batchnorm1
oldw2 shape: (64, 64, 3, 3); new shape w2: (64, 32, 3, 3)
new shape: (64, 96, 3, 3)
module1 after: Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 19
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 0 indexL: 19
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1; indexL: 19
module1: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3; indexL: 19
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 96, 3, 3); new shape: (32, 96, 3, 3)
new shape: (96, 96, 3, 3)
module after: Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([96, 96, 3, 3])
Batchnorm1
oldw2 shape: (64, 64, 3, 3); new shape w2: (64, 32, 3, 3)
new shape: (64, 96, 3, 3)
module1 after: Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
IndexL: 19
Module= Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False); i: 3 indexL: 19
 moduleBn: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 4; indexL: 19
dtype tensor: torch.float32; dtype numpy: float32
dtype new tensor: float64
oldw shape: (64, 96, 3, 3); new shape: (32, 96, 3, 3)
new shape: (96, 96, 3, 3)
module after: Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
size of weight after: torch.Size([96, 96, 3, 3])
Batchnorm1
oldw2 shape: (10, 64); new shape w2: (10, 32)
new shape: (10, 96)
module after: Linear(in_features=96, out_features=10, bias=True)
size of weight after: torch.Size([10, 96])
self: N2N(
  (module_list): ModuleList(
    (0): Conv2d(3, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Sequential(
      (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (4): Sequential(
      (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (5): Sequential(
      (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (6): Sequential(
      (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (7): Sequential(
      (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (8): Sequential(
      (0): Conv2d(24, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (9): Sequential(
      (0): Conv2d(24, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (10): Sequential(
      (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (11): Sequential(
      (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (12): Sequential(
      (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (13): Sequential(
      (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (14): Sequential(
      (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (15): Sequential(
      (0): Conv2d(48, 96, kernel_size=(1, 1), stride=(2, 2), bias=False)
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (16): Sequential(
      (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (17): Sequential(
      (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (18): Sequential(
      (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (19): Sequential(
      (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (20): AdaptiveAvgPool2d(output_size=(1, 1))
    (21): Linear(in_features=96, out_features=10, bias=True)
  )
  (relu): ReLU(inplace=True)
)
layer: Conv2d(3, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)); i: 0
layer: BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True); i: 1

>new Layer:  Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(24, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

>new Layer:  [Conv2d(24, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))]

>new Layer:  Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(24, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(24, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]
Sequential: [Conv2d(24, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(24, 48, kernel_size=(1, 1), stride=(2, 2))

>new Layer:  [Conv2d(24, 48, kernel_size=(1, 1), stride=(2, 2))]
>new Layer: [Conv2d(24, 48, kernel_size=(1, 1), stride=(2, 2)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

>new Layer:  [Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))]

>new Layer:  Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(48, 96, kernel_size=(1, 1), stride=(2, 2))

>new Layer:  [Conv2d(48, 96, kernel_size=(1, 1), stride=(2, 2))]
>new Layer: [Conv2d(48, 96, kernel_size=(1, 1), stride=(2, 2)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

>new Layer:  Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]

>new Layer:  Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))

>new Layer:  [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))]
>new Layer: [Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), ReLU(inplace=True), Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]

Linear:  Linear(in_features=96, out_features=10, bias=True)
 Modell: N2N(
  (module_list): ModuleList(
    (0): Conv2d(3, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Sequential(
      (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (4): Sequential(
      (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (5): Sequential(
      (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (6): Sequential(
      (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (7): Sequential(
      (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (8): Sequential(
      (0): Conv2d(24, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (9): Sequential(
      (0): Conv2d(24, 48, kernel_size=(1, 1), stride=(2, 2))
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (10): Sequential(
      (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (11): Sequential(
      (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (12): Sequential(
      (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (13): Sequential(
      (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (14): Sequential(
      (0): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (15): Sequential(
      (0): Conv2d(48, 96, kernel_size=(1, 1), stride=(2, 2))
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (16): Sequential(
      (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (17): Sequential(
      (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (18): Sequential(
      (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (19): Sequential(
      (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (20): AdaptiveAvgPool2d(output_size=(1, 1))
    (21): Linear(in_features=96, out_features=10, bias=True)
  )
  (relu): ReLU(inplace=True)
)
Epoche: [2/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [2][0/196]	Time 0.822 (0.822)	Data 0.224 (0.224)	Loss 243.7808 (243.7808)	Acc@1 8.984 (8.984)	Acc@5 50.781 (50.781)
Epoch: [2][64/196]	Time 0.781 (0.577)	Data 0.000 (0.004)	Loss 20.3103 (181.8069)	Acc@1 7.812 (11.088)	Acc@5 51.172 (51.472)
Epoch: [2][128/196]	Time 0.786 (0.574)	Data 0.000 (0.002)	Loss 4.6504 (95.4337)	Acc@1 9.766 (11.355)	Acc@5 51.172 (53.101)
Epoch: [2][192/196]	Time 0.786 (0.571)	Data 0.000 (0.001)	Loss 2.7072 (65.0216)	Acc@1 10.156 (11.672)	Acc@5 58.203 (54.036)
after train
n1: 2 for:
wAcc: 42.1
test acc: 12.65
Epoche: [3/180]; Lr: 0.1
batch Size 256
befor train
Epoch: [3][0/196]	Time 0.825 (0.825)	Data 0.240 (0.240)	Loss 3.4971 (3.4971)	Acc@1 9.375 (9.375)	Acc@5 53.125 (53.125)
Traceback (most recent call last):
  File "main.py", line 919, in <module>
    main()
  File "main.py", line 350, in main
    optimizer, epoch, use_cuda)
  File "main.py", line 680, in train
    loss.backward()
  File "/home/jessica.buehler/venv/lib/python3.6/site-packages/torch/tensor.py", line 221, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph)
  File "/home/jessica.buehler/venv/lib/python3.6/site-packages/torch/autograd/__init__.py", line 132, in backward
    allow_unreachable=True)  # allow_unreachable flag
KeyboardInterrupt
